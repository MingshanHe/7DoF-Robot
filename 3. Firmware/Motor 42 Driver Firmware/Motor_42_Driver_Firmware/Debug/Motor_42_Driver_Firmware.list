
Motor_42_Driver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003acc  08003acc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003acc  08003acc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000074  08003b4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08003b4c  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016244  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003983  00000000  00000000  000362e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00039c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b68b  00000000  00000000  0003b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012296  00000000  00000000  00056cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddc1  00000000  00000000  00068f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000f6d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003160 	.word	0x08003160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003160 	.word	0x08003160

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_CAN_Init+0x60>)
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <MX_CAN_Init+0x64>)
 8000610:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_CAN_Init+0x60>)
 8000614:	2210      	movs	r2, #16
 8000616:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_CAN_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_CAN_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_CAN_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_CAN_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_CAN_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_CAN_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_CAN_Init+0x60>)
 800063e:	2200      	movs	r2, #0
 8000640:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_CAN_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_CAN_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_CAN_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_CAN_Init+0x60>)
 8000656:	f000 fe25 	bl	80012a4 <HAL_CAN_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 f8b2 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000278 	.word	0x20000278
 800066c:	40006400 	.word	0x40006400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_GPIO_Init+0xb8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <MX_GPIO_Init+0xb8>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_GPIO_Init+0xb8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_GPIO_Init+0xb8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <MX_GPIO_Init+0xb8>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_GPIO_Init+0xb8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	213c      	movs	r1, #60	; 0x3c
 80006b8:	481c      	ldr	r0, [pc, #112]	; (800072c <MX_GPIO_Init+0xbc>)
 80006ba:	f001 f957 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN_PWM_B_Pin|IN_PWM_A_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006c4:	481a      	ldr	r0, [pc, #104]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006c6:	f001 f951 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_BM_Pin IN_BP_Pin IN_AM_Pin IN_AP_Pin */
  GPIO_InitStruct.Pin = IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin;
 80006ca:	233c      	movs	r3, #60	; 0x3c
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_GPIO_Init+0xbc>)
 80006e2:	f000 ffbf 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_1_Pin;
 80006e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006fc:	f000 ffb2 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PWM_B_Pin IN_PWM_A_Pin */
  GPIO_InitStruct.Pin = IN_PWM_B_Pin|IN_PWM_A_Pin;
 8000700:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_GPIO_Init+0xc0>)
 800071a:	f000 ffa3 	bl	8001664 <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800
 8000730:	40010c00 	.word	0x40010c00

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 fd52 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f809 	bl	8000752 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff96 	bl	8000670 <MX_GPIO_Init>
  MX_CAN_Init();
 8000744:	f7ff ff60 	bl	8000608 <MX_CAN_Init>
  MX_SPI1_Init();
 8000748:	f000 f844 	bl	80007d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800074c:	f000 fa28 	bl	8000ba0 <MX_USART1_UART_Init>
//  Main();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x1c>

08000752 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b090      	sub	sp, #64	; 0x40
 8000756:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	2228      	movs	r2, #40	; 0x28
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fcb1 	bl	80030c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f907 	bl	800199c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000794:	f000 f818 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb73 	bl	8001e9c <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007bc:	f000 f804 	bl	80007c8 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3740      	adds	r7, #64	; 0x40
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_SPI1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_SPI1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI1_Init+0x64>)
 8000820:	220a      	movs	r2, #10
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_SPI1_Init+0x64>)
 8000826:	f001 fcd3 	bl	80021d0 <HAL_SPI_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000830:	f7ff ffca 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002e8 	.word	0x200002e8
 800083c:	40013000 	.word	0x40013000

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <HAL_MspInit+0x5c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x5c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_MspInit+0x60>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_MspInit+0x60>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <HAL_CAN_MspInit+0xb0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d143      	bne.n	800094c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ce:	61d3      	str	r3, [r2, #28]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_CAN_MspInit+0xb4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4814      	ldr	r0, [pc, #80]	; (800095c <HAL_CAN_MspInit+0xb8>)
 800090a:	f000 feab 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <HAL_CAN_MspInit+0xb8>)
 8000924:	f000 fe9e 	bl	8001664 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_CAN_MspInit+0xbc>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_CAN_MspInit+0xbc>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010c00 	.word	0x40010c00
 8000960:	40010000 	.word	0x40010000

08000964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <HAL_SPI_MspInit+0xd8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d156      	bne.n	8000a32 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 800098a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_SPI_MspInit+0xdc>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <HAL_SPI_MspInit+0xe0>)
 80009e2:	f000 fe3f 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80009e6:	2328      	movs	r3, #40	; 0x28
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <HAL_SPI_MspInit+0xe4>)
 80009fa:	f000 fe33 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fe:	2310      	movs	r3, #16
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <HAL_SPI_MspInit+0xe4>)
 8000a12:	f000 fe27 	bl	8001664 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_SPI_MspInit+0xe8>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_SPI_MspInit+0xe8>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40010000 	.word	0x40010000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_UART_MspInit+0xa4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d13d      	bne.n	8000aec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa0:	2340      	movs	r3, #64	; 0x40
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000ab4:	f000 fdd6 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000acc:	f000 fdca 	bl	8001664 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_UART_MspInit+0xb0>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_UART_MspInit+0xb0>)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	40010000 	.word	0x40010000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 fb8f 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
	return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <_kill>:

int _kill(int pid, int sig)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b6a:	f002 fa83 	bl	8003074 <__errno>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2216      	movs	r2, #22
 8000b72:	601a      	str	r2, [r3, #0]
	return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_exit>:

void _exit (int status)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffe7 	bl	8000b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b92:	e7fe      	b.n	8000b92 <_exit+0x12>

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART1_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART1_UART_Init+0x4c>)
 8000bd8:	f001 fdc6 	bl	8002768 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f7ff fdf1 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200003cc 	.word	0x200003cc
 8000bf0:	40013800 	.word	0x40013800

08000bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1a:	f7ff ffbb 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 fa2f 	bl	8003080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff fd87 	bl	8000734 <main>
  bx lr
 8000c26:	4770      	bx	lr
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c30:	08003ad8 	.word	0x08003ad8
  ldr r2, =_sbss
 8000c34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c38:	20000418 	.word	0x20000418

08000c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>

08000c3e <_ZN12TB67H450Base4InitEv>:
#include "tb67h450_base.h"
#include "sin_map.h"

void TB67H450Base::Init()
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
    InitGpio();
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3314      	adds	r3, #20
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	4798      	blx	r3
    InitPwm();
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3318      	adds	r3, #24
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <_ZN12TB67H450Base19SetFocCurrentVectorEml>:

void TB67H450Base::SetFocCurrentVector(uint32_t _directionInCount, int32_t _current_mA)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
    phaseB.sinMapPtr = (_directionInCount) & (0x000003FF);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	809a      	strh	r2, [r3, #4]
    phaseA.sinMapPtr = (phaseB.sinMapPtr + (256)) & (0x000003FF);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	815a      	strh	r2, [r3, #10]

    phaseA.sinMapData = sin_pi_m2[phaseA.sinMapPtr];
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	895b      	ldrh	r3, [r3, #10]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x158>)
 8000c9e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	819a      	strh	r2, [r3, #12]
    phaseB.sinMapData = sin_pi_m2[phaseB.sinMapPtr];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x158>)
 8000cae:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	80da      	strh	r2, [r3, #6]

    uint32_t dac_reg = abs(_current_mA);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bfb8      	it	lt
 8000cbc:	425b      	neglt	r3, r3
 8000cbe:	617b      	str	r3, [r7, #20]
    dac_reg = (uint32_t) (dac_reg * 5083) >> 12;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f241 32db 	movw	r2, #5083	; 0x13db
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	0b1b      	lsrs	r3, r3, #12
 8000ccc:	617b      	str	r3, [r7, #20]
    dac_reg = dac_reg & (0x00000FFF);
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    phaseA.dacValue12Bits =
        (uint32_t) (dac_reg * abs(phaseA.sinMapData)) >> sin_pi_m2_dpiybit;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bfb8      	it	lt
 8000ce0:	425b      	neglt	r3, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fb03 f302 	mul.w	r3, r3, r2
 8000cec:	0b1b      	lsrs	r3, r3, #12
    phaseA.dacValue12Bits =
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits =
        (uint32_t) (dac_reg * abs(phaseB.sinMapData)) >> sin_pi_m2_dpiybit;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fb03 f302 	mul.w	r3, r3, r2
 8000d0a:	0b1b      	lsrs	r3, r3, #12
    phaseB.dacValue12Bits =
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3310      	adds	r3, #16
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	89d1      	ldrh	r1, [r2, #14]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	8912      	ldrh	r2, [r2, #8]
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	4798      	blx	r3

    if (phaseA.sinMapData > 0)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd08      	ble.n	8000d42 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0xda>
        SetInputA(true, false);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3320      	adds	r3, #32
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	4798      	blx	r3
 8000d40:	e015      	b.n	8000d6e <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x106>
    else if (phaseA.sinMapData < 0)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da08      	bge.n	8000d5e <_ZN12TB67H450Base19SetFocCurrentVectorEml+0xf6>
        SetInputA(false, true);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3320      	adds	r3, #32
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2201      	movs	r2, #1
 8000d56:	2100      	movs	r1, #0
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	4798      	blx	r3
 8000d5c:	e007      	b.n	8000d6e <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x106>
    else
        SetInputA(true, true);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3320      	adds	r3, #32
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	4798      	blx	r3

    if (phaseB.sinMapData > 0)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd08      	ble.n	8000d8a <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x122>
        SetInputB(true, false);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3324      	adds	r3, #36	; 0x24
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	4798      	blx	r3
    else if (phaseB.sinMapData < 0)
        SetInputB(false, true);
    else
        SetInputB(true, true);
}
 8000d88:	e015      	b.n	8000db6 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x14e>
    else if (phaseB.sinMapData < 0)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	da08      	bge.n	8000da6 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x13e>
        SetInputB(false, true);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3324      	adds	r3, #36	; 0x24
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2100      	movs	r1, #0
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	4798      	blx	r3
}
 8000da4:	e007      	b.n	8000db6 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x14e>
        SetInputB(true, true);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3324      	adds	r3, #36	; 0x24
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2201      	movs	r2, #1
 8000db0:	2101      	movs	r1, #1
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	4798      	blx	r3
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	080031a0 	.word	0x080031a0

08000dc4 <_ZN12TB67H450Base18SetTwoCoilsCurrentEtt>:


void TB67H450Base::SetTwoCoilsCurrent(uint16_t _currentA_3300mAIn12Bits, uint16_t _currentB_3300mAIn12Bits)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
     * After SetFocCurrentVector calculation a 12bits value was mapped to 0~3300mA.
     * And due to used 0.1Ohm shank resistor, 0~3300mV V-ref means 0~3300mA CurrentSetPoint,
     * For more details, see TB67H450 Datasheet page.10 .
     */

    DacOutputVoltage(_currentA_3300mAIn12Bits, _currentB_3300mAIn12Bits);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	331c      	adds	r3, #28
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	883a      	ldrh	r2, [r7, #0]
 8000dde:	8879      	ldrh	r1, [r7, #2]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_ZN12TB67H450Base5SleepEv>:


void TB67H450Base::Sleep()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    phaseA.dacValue12Bits = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3310      	adds	r3, #16
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	89d1      	ldrh	r1, [r2, #14]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	8912      	ldrh	r2, [r2, #8]
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	4798      	blx	r3

    SetInputA(false, false);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3320      	adds	r3, #32
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
    SetInputB(false, false);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3324      	adds	r3, #36	; 0x24
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_ZN12TB67H450Base5BrakeEv>:


void TB67H450Base::Brake()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    phaseA.dacValue12Bits = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3310      	adds	r3, #16
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	89d1      	ldrh	r1, [r2, #14]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	8912      	ldrh	r2, [r2, #8]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	4798      	blx	r3

    SetInputA(true, true);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3320      	adds	r3, #32
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2101      	movs	r1, #1
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	4798      	blx	r3
    SetInputB(true, true);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3324      	adds	r3, #36	; 0x24
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	4798      	blx	r3
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_ZN13MotionPlanner14CurrentTracker4InitEv>:
#include "motion_planner.h"
#include "math.h"


void MotionPlanner::CurrentTracker::Init()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    SetCurrentAcc(context->config->ratedCurrentAcc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f804 	bl	8000eae <_ZN13MotionPlanner14CurrentTracker13SetCurrentAccEl>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN13MotionPlanner14CurrentTracker13SetCurrentAccEl>:
    currentIntegral = currentIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::CurrentTracker::SetCurrentAcc(int32_t _currentAcc)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
    currentAcc = _currentAcc;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	609a      	str	r2, [r3, #8]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <_ZN13MotionPlanner15VelocityTracker4InitEv>:


void MotionPlanner::VelocityTracker::Init()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    SetVelocityAcc(context->config->ratedVelocityAcc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f804 	bl	8000eea <_ZN13MotionPlanner15VelocityTracker14SetVelocityAccEl>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZN13MotionPlanner15VelocityTracker14SetVelocityAccEl>:


void MotionPlanner::VelocityTracker::SetVelocityAcc(int32_t _velocityAcc)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
    velocityAcc = _velocityAcc;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	609a      	str	r2, [r3, #8]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <_ZN13MotionPlanner15PositionTracker4InitEv>:
    velocityIntegral = velocityIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::PositionTracker::Init()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    SetVelocityAcc(context->config->ratedVelocityAcc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f813 	bl	8000f44 <_ZN13MotionPlanner15PositionTracker14SetVelocityAccEl>

    /*
     *  Allow to locking-brake when velocity is lower than (speedLockingBrake).
     *  The best value should be (ratedMoveAcc/1000)
     */
    speedLockingBrake = context->config->ratedVelocityAcc / 1000;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_ZN13MotionPlanner15PositionTracker4InitEv+0x3c>)
 8000f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2e:	1192      	asrs	r2, r2, #6
 8000f30:	17db      	asrs	r3, r3, #31
 8000f32:	1ad2      	subs	r2, r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	10624dd3 	.word	0x10624dd3

08000f44 <_ZN13MotionPlanner15PositionTracker14SetVelocityAccEl>:


void MotionPlanner::PositionTracker::SetVelocityAcc(int32_t value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    velocityUpAcc = value;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	60da      	str	r2, [r3, #12]
    velocityDownAcc = value;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	611a      	str	r2, [r3, #16]
    quickVelocityDownAcc = 0.5f / (float) velocityDownAcc;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f9ae 	bl	80002c0 <__aeabi_i2f>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000f6c:	f7ff fab0 	bl	80004d0 <__aeabi_fdiv>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZN13MotionPlanner20PositionInterpolator4InitEv>:
    velocityIntegral = velocityIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::PositionInterpolator::Init()
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <_ZN13MotionPlanner17TrajectoryTracker22SetSlowDownVelocityAccEl>:
    goVelocity = estVelocity;
}


void MotionPlanner::TrajectoryTracker::SetSlowDownVelocityAcc(int32_t value)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
    velocityDownAcc = value;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	60da      	str	r2, [r3, #12]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <_ZN13MotionPlanner17TrajectoryTracker4InitEl>:
    velovityNowRemainder = velovityNowRemainder % context->CONTROL_FREQUENCY;
}


void MotionPlanner::TrajectoryTracker::Init(int32_t _updateTimeout)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    //SetSlowDownVelocityAcc(context->config->ratedVelocityAcc / 10);
    SetSlowDownVelocityAcc(context->config->ratedVelocityAcc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffe5 	bl	8000f92 <_ZN13MotionPlanner17TrajectoryTracker22SetSlowDownVelocityAccEl>
    updateTimeout = _updateTimeout;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZN13MotionPlanner12AttachConfigEPNS_8Config_tE>:


void MotionPlanner::AttachConfig(MotionPlanner::Config_t* _config)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
    config = _config;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    currentTracker.Init();
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3308      	adds	r3, #8
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff4d 	bl	8000e8c <_ZN13MotionPlanner14CurrentTracker4InitEv>
    velocityTracker.Init();
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	331c      	adds	r3, #28
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff66 	bl	8000ec8 <_ZN13MotionPlanner15VelocityTracker4InitEv>
    positionTracker.Init();
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3330      	adds	r3, #48	; 0x30
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff7f 	bl	8000f04 <_ZN13MotionPlanner15PositionTracker4InitEv>
    positionInterpolator.Init();
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	335c      	adds	r3, #92	; 0x5c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffb8 	bl	8000f80 <_ZN13MotionPlanner20PositionInterpolator4InitEv>
    trajectoryTracker.Init(200);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	337c      	adds	r3, #124	; 0x7c
 8001014:	21c8      	movs	r1, #200	; 0xc8
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffc8 	bl	8000fac <_ZN13MotionPlanner17TrajectoryTracker4InitEl>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN5Motor10Controller12AttachConfigEPNS0_8Config_tE>:
                                                     context->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
}


void Motor::Controller::AttachConfig(Motor::Controller::Config_t* _config)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    config = _config;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <_ZN10MT6816Base4InitEv>:
#include "mt6816_base.h"

bool MT6816Base::Init()
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    SpiInit();
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	330c      	adds	r3, #12
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	4798      	blx	r3
    UpdateAngle();
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	4798      	blx	r3

    // Check if the stored calibration data are valid
    angleData.rectifyValid = true;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	721a      	strb	r2, [r3, #8]
    for (uint32_t i = 0; i < RESOLUTION; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4293      	cmp	r3, r2
 8001072:	d210      	bcs.n	8001096 <_ZN10MT6816Base4InitEv+0x58>
    {
        if (quickCaliDataPtr[i] == 0xFFFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001084:	4293      	cmp	r3, r2
 8001086:	d102      	bne.n	800108e <_ZN10MT6816Base4InitEv+0x50>
            angleData.rectifyValid = false;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	721a      	strb	r2, [r3, #8]
    for (uint32_t i = 0; i < RESOLUTION; i++)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e7e8      	b.n	8001068 <_ZN10MT6816Base4InitEv+0x2a>
    }

    return angleData.rectifyValid;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZN10MT6816Base11UpdateAngleEv>:


uint16_t MT6816Base::UpdateAngle()
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    dataTx[0] = (0x80 | 0x03) << 8;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f44f 4203 	mov.w	r2, #33536	; 0x8300
 80010b0:	839a      	strh	r2, [r3, #28]
    dataTx[1] = (0x80 | 0x04) << 8;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 80010b8:	83da      	strh	r2, [r3, #30]

    for (uint8_t i = 0; i < 3; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d859      	bhi.n	8001178 <_ZN10MT6816Base11UpdateAngleEv+0xd6>
    {
        dataRx[0] = SpiTransmitAndRead16Bits(dataTx[0]);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3310      	adds	r3, #16
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	8b92      	ldrh	r2, [r2, #28]
 80010d0:	4611      	mov	r1, r2
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	841a      	strh	r2, [r3, #32]
        dataRx[1] = SpiTransmitAndRead16Bits(dataTx[1]);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3310      	adds	r3, #16
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	8bd2      	ldrh	r2, [r2, #30]
 80010ea:	4611      	mov	r1, r2
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	845a      	strh	r2, [r3, #34]	; 0x22

        spiRawData.rawData = ((dataRx[0] & 0x00FF) << 8) | (dataRx[1] & 0x00FF);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8c1b      	ldrh	r3, [r3, #32]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001104:	b21b      	sxth	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	821a      	strh	r2, [r3, #16]

        //奇偶校验
        hCount = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        for (uint8_t j = 0; j < 16; j++)
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d815      	bhi.n	8001152 <_ZN10MT6816Base11UpdateAngleEv+0xb0>
        {
            if (spiRawData.rawData & (0x0001 << j))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8a1b      	ldrh	r3, [r3, #16]
 800112a:	461a      	mov	r2, r3
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	fa42 f303 	asr.w	r3, r2, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <_ZN10MT6816Base11UpdateAngleEv+0xa8>
                hCount++;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001140:	3301      	adds	r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        for (uint8_t j = 0; j < 16; j++)
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	3301      	adds	r3, #1
 800114e:	73bb      	strb	r3, [r7, #14]
 8001150:	e7e6      	b.n	8001120 <_ZN10MT6816Base11UpdateAngleEv+0x7e>
        }
        if (hCount & 0x01)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <_ZN10MT6816Base11UpdateAngleEv+0xc6>
        {
            spiRawData.checksumFlag = false;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	755a      	strb	r2, [r3, #21]
 8001166:	e003      	b.n	8001170 <_ZN10MT6816Base11UpdateAngleEv+0xce>
        } else
        {
            spiRawData.checksumFlag = true;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	755a      	strb	r2, [r3, #21]
            break;
 800116e:	e003      	b.n	8001178 <_ZN10MT6816Base11UpdateAngleEv+0xd6>
    for (uint8_t i = 0; i < 3; i++)
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	3301      	adds	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e7a2      	b.n	80010be <_ZN10MT6816Base11UpdateAngleEv+0x1c>
        }
    }

    if (spiRawData.checksumFlag)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7d5b      	ldrb	r3, [r3, #21]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d010      	beq.n	80011a2 <_ZN10MT6816Base11UpdateAngleEv+0x100>
    {
        spiRawData.rawAngle = spiRawData.rawData >> 2;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8a1b      	ldrh	r3, [r3, #16]
 8001184:	109b      	asrs	r3, r3, #2
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	825a      	strh	r2, [r3, #18]
        spiRawData.noMagFlag = (bool) (spiRawData.rawData & (0x0001 << 1));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	8a1b      	ldrh	r3, [r3, #16]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf14      	ite	ne
 8001198:	2301      	movne	r3, #1
 800119a:	2300      	moveq	r3, #0
 800119c:	b2da      	uxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	751a      	strb	r2, [r3, #20]
    }

    angleData.rawAngle = spiRawData.rawAngle;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8a5a      	ldrh	r2, [r3, #18]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	809a      	strh	r2, [r3, #4]
    angleData.rectifiedAngle = quickCaliDataPtr[angleData.rawAngle];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	881a      	ldrh	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	80da      	strh	r2, [r3, #6]

    return angleData.rectifiedAngle;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	88db      	ldrh	r3, [r3, #6]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZN10MT6816Base12IsCalibratedEv>:


bool MT6816Base::IsCalibrated()
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    return angleData.rectifyValid;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a1b      	ldrb	r3, [r3, #8]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x28>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x28>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 fa03 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fb20 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa0d 	bl	800164a <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f9e3 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x1c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x20>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_IncTick+0x20>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000008 	.word	0x20000008
 800128c:	20000410 	.word	0x20000410

08001290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <HAL_GetTick+0x10>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000410 	.word	0x20000410

080012a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0ed      	b.n	8001492 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff faee 	bl	80008a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d8:	f7ff ffda 	bl	8001290 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012de:	e012      	b.n	8001306 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e0:	f7ff ffd6 	bl	8001290 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d90b      	bls.n	8001306 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0c5      	b.n	8001492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0e5      	beq.n	80012e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0202 	bic.w	r2, r2, #2
 8001322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff ffb4 	bl	8001290 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800132a:	e012      	b.n	8001352 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132c:	f7ff ffb0 	bl	8001290 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b0a      	cmp	r3, #10
 8001338:	d90b      	bls.n	8001352 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e09f      	b.n	8001492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e5      	bne.n	800132c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e1b      	ldrb	r3, [r3, #24]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e5b      	ldrb	r3, [r3, #25]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e9b      	ldrb	r3, [r3, #26]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0220 	bic.w	r2, r2, #32
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7edb      	ldrb	r3, [r3, #27]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0210 	orr.w	r2, r2, #16
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7f1b      	ldrb	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d108      	bne.n	8001422 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0208 	orr.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7f5b      	ldrb	r3, [r3, #29]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0204 	orr.w	r2, r2, #4
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e007      	b.n	800145c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	ea42 0103 	orr.w	r1, r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff90 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff49 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff5e 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffb0 	bl	80015b8 <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001676:	e169      	b.n	800194c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001678:	2201      	movs	r2, #1
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8158 	bne.w	8001946 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a9a      	ldr	r2, [pc, #616]	; (8001904 <HAL_GPIO_Init+0x2a0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d05e      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016a0:	4a98      	ldr	r2, [pc, #608]	; (8001904 <HAL_GPIO_Init+0x2a0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d875      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016a6:	4a98      	ldr	r2, [pc, #608]	; (8001908 <HAL_GPIO_Init+0x2a4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d058      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016ac:	4a96      	ldr	r2, [pc, #600]	; (8001908 <HAL_GPIO_Init+0x2a4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d86f      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016b2:	4a96      	ldr	r2, [pc, #600]	; (800190c <HAL_GPIO_Init+0x2a8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d052      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016b8:	4a94      	ldr	r2, [pc, #592]	; (800190c <HAL_GPIO_Init+0x2a8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d869      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016be:	4a94      	ldr	r2, [pc, #592]	; (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d04c      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016c4:	4a92      	ldr	r2, [pc, #584]	; (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d863      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016ca:	4a92      	ldr	r2, [pc, #584]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d046      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016d0:	4a90      	ldr	r2, [pc, #576]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d85d      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d82a      	bhi.n	8001730 <HAL_GPIO_Init+0xcc>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d859      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016de:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <HAL_GPIO_Init+0x80>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	08001739 	.word	0x08001739
 80016ec:	0800174b 	.word	0x0800174b
 80016f0:	0800178d 	.word	0x0800178d
 80016f4:	08001793 	.word	0x08001793
 80016f8:	08001793 	.word	0x08001793
 80016fc:	08001793 	.word	0x08001793
 8001700:	08001793 	.word	0x08001793
 8001704:	08001793 	.word	0x08001793
 8001708:	08001793 	.word	0x08001793
 800170c:	08001793 	.word	0x08001793
 8001710:	08001793 	.word	0x08001793
 8001714:	08001793 	.word	0x08001793
 8001718:	08001793 	.word	0x08001793
 800171c:	08001793 	.word	0x08001793
 8001720:	08001793 	.word	0x08001793
 8001724:	08001793 	.word	0x08001793
 8001728:	08001741 	.word	0x08001741
 800172c:	08001755 	.word	0x08001755
 8001730:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_GPIO_Init+0x2b4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e029      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e024      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01f      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e01a      	b.n	8001794 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e013      	b.n	8001794 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e009      	b.n	8001794 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e003      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x130>
          break;
 8001792:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d801      	bhi.n	800179e <HAL_GPIO_Init+0x13a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	e001      	b.n	80017a2 <HAL_GPIO_Init+0x13e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d802      	bhi.n	80017b0 <HAL_GPIO_Init+0x14c>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x152>
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	3b08      	subs	r3, #8
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	210f      	movs	r1, #15
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80b1 	beq.w	8001946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fc:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_GPIO_Init+0x2bc>)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a40      	ldr	r2, [pc, #256]	; (8001924 <HAL_GPIO_Init+0x2c0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1ec>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_GPIO_Init+0x2c4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1e8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3e      	ldr	r2, [pc, #248]	; (800192c <HAL_GPIO_Init+0x2c8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <HAL_GPIO_Init+0x2cc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1e0>
 8001840:	2303      	movs	r3, #3
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001844:	2304      	movs	r3, #4
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001850:	2300      	movs	r3, #0
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001862:	492f      	ldr	r1, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x2bc>)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	492c      	ldr	r1, [pc, #176]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4928      	ldr	r1, [pc, #160]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4922      	ldr	r1, [pc, #136]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	491e      	ldr	r1, [pc, #120]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4918      	ldr	r1, [pc, #96]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4914      	ldr	r1, [pc, #80]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d021      	beq.n	8001938 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e021      	b.n	8001946 <HAL_GPIO_Init+0x2e2>
 8001902:	bf00      	nop
 8001904:	10320000 	.word	0x10320000
 8001908:	10310000 	.word	0x10310000
 800190c:	10220000 	.word	0x10220000
 8001910:	10210000 	.word	0x10210000
 8001914:	10120000 	.word	0x10120000
 8001918:	10110000 	.word	0x10110000
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	40010800 	.word	0x40010800
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_GPIO_Init+0x304>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	43db      	mvns	r3, r3
 8001940:	4909      	ldr	r1, [pc, #36]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001942:	4013      	ands	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f ae8e 	bne.w	8001678 <HAL_GPIO_Init+0x14>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	372c      	adds	r7, #44	; 0x2c
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e26c      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c8:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
 80019d4:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e246      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x76>
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a7f      	ldr	r2, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x98>
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xbc>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a67      	ldr	r2, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc0a 	bl	8001290 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fc06 	bl	8001290 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1fa      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe4>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fbf6 	bl	8001290 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fbf2 	bl	8001290 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1e6      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x10c>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fbab 	bl	8001290 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fba7 	bl	8001290 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e19b      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb8a 	bl	8001290 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb86 	bl	8001290 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e17a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03a      	beq.n	8001c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d019      	beq.n	8001be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fb6a 	bl	8001290 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb66 	bl	8001290 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e15a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 fad8 	bl	8002194 <RCC_Delay>
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fb50 	bl	8001290 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fb4c 	bl	8001290 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e140      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	42420000 	.word	0x42420000
 8001c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e9      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a6 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b97      	ldr	r3, [pc, #604]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb0d 	bl	8001290 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fb09 	bl	8001290 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0fd      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x312>
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x334>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x356>
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fabd 	bl	8001290 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fab9 	bl	8001290 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ab      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x37e>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff faa7 	bl	8001290 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff faa3 	bl	8001290 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e095      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8081 	beq.w	8001e86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d061      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d146      	bne.n	8001e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fa77 	bl	8001290 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff fa73 	bl	8001290 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e067      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	492d      	ldr	r1, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a19      	ldr	r1, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4927      	ldr	r1, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fa47 	bl	8001290 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fa43 	bl	8001290 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e037      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46a>
 8001e24:	e02f      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fa30 	bl	8001290 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff fa2c 	bl	8001290 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e020      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x498>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d0      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4965      	ldr	r1, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e073      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff f980 	bl	8001290 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff f97c 	bl	8001290 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e053      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f8de 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	08003188 	.word	0x08003188
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b490      	push	{r4, r7}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002078:	1d3c      	adds	r4, r7, #4
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002080:	f240 2301 	movw	r3, #513	; 0x201
 8002084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x46>
 80020ae:	e02d      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020c2:	4413      	add	r3, r2
 80020c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c5b      	lsrs	r3, r3, #17
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020e2:	4413      	add	r3, r2
 80020e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ee:	fb02 f203 	mul.w	r2, r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e004      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	623b      	str	r3, [r7, #32]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6a3b      	ldr	r3, [r7, #32]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bc90      	pop	{r4, r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08003178 	.word	0x08003178
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	003d0900 	.word	0x003d0900

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_RCC_GetHCLKFreq+0x10>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002148:	f7ff fff2 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08003198 	.word	0x08003198

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002170:	f7ff ffde 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08003198 	.word	0x08003198

08002194 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <RCC_Delay+0x34>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <RCC_Delay+0x38>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a5b      	lsrs	r3, r3, #9
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b0:	bf00      	nop
  }
  while (Delay --);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e5a      	subs	r2, r3, #1
 80021b6:	60fa      	str	r2, [r7, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f9      	bne.n	80021b0 <RCC_Delay+0x1c>
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	20000000 	.word	0x20000000
 80021cc:	10624dd3 	.word	0x10624dd3

080021d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e076      	b.n	80022d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021f2:	d009      	beq.n	8002208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
 80021fa:	e005      	b.n	8002208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fb9e 	bl	8000964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800223e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	ea42 0103 	orr.w	r1, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	0c1a      	lsrs	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f002 0204 	and.w	r2, r2, #4
 80022ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022e6:	2301      	movs	r3, #1
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x26>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e18a      	b.n	8002614 <HAL_SPI_TransmitReceive+0x33c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002306:	f7fe ffc3 	bl	8001290 <HAL_GetTick>
 800230a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002324:	2b01      	cmp	r3, #1
 8002326:	d00f      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x70>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232e:	d107      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x68>
 8002338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800233c:	2b04      	cmp	r3, #4
 800233e:	d003      	beq.n	8002348 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002346:	e15b      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_SPI_TransmitReceive+0x82>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_SPI_TransmitReceive+0x82>
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002360:	e14e      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b04      	cmp	r3, #4
 800236c:	d003      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d007      	beq.n	80023ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d178      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_TransmitReceive+0x10a>
 80023dc:	8b7b      	ldrh	r3, [r7, #26]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d166      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002406:	e053      	b.n	80024b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d11b      	bne.n	800244e <HAL_SPI_TransmitReceive+0x176>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_SPI_TransmitReceive+0x176>
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d113      	bne.n	800244e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	1c9a      	adds	r2, r3, #2
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d119      	bne.n	8002490 <HAL_SPI_TransmitReceive+0x1b8>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d014      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	b292      	uxth	r2, r2
 8002472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800248c:	2301      	movs	r3, #1
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002490:	f7fe fefe 	bl	8001290 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249c:	429a      	cmp	r2, r3
 800249e:	d807      	bhi.n	80024b0 <HAL_SPI_TransmitReceive+0x1d8>
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d003      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024ae:	e0a7      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1a6      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x130>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1a1      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x130>
 80024c4:	e07c      	b.n	80025c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x1fc>
 80024ce:	8b7b      	ldrh	r3, [r7, #26]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d16b      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fa:	e057      	b.n	80025ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d11c      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x26c>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x26c>
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d114      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d119      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x2ae>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d014      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002586:	f7fe fe83 	bl	8001290 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002592:	429a      	cmp	r2, r3
 8002594:	d803      	bhi.n	800259e <HAL_SPI_TransmitReceive+0x2c6>
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d102      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x2cc>
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025aa:	e029      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1a2      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x224>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d19d      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f8b1 	bl	800272c <SPI_EndRxTxTransaction>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025dc:	e010      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	e000      	b.n	8002600 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002614:	4618      	mov	r0, r3
 8002616:	3730      	adds	r7, #48	; 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800262c:	f7fe fe30 	bl	8001290 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800263c:	f7fe fe28 	bl	8001290 <HAL_GetTick>
 8002640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	0d1b      	lsrs	r3, r3, #20
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002652:	e054      	b.n	80026fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d050      	beq.n	80026fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800265c:	f7fe fe18 	bl	8001290 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	429a      	cmp	r2, r3
 800266a:	d902      	bls.n	8002672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d13d      	bne.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268a:	d111      	bne.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002694:	d004      	beq.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269e:	d107      	bne.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b8:	d10f      	bne.n	80026da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e017      	b.n	800271e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	429a      	cmp	r2, r3
 800271a:	d19b      	bne.n	8002654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ff6a 	bl	800261c <SPI_WaitFlagStateUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e000      	b.n	8002760 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e03f      	b.n	80027fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f95e 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f829 	bl	8002804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800283e:	f023 030c 	bic.w	r3, r3, #12
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	430b      	orrs	r3, r1
 800284a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <UART_SetConfig+0x114>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800286c:	f7ff fc7e 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	e002      	b.n	800287a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002874:	f7ff fc66 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8002878:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <UART_SetConfig+0x118>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	0119      	lsls	r1, r3, #4
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009a      	lsls	r2, r3, #2
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <UART_SetConfig+0x118>)
 80028b2:	fba3 0302 	umull	r0, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	4a15      	ldr	r2, [pc, #84]	; (800291c <UART_SetConfig+0x118>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	4419      	add	r1, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009a      	lsls	r2, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <UART_SetConfig+0x118>)
 80028ea:	fba3 0302 	umull	r0, r3, r3, r2
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	fb00 f303 	mul.w	r3, r0, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <UART_SetConfig+0x118>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	440a      	add	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40013800 	.word	0x40013800
 800291c:	51eb851f 	.word	0x51eb851f

08002920 <_ZN6MT68167SpiInitEv>:
#include "mt6816_stm32.h"
#include "spi.h"

void MT6816::SpiInit()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    MX_SPI1_Init();
 8002928:	f7fd ff54 	bl	80007d4 <MX_SPI1_Init>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN6MT681624SpiTransmitAndRead16BitsEt>:

uint16_t MT6816::SpiTransmitAndRead16Bits(uint16_t _dataTx)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
    uint16_t dataRx;

    GPIOA->BRR = GPIO_PIN_15; // Chip select
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x3c>)
 8002942:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002946:	615a      	str	r2, [r3, #20]
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &_dataTx, (uint8_t*) &dataRx, 1, HAL_MAX_DELAY);
 8002948:	f107 020e 	add.w	r2, r7, #14
 800294c:	1cb9      	adds	r1, r7, #2
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2301      	movs	r3, #1
 8002956:	4807      	ldr	r0, [pc, #28]	; (8002974 <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x40>)
 8002958:	f7ff fcbe 	bl	80022d8 <HAL_SPI_TransmitReceive>
    GPIOA->BSRR = GPIO_PIN_15;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x3c>)
 800295e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002962:	611a      	str	r2, [r3, #16]

    return dataRx;
 8002964:	89fb      	ldrh	r3, [r7, #14]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40010800 	.word	0x40010800
 8002974:	200002e8 	.word	0x200002e8

08002978 <_ZN8TB67H4508InitGpioEv>:
#include "tb67h450_stm32.h"
#include "gpio.h"
//#include "tim.h"

void TB67H450::InitGpio()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]

    /* Signal Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	6193      	str	r3, [r2, #24]
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6193      	str	r3, [r2, #24]
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <_ZN8TB67H4508InitGpioEv+0x80>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	213c      	movs	r1, #60	; 0x3c
 80029c2:	480e      	ldr	r0, [pc, #56]	; (80029fc <_ZN8TB67H4508InitGpioEv+0x84>)
 80029c4:	f7fe ffd2 	bl	800196c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, IN_PWM_B_Pin|IN_PWM_A_Pin, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <_ZN8TB67H4508InitGpioEv+0x88>)
 80029d0:	f7fe ffcc 	bl	800196c <HAL_GPIO_WritePin>

    /*Configure GPIO pins : IN_BM_Pin IN_BP_Pin IN_AM_Pin IN_AP_Pin */
    GPIO_InitStruct.Pin = IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin;
 80029d4:	233c      	movs	r3, #60	; 0x3c
 80029d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	4619      	mov	r1, r3
 80029ea:	4804      	ldr	r0, [pc, #16]	; (80029fc <_ZN8TB67H4508InitGpioEv+0x84>)
 80029ec:	f7fe fe3a 	bl	8001664 <HAL_GPIO_Init>

}
 80029f0:	bf00      	nop
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40010800 	.word	0x40010800
 8002a00:	40010c00 	.word	0x40010c00

08002a04 <_ZN8TB67H4507InitPwmEv>:


void TB67H450::InitPwm()
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
//    MX_TIM2_Init();
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <_ZN8TB67H45016DacOutputVoltageEtt>:


void TB67H450::DacOutputVoltage(uint16_t _voltageA_3300mVIn12bits, uint16_t _voltageB_3300mVIn12bits)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]
 8002a22:	4613      	mov	r3, r2
 8002a24:	803b      	strh	r3, [r7, #0]
//    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, _voltageA_3300mVIn12bits >> 2);
//    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, _voltageB_3300mVIn12bits >> 2);
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8TB67H4509SetInputAEbb>:


void TB67H450::SetInputA(bool _statusAp, bool _statusAm)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	70bb      	strb	r3, [r7, #2]
    _statusAp ? (GPIOA->BSRR = GPIO_PIN_5) : (GPIOA->BRR = GPIO_PIN_5);
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <_ZN8TB67H4509SetInputAEbb+0x1e>
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <_ZN8TB67H4509SetInputAEbb+0x44>)
 8002a48:	2220      	movs	r2, #32
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	e002      	b.n	8002a54 <_ZN8TB67H4509SetInputAEbb+0x24>
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <_ZN8TB67H4509SetInputAEbb+0x44>)
 8002a50:	2220      	movs	r2, #32
 8002a52:	615a      	str	r2, [r3, #20]
    _statusAm ? (GPIOA->BSRR = GPIO_PIN_4) : (GPIOA->BRR = GPIO_PIN_4);
 8002a54:	78bb      	ldrb	r3, [r7, #2]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <_ZN8TB67H4509SetInputAEbb+0x32>
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <_ZN8TB67H4509SetInputAEbb+0x44>)
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	e002      	b.n	8002a68 <_ZN8TB67H4509SetInputAEbb+0x38>
    _statusAm ? (GPIOA->BSRR = GPIO_PIN_4) : (GPIOA->BRR = GPIO_PIN_4);
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <_ZN8TB67H4509SetInputAEbb+0x44>)
 8002a64:	2210      	movs	r2, #16
 8002a66:	615a      	str	r2, [r3, #20]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010800 	.word	0x40010800

08002a78 <_ZN8TB67H4509SetInputBEbb>:


void TB67H450::SetInputB(bool _statusBp, bool _statusBm)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	4613      	mov	r3, r2
 8002a86:	70bb      	strb	r3, [r7, #2]
    _statusBp ? (GPIOA->BSRR = GPIO_PIN_3) : (GPIOA->BRR = GPIO_PIN_3);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <_ZN8TB67H4509SetInputBEbb+0x1e>
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <_ZN8TB67H4509SetInputBEbb+0x44>)
 8002a90:	2208      	movs	r2, #8
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	e002      	b.n	8002a9c <_ZN8TB67H4509SetInputBEbb+0x24>
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <_ZN8TB67H4509SetInputBEbb+0x44>)
 8002a98:	2208      	movs	r2, #8
 8002a9a:	615a      	str	r2, [r3, #20]
    _statusBm ? (GPIOA->BSRR = GPIO_PIN_2) : (GPIOA->BRR = GPIO_PIN_2);
 8002a9c:	78bb      	ldrb	r3, [r7, #2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <_ZN8TB67H4509SetInputBEbb+0x32>
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <_ZN8TB67H4509SetInputBEbb+0x44>)
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
}
 8002aa8:	e002      	b.n	8002ab0 <_ZN8TB67H4509SetInputBEbb+0x38>
    _statusBm ? (GPIOA->BSRR = GPIO_PIN_2) : (GPIOA->BRR = GPIO_PIN_2);
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <_ZN8TB67H4509SetInputBEbb+0x44>)
 8002aac:	2204      	movs	r2, #4
 8002aae:	615a      	str	r2, [r3, #20]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010800 	.word	0x40010800

08002ac0 <_ZN13MotionPlanner14CurrentTrackerC1EPS_>:
    };

    class CurrentTracker
    {
    public:
        explicit CurrentTracker(MotionPlanner* _context) :
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
            context(_context)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
        {
        }
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_ZN13MotionPlanner15VelocityTrackerC1EPS_>:
    CurrentTracker currentTracker = CurrentTracker(this);

    class VelocityTracker
    {
    public:
        explicit VelocityTracker(MotionPlanner* _context) :
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
            context(_context)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
        {
        }
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <_ZN13MotionPlanner15PositionTrackerC1EPS_>:
    VelocityTracker velocityTracker = VelocityTracker(this);

    class PositionTracker
    {
    public:
        explicit PositionTracker(MotionPlanner* _context) :
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
            context(_context)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
        {
        }
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <_ZN13MotionPlanner20PositionInterpolatorC1EPS_>:
    PositionTracker positionTracker = PositionTracker(this);

    class PositionInterpolator
    {
    public:
        explicit PositionInterpolator(MotionPlanner* _context) :
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
            context(_context)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61da      	str	r2, [r3, #28]
        {
        }
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <_ZN13MotionPlanner17TrajectoryTrackerC1EPS_>:
    PositionInterpolator positionInterpolator = PositionInterpolator(this);

    class TrajectoryTracker
    {
    public:
        explicit TrajectoryTracker(MotionPlanner* _context) :
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
            context(_context)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	22c8      	movs	r2, #200	; 0xc8
 8002bfa:	619a      	str	r2, [r3, #24]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	771a      	strb	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
        {
        }
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <_ZN5Motor8Config_tC1Ev>:

        static int32_t CompensateAdvancedAngle(int32_t _vel);
    };


    struct Config_t
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	6053      	str	r3, [r2, #4]
 8002c44:	6093      	str	r3, [r2, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
 8002c48:	6113      	str	r3, [r2, #16]
 8002c4a:	6153      	str	r3, [r2, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3318      	adds	r3, #24
 8002c50:	2264      	movs	r2, #100	; 0x64
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fa37 	bl	80030c8 <memset>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZN13MotionPlannerC1Ev>:
    MotionPlanner() = default;
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <_ZN13MotionPlannerC1Ev+0x6c>)
 8002c7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3308      	adds	r3, #8
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff19 	bl	8002ac0 <_ZN13MotionPlanner14CurrentTrackerC1EPS_>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	331c      	adds	r3, #28
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff2d 	bl	8002af4 <_ZN13MotionPlanner15VelocityTrackerC1EPS_>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3330      	adds	r3, #48	; 0x30
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff41 	bl	8002b28 <_ZN13MotionPlanner15PositionTrackerC1EPS_>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	335c      	adds	r3, #92	; 0x5c
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff68 	bl	8002b82 <_ZN13MotionPlanner20PositionInterpolatorC1EPS_>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	337c      	adds	r3, #124	; 0x7c
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff85 	bl	8002bc8 <_ZN13MotionPlanner17TrajectoryTrackerC1EPS_>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	000f4240 	.word	0x000f4240

08002cd4 <_ZN5MotorC1Ev>:
    Motor() :
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
        controller(&controllerInstance)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	22c8      	movs	r2, #200	; 0xc8
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6852      	ldr	r2, [r2, #4]
 8002cf2:	fb02 f203 	mul.w	r2, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff97 	bl	8002c32 <_ZN5Motor8Config_tC1Ev>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3388      	adds	r3, #136	; 0x88
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ffab 	bl	8002c64 <_ZN13MotionPlannerC1Ev>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f85c 	bl	8002df0 <_ZN5Motor10ControllerC1EPS_>
        config.motionParams.encoderHomeOffset = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
        config.motionParams.caliCurrent = 2000;             // (mA)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d44:	611a      	str	r2, [r3, #16]
        config.motionParams.ratedCurrent = 1000;            // (mA)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d4c:	615a      	str	r2, [r3, #20]
        config.motionParams.ratedCurrentAcc = 2 * 1000;     // (mA/s)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d54:	621a      	str	r2, [r3, #32]
        config.motionParams.ratedVelocity = 30 * MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
        config.motionParams.ratedVelocityAcc = 1000 * MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d70:	fb02 f203 	mul.w	r2, r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	61da      	str	r2, [r3, #28]
        config.ctrlParams.stallProtectSwitch = false;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        config.ctrlParams.pid =
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3324      	adds	r3, #36	; 0x24
 8002d84:	2230      	movs	r2, #48	; 0x30
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f99d 	bl	80030c8 <memset>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2205      	movs	r2, #5
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	221e      	movs	r2, #30
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
        config.ctrlParams.dce =
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3354      	adds	r3, #84	; 0x54
 8002d9e:	2230      	movs	r2, #48	; 0x30
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f990 	bl	80030c8 <memset>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	22c8      	movs	r2, #200	; 0xc8
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2250      	movs	r2, #80	; 0x50
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	22fa      	movs	r2, #250	; 0xfa
 8002dc0:	661a      	str	r2, [r3, #96]	; 0x60
        motionPlanner.AttachConfig(&config.motionParams);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7fe f901 	bl	8000fd6 <_ZN13MotionPlanner12AttachConfigEPNS_8Config_tE>
        controller->AttachConfig(&config.ctrlParams);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3324      	adds	r3, #36	; 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fe f91f 	bl	8001024 <_ZN5Motor10Controller12AttachConfigEPNS0_8Config_tE>
    }
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZN5Motor10ControllerC1EPS_>:
        explicit Controller(Motor* _context)
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
        {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	719a      	strb	r2, [r3, #6]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	71da      	strb	r2, [r3, #7]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	615a      	str	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	649a      	str	r2, [r3, #72]	; 0x48
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            context = _context;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	609a      	str	r2, [r3, #8]
            requestMode = MODE_STOP;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	711a      	strb	r2, [r3, #4]
            modeRunning = MODE_STOP;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	715a      	strb	r2, [r3, #5]
        }
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <_ZN11EncoderBaseC1Ev>:
#define CTRL_STEP_FW_ENCODER_H

#include <cstdint>


class EncoderBase
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <_ZN11EncoderBaseC1Ev+0x2c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	809a      	strh	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	08003a60 	.word	0x08003a60

08002efc <_ZN10MT6816BaseC1EPt>:
#include <cstdint>

class MT6816Base : public EncoderBase
{
public:
    explicit MT6816Base(uint16_t* _quickCaliDataPtr) :
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
        quickCaliDataPtr(_quickCaliDataPtr),
        spiRawData(SpiRawData_t{0})
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ffdf 	bl	8002ecc <_ZN11EncoderBaseC1Ev>
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <_ZN10MT6816BaseC1EPt+0x34>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3310      	adds	r3, #16
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	809a      	strh	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	619a      	str	r2, [r3, #24]
    {
    }
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080039dc 	.word	0x080039dc

08002f34 <_ZN6MT6816C1Ev>:
    /*
     * _quickCaliDataPtr is the start address where calibration data stored,
     * in STM32F103CBT6 flash size is 128K (0x08000000 ~ 0x08020000), we use
     * last 33K (32K clib + 1K user) for storage, and it starts from 0x08017C00.
     */
    explicit MT6816() : MT6816Base((uint16_t*) (0x08017C00))
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4906      	ldr	r1, [pc, #24]	; (8002f58 <_ZN6MT6816C1Ev+0x24>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ffdb 	bl	8002efc <_ZN10MT6816BaseC1EPt>
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_ZN6MT6816C1Ev+0x28>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
    {}
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	08017c00 	.word	0x08017c00
 8002f5c:	080039f8 	.word	0x080039f8

08002f60 <_ZN10DriverBaseC1Ev>:
#define CTRL_STEP_FW_DRIVER_BASE_H

#include <cstdint>


class DriverBase
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <_ZN10DriverBaseC1Ev+0x30>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	809a      	strh	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	330a      	adds	r3, #10
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	809a      	strh	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	08003a44 	.word	0x08003a44

08002f94 <_ZN12TB67H450BaseC1Ev>:
#include "driver_base.h"

class TB67H450Base : public DriverBase
{
public:
    explicit TB67H450Base()
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ffde 	bl	8002f60 <_ZN10DriverBaseC1Ev>
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <_ZN12TB67H450BaseC1Ev+0x20>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	080039ac 	.word	0x080039ac

08002fb8 <_ZN8TB67H450C1Ev>:
#include "Driver/tb67h450_base.h"

class TB67H450 : public TB67H450Base
{
public:
    explicit TB67H450() : TB67H450Base()
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	6053      	str	r3, [r2, #4]
 8002fca:	6093      	str	r3, [r2, #8]
 8002fcc:	60d3      	str	r3, [r2, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ffdf 	bl	8002f94 <_ZN12TB67H450BaseC1Ev>
 8002fd6:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <_ZN8TB67H450C1Ev+0x30>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	601a      	str	r2, [r3, #0]
    {}
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08003a14 	.word	0x08003a14

08002fec <_Z41__static_initialization_and_destruction_0ii>:
//        {
//            eeprom.put(0, boardConfig);
//            HAL_NVIC_SystemReset();
//        }
//    }
}
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10d      	bne.n	8003018 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <_Z41__static_initialization_and_destruction_0ii+0x2c>
Motor motor;
 8003006:	4806      	ldr	r0, [pc, #24]	; (8003020 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003008:	f7ff fe64 	bl	8002cd4 <_ZN5MotorC1Ev>
TB67H450 tb67H450;
 800300c:	4805      	ldr	r0, [pc, #20]	; (8003024 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800300e:	f7ff ffd3 	bl	8002fb8 <_ZN8TB67H450C1Ev>
MT6816 mt6816;
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003014:	f7ff ff8e 	bl	8002f34 <_ZN6MT6816C1Ev>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000090 	.word	0x20000090
 8003024:	20000240 	.word	0x20000240
 8003028:	20000250 	.word	0x20000250

0800302c <_GLOBAL__sub_I_boardConfig>:
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
 8003030:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003034:	2001      	movs	r0, #1
 8003036:	f7ff ffd9 	bl	8002fec <_Z41__static_initialization_and_destruction_0ii>
 800303a:	bd80      	pop	{r7, pc}

0800303c <__cxa_pure_virtual>:
 800303c:	b508      	push	{r3, lr}
 800303e:	f000 f80d 	bl	800305c <_ZSt9terminatev>

08003042 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003042:	b508      	push	{r3, lr}
 8003044:	4780      	blx	r0
 8003046:	f000 f80e 	bl	8003066 <abort>
	...

0800304c <_ZSt13get_terminatev>:
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <_ZSt13get_terminatev+0xc>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	f3bf 8f5b 	dmb	ish
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <_ZSt9terminatev>:
 800305c:	b508      	push	{r3, lr}
 800305e:	f7ff fff5 	bl	800304c <_ZSt13get_terminatev>
 8003062:	f7ff ffee 	bl	8003042 <_ZN10__cxxabiv111__terminateEPFvvE>

08003066 <abort>:
 8003066:	2006      	movs	r0, #6
 8003068:	b508      	push	{r3, lr}
 800306a:	f000 f85d 	bl	8003128 <raise>
 800306e:	2001      	movs	r0, #1
 8003070:	f7fd fd86 	bl	8000b80 <_exit>

08003074 <__errno>:
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <__errno+0x8>)
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000010 	.word	0x20000010

08003080 <__libc_init_array>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	2600      	movs	r6, #0
 8003084:	4d0c      	ldr	r5, [pc, #48]	; (80030b8 <__libc_init_array+0x38>)
 8003086:	4c0d      	ldr	r4, [pc, #52]	; (80030bc <__libc_init_array+0x3c>)
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	42a6      	cmp	r6, r4
 800308e:	d109      	bne.n	80030a4 <__libc_init_array+0x24>
 8003090:	f000 f866 	bl	8003160 <_init>
 8003094:	2600      	movs	r6, #0
 8003096:	4d0a      	ldr	r5, [pc, #40]	; (80030c0 <__libc_init_array+0x40>)
 8003098:	4c0a      	ldr	r4, [pc, #40]	; (80030c4 <__libc_init_array+0x44>)
 800309a:	1b64      	subs	r4, r4, r5
 800309c:	10a4      	asrs	r4, r4, #2
 800309e:	42a6      	cmp	r6, r4
 80030a0:	d105      	bne.n	80030ae <__libc_init_array+0x2e>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a8:	4798      	blx	r3
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7ee      	b.n	800308c <__libc_init_array+0xc>
 80030ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b2:	4798      	blx	r3
 80030b4:	3601      	adds	r6, #1
 80030b6:	e7f2      	b.n	800309e <__libc_init_array+0x1e>
 80030b8:	08003acc 	.word	0x08003acc
 80030bc:	08003acc 	.word	0x08003acc
 80030c0:	08003acc 	.word	0x08003acc
 80030c4:	08003ad4 	.word	0x08003ad4

080030c8 <memset>:
 80030c8:	4603      	mov	r3, r0
 80030ca:	4402      	add	r2, r0
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d100      	bne.n	80030d2 <memset+0xa>
 80030d0:	4770      	bx	lr
 80030d2:	f803 1b01 	strb.w	r1, [r3], #1
 80030d6:	e7f9      	b.n	80030cc <memset+0x4>

080030d8 <_raise_r>:
 80030d8:	291f      	cmp	r1, #31
 80030da:	b538      	push	{r3, r4, r5, lr}
 80030dc:	4604      	mov	r4, r0
 80030de:	460d      	mov	r5, r1
 80030e0:	d904      	bls.n	80030ec <_raise_r+0x14>
 80030e2:	2316      	movs	r3, #22
 80030e4:	6003      	str	r3, [r0, #0]
 80030e6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030ee:	b112      	cbz	r2, 80030f6 <_raise_r+0x1e>
 80030f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80030f4:	b94b      	cbnz	r3, 800310a <_raise_r+0x32>
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 f830 	bl	800315c <_getpid_r>
 80030fc:	462a      	mov	r2, r5
 80030fe:	4601      	mov	r1, r0
 8003100:	4620      	mov	r0, r4
 8003102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003106:	f000 b817 	b.w	8003138 <_kill_r>
 800310a:	2b01      	cmp	r3, #1
 800310c:	d00a      	beq.n	8003124 <_raise_r+0x4c>
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	d103      	bne.n	800311a <_raise_r+0x42>
 8003112:	2316      	movs	r3, #22
 8003114:	6003      	str	r3, [r0, #0]
 8003116:	2001      	movs	r0, #1
 8003118:	e7e7      	b.n	80030ea <_raise_r+0x12>
 800311a:	2400      	movs	r4, #0
 800311c:	4628      	mov	r0, r5
 800311e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003122:	4798      	blx	r3
 8003124:	2000      	movs	r0, #0
 8003126:	e7e0      	b.n	80030ea <_raise_r+0x12>

08003128 <raise>:
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <raise+0xc>)
 800312a:	4601      	mov	r1, r0
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	f7ff bfd3 	b.w	80030d8 <_raise_r>
 8003132:	bf00      	nop
 8003134:	20000010 	.word	0x20000010

08003138 <_kill_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	2300      	movs	r3, #0
 800313c:	4d06      	ldr	r5, [pc, #24]	; (8003158 <_kill_r+0x20>)
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	f7fd fd0b 	bl	8000b60 <_kill>
 800314a:	1c43      	adds	r3, r0, #1
 800314c:	d102      	bne.n	8003154 <_kill_r+0x1c>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	b103      	cbz	r3, 8003154 <_kill_r+0x1c>
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	20000414 	.word	0x20000414

0800315c <_getpid_r>:
 800315c:	f7fd bcf9 	b.w	8000b52 <_getpid>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
