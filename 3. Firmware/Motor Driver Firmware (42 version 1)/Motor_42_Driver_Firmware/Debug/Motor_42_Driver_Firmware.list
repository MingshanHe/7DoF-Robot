
Motor_42_Driver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f7c  08009f7c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009f7c  08009f7c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f7c  08009f7c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200001f8  0800a17c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  0800a17c  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ffa  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059f3  00000000  00000000  00045217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0004ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0004c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f31b  00000000  00000000  0004d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e67b  00000000  00000000  0006c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d98d  00000000  00000000  0008af3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001288cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce0  00000000  00000000  00128920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080091dc 	.word	0x080091dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	080091dc 	.word	0x080091dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_d2lz>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	4605      	mov	r5, r0
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4628      	mov	r0, r5
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f7ff fceb 	bl	80009bc <__aeabi_dcmplt>
 8000fe6:	b928      	cbnz	r0, 8000ff4 <__aeabi_d2lz+0x20>
 8000fe8:	4628      	mov	r0, r5
 8000fea:	4621      	mov	r1, r4
 8000fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ff0:	f000 b80a 	b.w	8001008 <__aeabi_d2ulz>
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ffa:	f000 f805 	bl	8001008 <__aeabi_d2ulz>
 8000ffe:	4240      	negs	r0, r0
 8001000:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001004:	bd38      	pop	{r3, r4, r5, pc}
 8001006:	bf00      	nop

08001008 <__aeabi_d2ulz>:
 8001008:	b5d0      	push	{r4, r6, r7, lr}
 800100a:	2200      	movs	r2, #0
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <__aeabi_d2ulz+0x34>)
 800100e:	4606      	mov	r6, r0
 8001010:	460f      	mov	r7, r1
 8001012:	f7ff fa61 	bl	80004d8 <__aeabi_dmul>
 8001016:	f7ff fd0f 	bl	8000a38 <__aeabi_d2uiz>
 800101a:	4604      	mov	r4, r0
 800101c:	f7ff f9e2 	bl	80003e4 <__aeabi_ui2d>
 8001020:	2200      	movs	r2, #0
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <__aeabi_d2ulz+0x38>)
 8001024:	f7ff fa58 	bl	80004d8 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4630      	mov	r0, r6
 800102e:	4639      	mov	r1, r7
 8001030:	f7ff f89a 	bl	8000168 <__aeabi_dsub>
 8001034:	f7ff fd00 	bl	8000a38 <__aeabi_d2uiz>
 8001038:	4621      	mov	r1, r4
 800103a:	bdd0      	pop	{r4, r6, r7, pc}
 800103c:	3df00000 	.word	0x3df00000
 8001040:	41f00000 	.word	0x41f00000

08001044 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_CAN_Init+0x60>)
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <MX_CAN_Init+0x64>)
 800104c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_CAN_Init+0x60>)
 8001050:	2210      	movs	r2, #16
 8001052:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_CAN_Init+0x60>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_CAN_Init+0x60>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_CAN_Init+0x60>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_CAN_Init+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_CAN_Init+0x60>)
 800106e:	2200      	movs	r2, #0
 8001070:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_CAN_Init+0x60>)
 8001074:	2200      	movs	r2, #0
 8001076:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_CAN_Init+0x60>)
 800107a:	2200      	movs	r2, #0
 800107c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_CAN_Init+0x60>)
 8001080:	2200      	movs	r2, #0
 8001082:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_CAN_Init+0x60>)
 8001086:	2200      	movs	r2, #0
 8001088:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_CAN_Init+0x60>)
 800108c:	2200      	movs	r2, #0
 800108e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_CAN_Init+0x60>)
 8001092:	f001 fdb5 	bl	8002c00 <HAL_CAN_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800109c:	f000 f8b8 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200007d4 	.word	0x200007d4
 80010a8:	40006400 	.word	0x40006400

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_GPIO_Init+0xb8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	213c      	movs	r1, #60	; 0x3c
 80010f4:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_GPIO_Init+0xbc>)
 80010f6:	f002 fb18 	bl	800372a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN_PWM_B_Pin|IN_PWM_A_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001100:	481a      	ldr	r0, [pc, #104]	; (800116c <MX_GPIO_Init+0xc0>)
 8001102:	f002 fb12 	bl	800372a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : IN_BM_Pin IN_BP_Pin IN_AM_Pin IN_AP_Pin */
	GPIO_InitStruct.Pin = IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin;
 8001106:	233c      	movs	r3, #60	; 0x3c
 8001108:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4619      	mov	r1, r3
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <MX_GPIO_Init+0xbc>)
 800111e:	f002 f969 	bl	80033f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin */
	GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_1_Pin;
 8001122:	f241 0304 	movw	r3, #4100	; 0x1004
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_GPIO_Init+0xc0>)
 8001138:	f002 f95c 	bl	80033f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_PWM_B_Pin IN_PWM_A_Pin */
	GPIO_InitStruct.Pin = IN_PWM_B_Pin|IN_PWM_A_Pin;
 800113c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001140:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_GPIO_Init+0xc0>)
 8001156:	f002 f94d 	bl	80033f4 <HAL_GPIO_Init>


}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f001 fcbe 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f80f 	bl	800119a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f7ff ff96 	bl	80010ac <MX_GPIO_Init>
  MX_CAN_Init();
 8001180:	f7ff ff60 	bl	8001044 <MX_CAN_Init>
  MX_SPI1_Init();
 8001184:	f000 f84a 	bl	800121c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001188:	f000 fc4a 	bl	8001a20 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800118c:	f000 fb76 	bl	800187c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001190:	f000 fbcc 	bl	800192c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Main();
 8001194:	f004 fbea 	bl	800596c <Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x28>

0800119a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b090      	sub	sp, #64	; 0x40
 800119e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2228      	movs	r2, #40	; 0x28
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fd59 	bl	8005c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fac3 	bl	800375c <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011dc:	f000 f818 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fd2f 	bl	8003c5c <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001204:	f000 f804 	bl	8001210 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3740      	adds	r7, #64	; 0x40
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI1_Init+0x64>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <MX_SPI1_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_SPI1_Init+0x64>)
 8001228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_SPI1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI1_Init+0x64>)
 8001268:	220a      	movs	r2, #10
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI1_Init+0x64>)
 800126e:	f002 fe8f 	bl	8003f90 <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001278:	f7ff ffca 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000844 	.word	0x20000844
 8001284:	40013000 	.word	0x40013000

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <HAL_CAN_MspInit+0xb0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d143      	bne.n	8001394 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 8001312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001316:	61d3      	str	r3, [r2, #28]
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_CAN_MspInit+0xb4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <HAL_CAN_MspInit+0xb8>)
 8001352:	f002 f84f 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <HAL_CAN_MspInit+0xb8>)
 800136c:	f002 f842 	bl	80033f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_CAN_MspInit+0xbc>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_CAN_MspInit+0xbc>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40006400 	.word	0x40006400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_SPI_MspInit+0xd8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d156      	bne.n	800147a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_SPI_MspInit+0xdc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4818      	ldr	r0, [pc, #96]	; (800148c <HAL_SPI_MspInit+0xe0>)
 800142a:	f001 ffe3 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800142e:	2328      	movs	r3, #40	; 0x28
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <HAL_SPI_MspInit+0xe4>)
 8001442:	f001 ffd7 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001446:	2310      	movs	r3, #16
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <HAL_SPI_MspInit+0xe4>)
 800145a:	f001 ffcb 	bl	80033f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_SPI_MspInit+0xe8>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_SPI_MspInit+0xe8>)
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40013000 	.word	0x40013000
 8001488:	40021000 	.word	0x40021000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40010000 	.word	0x40010000

08001498 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_TIM_Encoder_MspInit+0x74>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d124      	bne.n	8001502 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_TIM_Encoder_MspInit+0x78>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014fe:	f001 ff79 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012c00 	.word	0x40012c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40010800 	.word	0x40010800

08001518 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_TIM_PWM_MspInit+0x34>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10b      	bne.n	8001542 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_TIM_PWM_MspInit+0x38>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	40000400 	.word	0x40000400
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_TIM_MspPostInit+0x88>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d12f      	bne.n	80015d4 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_TIM_MspPostInit+0x8c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a4:	23c0      	movs	r3, #192	; 0xc0
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <HAL_TIM_MspPostInit+0x90>)
 80015b8:	f001 ff1c 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015bc:	2303      	movs	r3, #3
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <HAL_TIM_MspPostInit+0x94>)
 80015d0:	f001 ff10 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_UART_MspInit+0xa4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d13d      	bne.n	8001688 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_UART_MspInit+0xa8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_UART_MspInit+0xa8>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_UART_MspInit+0xa8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0xa8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_UART_MspInit+0xa8>)
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_UART_MspInit+0xa8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <HAL_UART_MspInit+0xac>)
 8001650:	f001 fed0 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <HAL_UART_MspInit+0xac>)
 8001668:	f001 fec4 	bl	80033f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_UART_MspInit+0xb0>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_UART_MspInit+0xb0>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013800 	.word	0x40013800
 8001694:	40021000 	.word	0x40021000
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40010000 	.word	0x40010000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f001 fa4b 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
	return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <_kill>:

int _kill(int pid, int sig)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001706:	f004 fa81 	bl	8005c0c <__errno>
 800170a:	4603      	mov	r3, r0
 800170c:	2216      	movs	r2, #22
 800170e:	601a      	str	r2, [r3, #0]
	return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_exit>:

void _exit (int status)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffe7 	bl	80016fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800172e:	e7fe      	b.n	800172e <_exit+0x12>

08001730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
	}

return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
	}
	return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f004 f9ea 	bl	8005c0c <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000214 	.word	0x20000214
 800186c:	20000a30 	.word	0x20000a30

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f9e8 	bl	8005c60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_TIM1_Init+0xa8>)
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_TIM1_Init+0xac>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018cc:	2301      	movs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_TIM1_Init+0xa8>)
 80018f0:	f002 febb 	bl	800466a <HAL_TIM_Encoder_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018fa:	f7ff fc89 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <MX_TIM1_Init+0xa8>)
 800190c:	f003 f9f8 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001916:	f7ff fc7b 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	3730      	adds	r7, #48	; 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200008e4 	.word	0x200008e4
 8001928:	40012c00 	.word	0x40012c00

0800192c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001950:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <MX_TIM3_Init+0xf0>)
 8001952:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <MX_TIM3_Init+0xec>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <MX_TIM3_Init+0xec>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001974:	4828      	ldr	r0, [pc, #160]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001976:	f002 fe29 	bl	80045cc <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001980:	f7ff fc46 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4619      	mov	r1, r3
 8001992:	4821      	ldr	r0, [pc, #132]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001994:	f003 f9b4 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800199e:	f7ff fc37 	bl	8001210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	; 0x60
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4817      	ldr	r0, [pc, #92]	; (8001a18 <MX_TIM3_Init+0xec>)
 80019ba:	f002 fef9 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019c4:	f7ff fc24 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4812      	ldr	r0, [pc, #72]	; (8001a18 <MX_TIM3_Init+0xec>)
 80019d0:	f002 feee 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019da:	f7ff fc19 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2208      	movs	r2, #8
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <MX_TIM3_Init+0xec>)
 80019e6:	f002 fee3 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80019f0:	f7ff fc0e 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	220c      	movs	r2, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM3_Init+0xec>)
 80019fc:	f002 fed8 	bl	80047b0 <HAL_TIM_PWM_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001a06:	f7ff fc03 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM3_Init+0xec>)
 8001a0c:	f7ff fda2 	bl	8001554 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000089c 	.word	0x2000089c
 8001a1c:	40000400 	.word	0x40000400

08001a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_USART1_UART_Init+0x50>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USART1_UART_Init+0x4c>)
 8001a58:	f003 f9b0 	bl	8004dbc <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a62:	f7ff fbd5 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200009b8 	.word	0x200009b8
 8001a70:	40013800 	.word	0x40013800

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9a:	f7ff fee9 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f004 f8bb 	bl	8005c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fb65 	bl	8001170 <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ab0:	08009f88 	.word	0x08009f88
  ldr r2, =_sbss
 8001ab4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001ab8:	20000a30 	.word	0x20000a30

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>

08001abe <_ZN12TB67H450Base4InitEv>:
#include "tb67h450_base.h"
#include "sin_map.h"

void TB67H450Base::Init()
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
    InitGpio();
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3314      	adds	r3, #20
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
    InitPwm();
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <_ZN12TB67H450Base19SetFocCurrentVectorEml>:

void TB67H450Base::SetFocCurrentVector(uint32_t _directionInCount, int32_t _current_mA)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
    phaseB.sinMapPtr = (_directionInCount) & (0x000003FF);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	809a      	strh	r2, [r3, #4]
    phaseA.sinMapPtr = (phaseB.sinMapPtr + (256)) & (0x000003FF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	815a      	strh	r2, [r3, #10]

    phaseA.sinMapData = sin_pi_m2[phaseA.sinMapPtr];
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	895b      	ldrh	r3, [r3, #10]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x158>)
 8001b1e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	819a      	strh	r2, [r3, #12]
    phaseB.sinMapData = sin_pi_m2[phaseB.sinMapPtr];
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	889b      	ldrh	r3, [r3, #4]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x158>)
 8001b2e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	80da      	strh	r2, [r3, #6]

    uint32_t dac_reg = abs(_current_mA);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bfb8      	it	lt
 8001b3c:	425b      	neglt	r3, r3
 8001b3e:	617b      	str	r3, [r7, #20]
    dac_reg = (uint32_t) (dac_reg * 5083) >> 12;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f241 32db 	movw	r2, #5083	; 0x13db
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	0b1b      	lsrs	r3, r3, #12
 8001b4c:	617b      	str	r3, [r7, #20]
    dac_reg = dac_reg & (0x00000FFF);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	617b      	str	r3, [r7, #20]
    phaseA.dacValue12Bits =
        (uint32_t) (dac_reg * abs(phaseA.sinMapData)) >> sin_pi_m2_dpiybit;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bfb8      	it	lt
 8001b60:	425b      	neglt	r3, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fb03 f302 	mul.w	r3, r3, r2
 8001b6c:	0b1b      	lsrs	r3, r3, #12
    phaseA.dacValue12Bits =
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits =
        (uint32_t) (dac_reg * abs(phaseB.sinMapData)) >> sin_pi_m2_dpiybit;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfb8      	it	lt
 8001b7e:	425b      	neglt	r3, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fb03 f302 	mul.w	r3, r3, r2
 8001b8a:	0b1b      	lsrs	r3, r3, #12
    phaseB.dacValue12Bits =
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3310      	adds	r3, #16
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	89d1      	ldrh	r1, [r2, #14]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	8912      	ldrh	r2, [r2, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	4798      	blx	r3

    if (phaseA.sinMapData > 0)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd08      	ble.n	8001bc2 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0xda>
        SetInputA(true, false);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3320      	adds	r3, #32
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2101      	movs	r1, #1
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	4798      	blx	r3
 8001bc0:	e015      	b.n	8001bee <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x106>
    else if (phaseA.sinMapData < 0)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da08      	bge.n	8001bde <_ZN12TB67H450Base19SetFocCurrentVectorEml+0xf6>
        SetInputA(false, true);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3320      	adds	r3, #32
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	4798      	blx	r3
 8001bdc:	e007      	b.n	8001bee <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x106>
    else
        SetInputA(true, true);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3320      	adds	r3, #32
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	2101      	movs	r1, #1
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	4798      	blx	r3

    if (phaseB.sinMapData > 0)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	dd08      	ble.n	8001c0a <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x122>
        SetInputB(true, false);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3324      	adds	r3, #36	; 0x24
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	4798      	blx	r3
    else if (phaseB.sinMapData < 0)
        SetInputB(false, true);
    else
        SetInputB(true, true);
}
 8001c08:	e015      	b.n	8001c36 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x14e>
    else if (phaseB.sinMapData < 0)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da08      	bge.n	8001c26 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x13e>
        SetInputB(false, true);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3324      	adds	r3, #36	; 0x24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2100      	movs	r1, #0
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	4798      	blx	r3
}
 8001c24:	e007      	b.n	8001c36 <_ZN12TB67H450Base19SetFocCurrentVectorEml+0x14e>
        SetInputB(true, true);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3324      	adds	r3, #36	; 0x24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2101      	movs	r1, #1
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	08009220 	.word	0x08009220

08001c44 <_ZN12TB67H450Base18SetTwoCoilsCurrentEtt>:


void TB67H450Base::SetTwoCoilsCurrent(uint16_t _currentA_3300mAIn12Bits, uint16_t _currentB_3300mAIn12Bits)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	803b      	strh	r3, [r7, #0]
     * After SetFocCurrentVector calculation a 12bits value was mapped to 0~3300mA.
     * And due to used 0.1Ohm shank resistor, 0~3300mV V-ref means 0~3300mA CurrentSetPoint,
     * For more details, see TB67H450 Datasheet page.10 .
     */

    DacOutputVoltage(_currentA_3300mAIn12Bits, _currentB_3300mAIn12Bits);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	331c      	adds	r3, #28
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	883a      	ldrh	r2, [r7, #0]
 8001c5e:	8879      	ldrh	r1, [r7, #2]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZN12TB67H450Base5SleepEv>:


void TB67H450Base::Sleep()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    phaseA.dacValue12Bits = 0;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits = 0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3310      	adds	r3, #16
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	89d1      	ldrh	r1, [r2, #14]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	8912      	ldrh	r2, [r2, #8]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3

    SetInputA(false, false);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3320      	adds	r3, #32
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
    SetInputB(false, false);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3324      	adds	r3, #36	; 0x24
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZN12TB67H450Base5BrakeEv>:


void TB67H450Base::Brake()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    phaseA.dacValue12Bits = 0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	81da      	strh	r2, [r3, #14]
    phaseB.dacValue12Bits = 0;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	811a      	strh	r2, [r3, #8]

    SetTwoCoilsCurrent(phaseA.dacValue12Bits, phaseB.dacValue12Bits);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	89d1      	ldrh	r1, [r2, #14]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	8912      	ldrh	r2, [r2, #8]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3

    SetInputA(true, true);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3320      	adds	r3, #32
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	2101      	movs	r1, #1
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
    SetInputB(true, true);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3324      	adds	r3, #36	; 0x24
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2101      	movs	r1, #1
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZN13MotionPlanner14CurrentTracker4InitEv>:
#include "motion_planner.h"
#include "math.h"


void MotionPlanner::CurrentTracker::Init()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    SetCurrentAcc(context->config->ratedCurrentAcc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f804 	bl	8001d2e <_ZN13MotionPlanner14CurrentTracker13SetCurrentAccEl>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN13MotionPlanner14CurrentTracker13SetCurrentAccEl>:
    currentIntegral = currentIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::CurrentTracker::SetCurrentAcc(int32_t _currentAcc)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    currentAcc = _currentAcc;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	609a      	str	r2, [r3, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <_ZN13MotionPlanner15VelocityTracker4InitEv>:


void MotionPlanner::VelocityTracker::Init()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    SetVelocityAcc(context->config->ratedVelocityAcc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f804 	bl	8001d6a <_ZN13MotionPlanner15VelocityTracker14SetVelocityAccEl>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN13MotionPlanner15VelocityTracker14SetVelocityAccEl>:


void MotionPlanner::VelocityTracker::SetVelocityAcc(int32_t _velocityAcc)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
    velocityAcc = _velocityAcc;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	609a      	str	r2, [r3, #8]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_ZN13MotionPlanner15PositionTracker4InitEv>:
    velocityIntegral = velocityIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::PositionTracker::Init()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    SetVelocityAcc(context->config->ratedVelocityAcc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4619      	mov	r1, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f813 	bl	8001dc4 <_ZN13MotionPlanner15PositionTracker14SetVelocityAccEl>

    /*
     *  Allow to locking-brake when velocity is lower than (speedLockingBrake).
     *  The best value should be (ratedMoveAcc/1000)
     */
    speedLockingBrake = context->config->ratedVelocityAcc / 1000;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_ZN13MotionPlanner15PositionTracker4InitEv+0x3c>)
 8001daa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dae:	1192      	asrs	r2, r2, #6
 8001db0:	17db      	asrs	r3, r3, #31
 8001db2:	1ad2      	subs	r2, r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <_ZN13MotionPlanner15PositionTracker14SetVelocityAccEl>:


void MotionPlanner::PositionTracker::SetVelocityAcc(int32_t value)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    velocityUpAcc = value;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	60da      	str	r2, [r3, #12]
    velocityDownAcc = value;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	611a      	str	r2, [r3, #16]
    quickVelocityDownAcc = 0.5f / (float) velocityDownAcc;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ff54 	bl	8000c8c <__aeabi_i2f>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001dec:	f7ff f856 	bl	8000e9c <__aeabi_fdiv>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	615a      	str	r2, [r3, #20]
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZN13MotionPlanner20PositionInterpolator4InitEv>:
    velocityIntegral = velocityIntegral % context->CONTROL_FREQUENCY;
}


void MotionPlanner::PositionInterpolator::Init()
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <_ZN13MotionPlanner17TrajectoryTracker22SetSlowDownVelocityAccEl>:
    goVelocity = estVelocity;
}


void MotionPlanner::TrajectoryTracker::SetSlowDownVelocityAcc(int32_t value)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
    velocityDownAcc = value;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	60da      	str	r2, [r3, #12]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <_ZN13MotionPlanner17TrajectoryTracker4InitEl>:
    velovityNowRemainder = velovityNowRemainder % context->CONTROL_FREQUENCY;
}


void MotionPlanner::TrajectoryTracker::Init(int32_t _updateTimeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    //SetSlowDownVelocityAcc(context->config->ratedVelocityAcc / 10);
    SetSlowDownVelocityAcc(context->config->ratedVelocityAcc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffe5 	bl	8001e12 <_ZN13MotionPlanner17TrajectoryTracker22SetSlowDownVelocityAccEl>
    updateTimeout = _updateTimeout;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZN13MotionPlanner12AttachConfigEPNS_8Config_tE>:


void MotionPlanner::AttachConfig(MotionPlanner::Config_t* _config)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
    config = _config;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    currentTracker.Init();
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff4d 	bl	8001d0c <_ZN13MotionPlanner14CurrentTracker4InitEv>
    velocityTracker.Init();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	331c      	adds	r3, #28
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff66 	bl	8001d48 <_ZN13MotionPlanner15VelocityTracker4InitEv>
    positionTracker.Init();
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3330      	adds	r3, #48	; 0x30
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff7f 	bl	8001d84 <_ZN13MotionPlanner15PositionTracker4InitEv>
    positionInterpolator.Init();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	335c      	adds	r3, #92	; 0x5c
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ffb8 	bl	8001e00 <_ZN13MotionPlanner20PositionInterpolator4InitEv>
    trajectoryTracker.Init(200);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	337c      	adds	r3, #124	; 0x7c
 8001e94:	21c8      	movs	r1, #200	; 0xc8
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffc8 	bl	8001e2c <_ZN13MotionPlanner17TrajectoryTracker4InitEl>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN5Motor13AttachEncoderEP11EncoderBase>:
    CloseLoopControlTick();
}


void Motor::AttachEncoder(EncoderBase* _encoder)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    encoder = _encoder;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_ZN5Motor12AttachDriverEP10DriverBase>:


void Motor::AttachDriver(DriverBase* _driver)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    driver = _driver;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <_ZN5Motor10Controller19SetPositionSetPointEl>:
    SetVelocitySetPoint(_vel);
}


void Motor::Controller::SetPositionSetPoint(int32_t _pos)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
    goalPosition = _pos + context->config.motionParams.encoderHomeOffset;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	441a      	add	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <_ZN5Motor10Controller19SetVelocitySetPointEl>:
    }
}


void Motor::Controller::SetVelocitySetPoint(int32_t _vel)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
    if ((_vel >= -context->config.motionParams.ratedVelocity) &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	425b      	negs	r3, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	db08      	blt.n	8001f28 <_ZN5Motor10Controller19SetVelocitySetPointEl+0x2a>
        (_vel <= context->config.motionParams.ratedVelocity))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	699b      	ldr	r3, [r3, #24]
    if ((_vel >= -context->config.motionParams.ratedVelocity) &&
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dc02      	bgt.n	8001f28 <_ZN5Motor10Controller19SetVelocitySetPointEl+0x2a>
    {
        goalVelocity = _vel;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <_ZN5Motor10Controller18SetCurrentSetPointEl>:
    return (float) focCurrent / 1000.f;
}


void Motor::Controller::SetCurrentSetPoint(int32_t _cur)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
    if (_cur > context->config.motionParams.ratedCurrent)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dd05      	ble.n	8001f54 <_ZN5Motor10Controller18SetCurrentSetPointEl+0x22>
        goalCurrent = context->config.motionParams.ratedCurrent;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
    else if (_cur < -context->config.motionParams.ratedCurrent)
        goalCurrent = -context->config.motionParams.ratedCurrent;
    else
        goalCurrent = _cur;
}
 8001f52:	e010      	b.n	8001f76 <_ZN5Motor10Controller18SetCurrentSetPointEl+0x44>
    else if (_cur < -context->config.motionParams.ratedCurrent)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	da06      	bge.n	8001f70 <_ZN5Motor10Controller18SetCurrentSetPointEl+0x3e>
        goalCurrent = -context->config.motionParams.ratedCurrent;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	425a      	negs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f6e:	e002      	b.n	8001f76 <_ZN5Motor10Controller18SetCurrentSetPointEl+0x44>
        goalCurrent = _cur;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_ZN5Motor10Controller14ClearStallFlagEv>:

}


void Motor::Controller::ClearStallFlag()
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    stalledTime = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	659a      	str	r2, [r3, #88]	; 0x58
    isStalled = false;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	71da      	strb	r2, [r3, #7]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_ZN5Motor10Controller4InitEv>:
    return compensate;
}


void Motor::Controller::Init()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    requestMode = boardConfig.enableMotorOnBoot ? static_cast<Mode_t>(boardConfig.defaultMode) : MODE_STOP;
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <_ZN5Motor10Controller4InitEv+0x164>)
 8001faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <_ZN5Motor10Controller4InitEv+0x1a>
 8001fb2:	4b54      	ldr	r3, [pc, #336]	; (8002104 <_ZN5Motor10Controller4InitEv+0x164>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	e000      	b.n	8001fbc <_ZN5Motor10Controller4InitEv+0x1c>
 8001fba:	2200      	movs	r2, #0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	711a      	strb	r2, [r3, #4]

    modeRunning = MODE_STOP;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	715a      	strb	r2, [r3, #5]
    state = STATE_STOP;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	719a      	strb	r2, [r3, #6]

    realLapPosition = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    realLapPositionLast = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
    realPosition = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
    realPositionLast = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]

    estVelocityIntegral = 0;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
    estVelocity = 0;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
    estLeadPosition = 0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    estPosition = 0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
    estError = 0;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c

    goalPosition = context->config.motionParams.encoderHomeOffset;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
    goalVelocity = 0;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	639a      	str	r2, [r3, #56]	; 0x38
    goalCurrent = 0;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
    goalDisable = false;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    goalBrake = false;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    softPosition = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    softVelocity = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	649a      	str	r2, [r3, #72]	; 0x48
    softCurrent = 0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	64da      	str	r2, [r3, #76]	; 0x4c
    softDisable = false;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    softBrake = false;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    softNewCurve = false;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

    focPosition = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    focCurrent = 0;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	631a      	str	r2, [r3, #48]	; 0x30

    stalledTime = 0;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
    isStalled = false;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	71da      	strb	r2, [r3, #7]

    overloadTime = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
    overloadFlag = false;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    config->pid.vError = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
    config->pid.vErrorLast = 0;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
    config->pid.outputKp = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
    config->pid.outputKi = 0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
    config->pid.outputKd = 0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    config->pid.integralRound = 0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    config->pid.integralRemainder = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
    config->pid.output = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

    config->dce.pError = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
    config->dce.vError = 0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
    config->dce.outputKp = 0;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	649a      	str	r2, [r3, #72]	; 0x48
    config->dce.outputKi = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	64da      	str	r2, [r3, #76]	; 0x4c
    config->dce.outputKd = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
    config->dce.integralRound = 0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    config->dce.integralRemainder = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	659a      	str	r2, [r3, #88]	; 0x58
    config->dce.output = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000218 	.word	0x20000218

08002108 <_ZN5Motor10Controller12AttachConfigEPNS0_8Config_tE>:
                                                     context->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
}


void Motor::Controller::AttachConfig(Motor::Controller::Config_t* _config)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    config = _config;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv>:
    return sumData;
}


void EncoderCalibratorBase::CalibrationDataCheck()
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    uint32_t count;
    int32_t subData;

    int32_t calibSampleResolution = motor->encoder->RESOLUTION / MOTOR_ONE_CIRCLE_HARD_STEPS;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4aa3      	ldr	r2, [pc, #652]	; (80023c4 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x2a0>)
 8002138:	fb82 1203 	smull	r1, r2, r2, r3
 800213c:	1192      	asrs	r2, r2, #6
 800213e:	17db      	asrs	r3, r3, #31
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
    for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS + 1; count++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2bc8      	cmp	r3, #200	; 0xc8
 800214c:	d81f      	bhi.n	800218e <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x6a>
    {
        sampleDataAverageForward[count] = (uint16_t) CycleAverage((int32_t) sampleDataAverageForward[count],
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	321c      	adds	r2, #28
 8002154:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002158:	4618      	mov	r0, r3
                                                                  (int32_t) sampleDataAverageBackward[count],
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	33e4      	adds	r3, #228	; 0xe4
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	885b      	ldrh	r3, [r3, #2]
        sampleDataAverageForward[count] = (uint16_t) CycleAverage((int32_t) sampleDataAverageForward[count],
 8002166:	4619      	mov	r1, r3
                                                                  motor->encoder->RESOLUTION);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002170:	68db      	ldr	r3, [r3, #12]
        sampleDataAverageForward[count] = (uint16_t) CycleAverage((int32_t) sampleDataAverageForward[count],
 8002172:	461a      	mov	r2, r3
 8002174:	f000 fba7 	bl	80028c6 <_ZN21EncoderCalibratorBase12CycleAverageElll>
 8002178:	4603      	mov	r3, r0
 800217a:	b299      	uxth	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	321c      	adds	r2, #28
 8002182:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS + 1; count++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e7dc      	b.n	8002148 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x24>
    }
    subData = CycleSubtract((int32_t) sampleDataAverageForward[0],
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002192:	4618      	mov	r0, r3
                            (int32_t) sampleDataAverageForward[MOTOR_ONE_CIRCLE_HARD_STEPS - 1],
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
    subData = CycleSubtract((int32_t) sampleDataAverageForward[0],
 800219a:	4619      	mov	r1, r3
                            motor->encoder->RESOLUTION);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80021a4:	68db      	ldr	r3, [r3, #12]
    subData = CycleSubtract((int32_t) sampleDataAverageForward[0],
 80021a6:	461a      	mov	r2, r3
 80021a8:	f000 fb6a 	bl	8002880 <_ZN21EncoderCalibratorBase13CycleSubtractElll>
 80021ac:	60b8      	str	r0, [r7, #8]
    if (subData == 0)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x98>
    {
        errorCode = CALI_ERROR_AVERAGE_DIR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	731a      	strb	r2, [r3, #12]
        return;
 80021ba:	e0ff      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
    } else
    {
        goDirection = subData > 0;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bfcc      	ite	gt
 80021c2:	2301      	movgt	r3, #1
 80021c4:	2300      	movle	r3, #0
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	751a      	strb	r2, [r3, #20]
    }

    for (count = 1; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 80021cc:	2301      	movs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2bc7      	cmp	r3, #199	; 0xc7
 80021d4:	d85a      	bhi.n	800228c <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x168>
    {
        subData = CycleSubtract((int32_t) sampleDataAverageForward[count],
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	321c      	adds	r2, #28
 80021dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021e0:	4618      	mov	r0, r3
                                (int32_t) sampleDataAverageForward[count - 1],
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	321c      	adds	r2, #28
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        subData = CycleSubtract((int32_t) sampleDataAverageForward[count],
 80021ee:	4619      	mov	r1, r3
                                motor->encoder->RESOLUTION);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80021f8:	68db      	ldr	r3, [r3, #12]
        subData = CycleSubtract((int32_t) sampleDataAverageForward[count],
 80021fa:	461a      	mov	r2, r3
 80021fc:	f000 fb40 	bl	8002880 <_ZN21EncoderCalibratorBase13CycleSubtractElll>
 8002200:	60b8      	str	r0, [r7, #8]
        if (abs(subData) > (calibSampleResolution * 3 / 2)) // delta-data too large
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8002208:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	0fda      	lsrs	r2, r3, #31
 8002216:	4413      	add	r3, r2
 8002218:	105b      	asrs	r3, r3, #1
 800221a:	4299      	cmp	r1, r3
 800221c:	dd03      	ble.n	8002226 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x102>
        {
            errorCode = CALI_ERROR_AVERAGE_CONTINUTY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	731a      	strb	r2, [r3, #12]
            return;
 8002224:	e0ca      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
        if (abs(subData) < (calibSampleResolution * 1 / 2)) // delta-data too small
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800222c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	0fd9      	lsrs	r1, r3, #31
 8002234:	440b      	add	r3, r1
 8002236:	105b      	asrs	r3, r3, #1
 8002238:	429a      	cmp	r2, r3
 800223a:	da03      	bge.n	8002244 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x120>
        {
            errorCode = CALI_ERROR_AVERAGE_CONTINUTY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	731a      	strb	r2, [r3, #12]
            return;
 8002242:	e0bb      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
        if (subData == 0)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x12e>
        {
            errorCode = CALI_ERROR_AVERAGE_DIR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	731a      	strb	r2, [r3, #12]
            return;
 8002250:	e0b4      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
        if ((subData > 0) && (!goDirection))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dd0a      	ble.n	800226e <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x14a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7d1b      	ldrb	r3, [r3, #20]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x14a>
        {
            errorCode = CALI_ERROR_AVERAGE_DIR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	731a      	strb	r2, [r3, #12]
            return;
 800226c:	e0a6      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
        if ((subData < 0) && (goDirection))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da07      	bge.n	8002284 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x160>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7d1b      	ldrb	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x160>
        {
            errorCode = CALI_ERROR_AVERAGE_DIR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	731a      	strb	r2, [r3, #12]
            return;
 8002282:	e09b      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
    for (count = 1; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e7a1      	b.n	80021d0 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0xac>
        }
    }


    uint32_t step_num = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
    if (goDirection)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7d1b      	ldrb	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d046      	beq.n	8002326 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x202>
    {
        for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2bc7      	cmp	r3, #199	; 0xc7
 80022a0:	d83a      	bhi.n	8002318 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x1f4>
        {
            subData = (int32_t) sampleDataAverageForward[CycleMod(count + 1, MOTOR_ONE_CIRCLE_HARD_STEPS)] -
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	21c8      	movs	r1, #200	; 0xc8
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fad5 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80022ae:	4602      	mov	r2, r0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	321c      	adds	r2, #28
 80022b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022b8:	461c      	mov	r4, r3
                      (int32_t) sampleDataAverageForward[CycleMod(count, MOTOR_ONE_CIRCLE_HARD_STEPS)];
 80022ba:	21c8      	movs	r1, #200	; 0xc8
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f000 facb 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	321c      	adds	r2, #28
 80022c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            subData = (int32_t) sampleDataAverageForward[CycleMod(count + 1, MOTOR_ONE_CIRCLE_HARD_STEPS)] -
 80022cc:	1ae3      	subs	r3, r4, r3
 80022ce:	60bb      	str	r3, [r7, #8]
            if (subData < 0)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da1c      	bge.n	8002310 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x1ec>
            {
                step_num++;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3301      	adds	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
                rcdX = (int32_t) count;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
                rcdY = (motor->encoder->RESOLUTION - 1) -
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	1e5c      	subs	r4, r3, #1
                       sampleDataAverageForward[CycleMod(rcdX, MOTOR_ONE_CIRCLE_HARD_STEPS)];
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80022f6:	21c8      	movs	r1, #200	; 0xc8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 faad 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	321c      	adds	r2, #28
 8002304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                rcdY = (motor->encoder->RESOLUTION - 1) -
 8002308:	1ae2      	subs	r2, r4, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
        for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e7c1      	b.n	800229c <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x178>
            }
        }
        if (step_num != 1)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d04b      	beq.n	80023b6 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x292>
        {
            errorCode = CALI_ERROR_PHASE_STEP;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	731a      	strb	r2, [r3, #12]
            return;
 8002324:	e04a      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
    } else
    {
        for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2bc7      	cmp	r3, #199	; 0xc7
 800232e:	d83b      	bhi.n	80023a8 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x284>
        {
            subData = (int32_t) sampleDataAverageForward[CycleMod(count + 1, MOTOR_ONE_CIRCLE_HARD_STEPS)] -
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	21c8      	movs	r1, #200	; 0xc8
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa8e 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800233c:	4602      	mov	r2, r0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	321c      	adds	r2, #28
 8002342:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002346:	461c      	mov	r4, r3
                      (int32_t) sampleDataAverageForward[CycleMod(count, MOTOR_ONE_CIRCLE_HARD_STEPS)];
 8002348:	21c8      	movs	r1, #200	; 0xc8
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f000 fa84 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	321c      	adds	r2, #28
 8002356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            subData = (int32_t) sampleDataAverageForward[CycleMod(count + 1, MOTOR_ONE_CIRCLE_HARD_STEPS)] -
 800235a:	1ae3      	subs	r3, r4, r3
 800235c:	60bb      	str	r3, [r7, #8]
            if (subData > 0)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	dd1d      	ble.n	80023a0 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x27c>
            {
                step_num++;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	3301      	adds	r3, #1
 8002368:	613b      	str	r3, [r7, #16]
                rcdX = (int32_t) count;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
                rcdY = (motor->encoder->RESOLUTION - 1) -
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	1e5c      	subs	r4, r3, #1
                       sampleDataAverageForward[CycleMod(rcdX + 1, MOTOR_ONE_CIRCLE_HARD_STEPS)];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8002384:	3301      	adds	r3, #1
 8002386:	21c8      	movs	r1, #200	; 0xc8
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fa65 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	321c      	adds	r2, #28
 8002394:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                rcdY = (motor->encoder->RESOLUTION - 1) -
 8002398:	1ae2      	subs	r2, r4, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
        for (count = 0; count < MOTOR_ONE_CIRCLE_HARD_STEPS; count++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e7c0      	b.n	800232a <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x206>
            }
        }
        if (step_num != 1)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d003      	beq.n	80023b6 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x292>
        {
            errorCode = CALI_ERROR_PHASE_STEP;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	731a      	strb	r2, [r3, #12]
            return;
 80023b4:	e002      	b.n	80023bc <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv+0x298>
        }
    }

    errorCode = CALI_NO_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	731a      	strb	r2, [r3, #12]
}
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	51eb851f 	.word	0x51eb851f

080023c8 <_ZN21EncoderCalibratorBase12TickMainLoopEv>:
    }
}


void EncoderCalibratorBase::TickMainLoop()
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    int32_t dataI32;
    uint16_t dataU16;

    if (state != CALI_CALCULATING)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7b5b      	ldrb	r3, [r3, #13]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	f040 823b 	bne.w	8002850 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x488>
        return;

    motor->driver->Sleep();
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3308      	adds	r3, #8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4610      	mov	r0, r2
 80023f2:	4798      	blx	r3

    CalibrationDataCheck();
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fe95 	bl	8002124 <_ZN21EncoderCalibratorBase20CalibrationDataCheckEv>

    if (errorCode == CALI_NO_ERROR)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7b1b      	ldrb	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 81fc 	bne.w	80027fc <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x434>
    {
        int32_t stepX, stepY;
        resultNum = 0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

        ClearFlash();
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3308      	adds	r3, #8
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
        BeginWriteFlash();
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3

        if (goDirection)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7d1b      	ldrb	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80e9 	beq.w	80025fe <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x236>
        {
            for (stepX = rcdX; stepX < rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS + 1; stepX++)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4413      	add	r3, r2
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f300 81c6 	bgt.w	80027d6 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x40e>
            {
                dataI32 = CycleSubtract(
                    sampleDataAverageForward[CycleMod(stepX + 1, motor->MOTOR_ONE_CIRCLE_HARD_STEPS)],
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f000 f9fd 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800245e:	4602      	mov	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	321c      	adds	r2, #28
 8002464:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                dataI32 = CycleSubtract(
 8002468:	461c      	mov	r4, r3
                    sampleDataAverageForward[CycleMod(stepX, motor->MOTOR_ONE_CIRCLE_HARD_STEPS)],
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 f9ef 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	321c      	adds	r2, #28
 8002480:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                dataI32 = CycleSubtract(
 8002484:	4619      	mov	r1, r3
                    motor->encoder->RESOLUTION);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800248e:	68db      	ldr	r3, [r3, #12]
                dataI32 = CycleSubtract(
 8002490:	461a      	mov	r2, r3
 8002492:	4620      	mov	r0, r4
 8002494:	f000 f9f4 	bl	8002880 <_ZN21EncoderCalibratorBase13CycleSubtractElll>
 8002498:	60f8      	str	r0, [r7, #12]
                if (stepX == rcdX)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d135      	bne.n	8002512 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x14a>
                {
                    for (stepY = rcdY; stepY < dataI32; stepY++)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f280 809f 	bge.w	80025f6 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x22e>
                    {
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	fb02 f203 	mul.w	r2, r2, r3
                                           motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	fb01 f103 	mul.w	r1, r1, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	fb91 f3f3 	sdiv	r3, r1, r3
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 80024d6:	4413      	add	r3, r2
 80024d8:	461a      	mov	r2, r3
                                           motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 f9b8 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80024e8:	4603      	mov	r3, r0
 80024ea:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	897a      	ldrh	r2, [r7, #10]
 80024f6:	4611      	mov	r1, r2
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
                        resultNum++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = rcdY; stepY < dataI32; stepY++)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	3301      	adds	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e7cd      	b.n	80024ae <_ZN21EncoderCalibratorBase12TickMainLoopEv+0xe6>
                    }
                } else if (stepX == rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d134      	bne.n	8002590 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x1c8>
                {
                    for (stepY = 0; stepY < rcdY; stepY++)
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	429a      	cmp	r2, r3
 8002534:	da5f      	bge.n	80025f6 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x22e>
                    {
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	fb02 f203 	mul.w	r2, r2, r3
                                           motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	6939      	ldr	r1, [r7, #16]
 800254a:	fb01 f103 	mul.w	r1, r1, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	fb91 f3f3 	sdiv	r3, r1, r3
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 8002554:	4413      	add	r3, r2
 8002556:	461a      	mov	r2, r3
                                           motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f000 f979 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 8002566:	4603      	mov	r3, r0
 8002568:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	897a      	ldrh	r2, [r7, #10]
 8002574:	4611      	mov	r1, r2
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
                        resultNum++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = 0; stepY < rcdY; stepY++)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3301      	adds	r3, #1
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e7cc      	b.n	800252a <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x162>
                    }
                } else
                {
                    for (stepY = 0; stepY < dataI32; stepY++)
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	da2c      	bge.n	80025f6 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x22e>
                    {
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	fb02 f203 	mul.w	r2, r2, r3
                                           motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	6939      	ldr	r1, [r7, #16]
 80025b0:	fb01 f103 	mul.w	r1, r1, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	fb91 f3f3 	sdiv	r3, r1, r3
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 80025ba:	4413      	add	r3, r2
 80025bc:	461a      	mov	r2, r3
                                           motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(motor->SOFT_DIVIDE_NUM * stepX +
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 f946 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80025cc:	4603      	mov	r3, r0
 80025ce:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	897a      	ldrh	r2, [r7, #10]
 80025da:	4611      	mov	r1, r2
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
                        resultNum++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = 0; stepY < dataI32; stepY++)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	3301      	adds	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e7ce      	b.n	8002594 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x1cc>
            for (stepX = rcdX; stepX < rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS + 1; stepX++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e71a      	b.n	8002434 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x6c>
                    }
                }
            }
        } else
        {
            for (stepX = rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS; stepX > rcdX - 1; stepX--)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	f2c0 80dd 	blt.w	80027d6 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x40e>
            {
                dataI32 = CycleSubtract(
                    sampleDataAverageForward[CycleMod(stepX, motor->MOTOR_ONE_CIRCLE_HARD_STEPS)],
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 f916 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	321c      	adds	r2, #28
 8002632:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                dataI32 = CycleSubtract(
 8002636:	461c      	mov	r4, r3
                    sampleDataAverageForward[CycleMod(stepX + 1, motor->MOTOR_ONE_CIRCLE_HARD_STEPS)],
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 f906 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	321c      	adds	r2, #28
 8002652:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                dataI32 = CycleSubtract(
 8002656:	4619      	mov	r1, r3
                    motor->encoder->RESOLUTION);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002660:	68db      	ldr	r3, [r3, #12]
                dataI32 = CycleSubtract(
 8002662:	461a      	mov	r2, r3
 8002664:	4620      	mov	r0, r4
 8002666:	f000 f90b 	bl	8002880 <_ZN21EncoderCalibratorBase13CycleSubtractElll>
 800266a:	60f8      	str	r0, [r7, #12]
                if (stepX == rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4413      	add	r3, r2
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	d136      	bne.n	80026ee <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x326>
                {
                    for (stepY = rcdY; stepY < dataI32; stepY++)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	f280 809e 	bge.w	80027ce <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x406>
                    {
                        dataU16 = CycleMod(
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	3201      	adds	r2, #1
 800269c:	fb02 f203 	mul.w	r2, r2, r3
                            motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	fb01 f103 	mul.w	r1, r1, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	fb91 f3f3 	sdiv	r3, r1, r3
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 80026b2:	1ad3      	subs	r3, r2, r3
                        dataU16 = CycleMod(
 80026b4:	461a      	mov	r2, r3
                            motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(
 80026bc:	4619      	mov	r1, r3
 80026be:	4610      	mov	r0, r2
 80026c0:	f000 f8ca 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80026c4:	4603      	mov	r3, r0
 80026c6:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	897a      	ldrh	r2, [r7, #10]
 80026d2:	4611      	mov	r1, r2
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
                        resultNum++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = rcdY; stepY < dataI32; stepY++)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	3301      	adds	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e7cc      	b.n	8002688 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x2c0>
                    }
                } else if (stepX == rcdX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d135      	bne.n	8002766 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x39e>
                {
                    for (stepY = 0; stepY < rcdY; stepY++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	429a      	cmp	r2, r3
 8002708:	da61      	bge.n	80027ce <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x406>
                    {
                        dataU16 = CycleMod(
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	3201      	adds	r2, #1
 8002714:	fb02 f203 	mul.w	r2, r2, r3
                            motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	6939      	ldr	r1, [r7, #16]
 8002720:	fb01 f103 	mul.w	r1, r1, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	fb91 f3f3 	sdiv	r3, r1, r3
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 800272a:	1ad3      	subs	r3, r2, r3
                        dataU16 = CycleMod(
 800272c:	461a      	mov	r2, r3
                            motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 f88e 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 800273c:	4603      	mov	r3, r0
 800273e:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	897a      	ldrh	r2, [r7, #10]
 800274a:	4611      	mov	r1, r2
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
                        resultNum++;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = 0; stepY < rcdY; stepY++)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	3301      	adds	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e7cb      	b.n	80026fe <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x336>
                    }
                } else
                {
                    for (stepY = 0; stepY < dataI32; stepY++)
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	429a      	cmp	r2, r3
 8002770:	da2d      	bge.n	80027ce <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x406>
                    {
                        dataU16 = CycleMod(
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	3201      	adds	r2, #1
 800277c:	fb02 f203 	mul.w	r2, r2, r3
                            motor->SOFT_DIVIDE_NUM * stepY / dataI32,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	fb01 f103 	mul.w	r1, r1, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	fb91 f3f3 	sdiv	r3, r1, r3
                            motor->SOFT_DIVIDE_NUM * (stepX + 1) -
 8002792:	1ad3      	subs	r3, r2, r3
                        dataU16 = CycleMod(
 8002794:	461a      	mov	r2, r3
                            motor->MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	689b      	ldr	r3, [r3, #8]
                        dataU16 = CycleMod(
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 f85a 	bl	8002858 <_ZN21EncoderCalibratorBase8CycleModEmm>
 80027a4:	4603      	mov	r3, r0
 80027a6:	817b      	strh	r3, [r7, #10]
                        WriteFlash16bitsAppend(dataU16);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	897a      	ldrh	r2, [r7, #10]
 80027b2:	4611      	mov	r1, r2
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
                        resultNum++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
                    for (stepY = 0; stepY < dataI32; stepY++)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e7cd      	b.n	800276a <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x3a2>
            for (stepX = rcdX + motor->MOTOR_ONE_CIRCLE_HARD_STEPS; stepX > rcdX - 1; stepX--)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e71b      	b.n	800260e <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x246>
                    }
                }
            }
        }

        EndWriteFlash();
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3304      	adds	r3, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3

        if (resultNum != motor->encoder->RESOLUTION)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d002      	beq.n	80027fc <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x434>
            errorCode = CALI_ERROR_ANALYSIS_QUANTITY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2204      	movs	r2, #4
 80027fa:	731a      	strb	r2, [r3, #12]
    }

    if (errorCode == CALI_NO_ERROR)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x44a>
    {
        motor->encoder->angleData.rectifyValid = true;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800280c:	2201      	movs	r2, #1
 800280e:	721a      	strb	r2, [r3, #8]
 8002810:	e00b      	b.n	800282a <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x462>
    } else
    {
        motor->encoder->angleData.rectifyValid = false;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800281a:	2200      	movs	r2, #0
 800281c:	721a      	strb	r2, [r3, #8]
        ClearFlash();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3308      	adds	r3, #8
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
    }

    motor->controller->isStalled = true;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002832:	2201      	movs	r2, #1
 8002834:	71da      	strb	r2, [r3, #7]

    state = CALI_DISABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	735a      	strb	r2, [r3, #13]
    isTriggered = false;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	711a      	strb	r2, [r3, #4]

    if (errorCode == CALI_NO_ERROR)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7b1b      	ldrb	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x48a>
        HAL_NVIC_SystemReset();
 800284a:	f000 fbc2 	bl	8002fd2 <HAL_NVIC_SystemReset>
 800284e:	e000      	b.n	8002852 <_ZN21EncoderCalibratorBase12TickMainLoopEv+0x48a>
        return;
 8002850:	bf00      	nop
}
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}

08002858 <_ZN21EncoderCalibratorBase8CycleModEmm>:


uint32_t EncoderCalibratorBase::CycleMod(uint32_t _a, uint32_t _b)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    return (_a + _b) % _b;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4413      	add	r3, r2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	fbb3 f2f2 	udiv	r2, r3, r2
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	fb01 f202 	mul.w	r2, r1, r2
 8002874:	1a9b      	subs	r3, r3, r2
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <_ZN21EncoderCalibratorBase13CycleSubtractElll>:


int32_t EncoderCalibratorBase::CycleSubtract(int32_t _a, int32_t _b, int32_t _cyc)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
    int32_t sub_data;

    sub_data = _a - _b;
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
    if (sub_data > (_cyc >> 1)) sub_data -= _cyc;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	429a      	cmp	r2, r3
 800289c:	dd03      	ble.n	80028a6 <_ZN21EncoderCalibratorBase13CycleSubtractElll+0x26>
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
    if (sub_data < (-_cyc >> 1)) sub_data += _cyc;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	425b      	negs	r3, r3
 80028aa:	105b      	asrs	r3, r3, #1
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	da03      	bge.n	80028ba <_ZN21EncoderCalibratorBase13CycleSubtractElll+0x3a>
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
    return sub_data;
 80028ba:	697b      	ldr	r3, [r7, #20]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <_ZN21EncoderCalibratorBase12CycleAverageElll>:


int32_t EncoderCalibratorBase::CycleAverage(int32_t _a, int32_t _b, int32_t _cyc)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
    int32_t sub_data;
    int32_t ave_data;

    sub_data = _a - _b;
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	613b      	str	r3, [r7, #16]
    ave_data = (_a + _b) >> 1;
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4413      	add	r3, r2
 80028e0:	105b      	asrs	r3, r3, #1
 80028e2:	617b      	str	r3, [r7, #20]

    if (abs(sub_data) > (_cyc >> 1))
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80028ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	105b      	asrs	r3, r3, #1
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dd0f      	ble.n	8002916 <_ZN21EncoderCalibratorBase12CycleAverageElll+0x50>
    {
        if (ave_data >= (_cyc >> 1)) ave_data -= (_cyc >> 1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	105b      	asrs	r3, r3, #1
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	db05      	blt.n	800290c <_ZN21EncoderCalibratorBase12CycleAverageElll+0x46>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	105b      	asrs	r3, r3, #1
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e004      	b.n	8002916 <_ZN21EncoderCalibratorBase12CycleAverageElll+0x50>
        else ave_data += (_cyc >> 1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	105b      	asrs	r3, r3, #1
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
    }
    return ave_data;
 8002916:	697b      	ldr	r3, [r7, #20]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <_ZN10MT6816Base4InitEv>:
#include "mt6816_base.h"

bool MT6816Base::Init()
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
    SpiInit();
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
    UpdateAngle();
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3304      	adds	r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3

    // Check if the stored calibration data are valid
    angleData.rectifyValid = true;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	721a      	strb	r2, [r3, #8]
    for (uint32_t i = 0; i < RESOLUTION; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4293      	cmp	r3, r2
 8002956:	d210      	bcs.n	800297a <_ZN10MT6816Base4InitEv+0x58>
    {
        if (quickCaliDataPtr[i] == 0xFFFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <_ZN10MT6816Base4InitEv+0x50>
            angleData.rectifyValid = false;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	721a      	strb	r2, [r3, #8]
    for (uint32_t i = 0; i < RESOLUTION; i++)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3301      	adds	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e7e8      	b.n	800294c <_ZN10MT6816Base4InitEv+0x2a>
    }

    return angleData.rectifyValid;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7a1b      	ldrb	r3, [r3, #8]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZN10MT6816Base11UpdateAngleEv>:


uint16_t MT6816Base::UpdateAngle()
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
    dataTx[0] = (0x80 | 0x03) << 8;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f44f 4203 	mov.w	r2, #33536	; 0x8300
 8002994:	839a      	strh	r2, [r3, #28]
    dataTx[1] = (0x80 | 0x04) << 8;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 800299c:	83da      	strh	r2, [r3, #30]

    for (uint8_t i = 0; i < 3; i++)
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d859      	bhi.n	8002a5c <_ZN10MT6816Base11UpdateAngleEv+0xd6>
    {
        dataRx[0] = SpiTransmitAndRead16Bits(dataTx[0]);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3310      	adds	r3, #16
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	8b92      	ldrh	r2, [r2, #28]
 80029b4:	4611      	mov	r1, r2
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	841a      	strh	r2, [r3, #32]
        dataRx[1] = SpiTransmitAndRead16Bits(dataTx[1]);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3310      	adds	r3, #16
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	8bd2      	ldrh	r2, [r2, #30]
 80029ce:	4611      	mov	r1, r2
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	845a      	strh	r2, [r3, #34]	; 0x22

        spiRawData.rawData = ((dataRx[0] & 0x00FF) << 8) | (dataRx[1] & 0x00FF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8c1b      	ldrh	r3, [r3, #32]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	b21a      	sxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	821a      	strh	r2, [r3, #16]

        //奇偶校验
        hCount = 0;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        for (uint8_t j = 0; j < 16; j++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73bb      	strb	r3, [r7, #14]
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	d815      	bhi.n	8002a36 <_ZN10MT6816Base11UpdateAngleEv+0xb0>
        {
            if (spiRawData.rawData & (0x0001 << j))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8a1b      	ldrh	r3, [r3, #16]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	fa42 f303 	asr.w	r3, r2, r3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <_ZN10MT6816Base11UpdateAngleEv+0xa8>
                hCount++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a24:	3301      	adds	r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        for (uint8_t j = 0; j < 16; j++)
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73bb      	strb	r3, [r7, #14]
 8002a34:	e7e6      	b.n	8002a04 <_ZN10MT6816Base11UpdateAngleEv+0x7e>
        }
        if (hCount & 0x01)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <_ZN10MT6816Base11UpdateAngleEv+0xc6>
        {
            spiRawData.checksumFlag = false;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	755a      	strb	r2, [r3, #21]
 8002a4a:	e003      	b.n	8002a54 <_ZN10MT6816Base11UpdateAngleEv+0xce>
        } else
        {
            spiRawData.checksumFlag = true;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	755a      	strb	r2, [r3, #21]
            break;
 8002a52:	e003      	b.n	8002a5c <_ZN10MT6816Base11UpdateAngleEv+0xd6>
    for (uint8_t i = 0; i < 3; i++)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	3301      	adds	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e7a2      	b.n	80029a2 <_ZN10MT6816Base11UpdateAngleEv+0x1c>
        }
    }

    if (spiRawData.checksumFlag)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7d5b      	ldrb	r3, [r3, #21]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <_ZN10MT6816Base11UpdateAngleEv+0x100>
    {
        spiRawData.rawAngle = spiRawData.rawData >> 2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8a1b      	ldrh	r3, [r3, #16]
 8002a68:	109b      	asrs	r3, r3, #2
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	825a      	strh	r2, [r3, #18]
        spiRawData.noMagFlag = (bool) (spiRawData.rawData & (0x0001 << 1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8a1b      	ldrh	r3, [r3, #16]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	751a      	strb	r2, [r3, #20]
    }

    angleData.rawAngle = spiRawData.rawAngle;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8a5a      	ldrh	r2, [r3, #18]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	809a      	strh	r2, [r3, #4]
    angleData.rectifiedAngle = quickCaliDataPtr[angleData.rawAngle];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	889b      	ldrh	r3, [r3, #4]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	80da      	strh	r2, [r3, #6]

    return angleData.rectifiedAngle;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	88db      	ldrh	r3, [r3, #6]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_ZN10MT6816Base12IsCalibratedEv>:


bool MT6816Base::IsCalibrated()
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    return angleData.rectifyValid;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7a1b      	ldrb	r3, [r3, #8]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN10ButtonBase18SetOnEventListenerEPFvNS_5EventEE>:
        lastPinIO = pinIO;
    }
}

void ButtonBase::SetOnEventListener(void (* _callback)(Event))
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
    lastPinIO =  ReadButtonPinIO(id);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	7912      	ldrb	r2, [r2, #4]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	715a      	strb	r2, [r3, #5]

    OnEventFunc = _callback;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	615a      	str	r2, [r3, #20]
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_Init+0x28>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_Init+0x28>)
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 fa3d 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f000 f808 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7fe fbba 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40022000 	.word	0x40022000

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fa4b 	bl	8002fda <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 fa1d 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000004 	.word	0x20000004

08002b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_IncTick+0x1c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	200009fc 	.word	0x200009fc

08002ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_GetTick+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	200009fc 	.word	0x200009fc

08002bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d005      	beq.n	8002bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_Delay+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bde:	bf00      	nop
 8002be0:	f7ff ffe0 	bl	8002ba4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d8f7      	bhi.n	8002be0 <HAL_Delay+0x28>
  {
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000008 	.word	0x20000008

08002c00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0ed      	b.n	8002dee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fb64 	bl	80012ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c34:	f7ff ffb6 	bl	8002ba4 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3a:	e012      	b.n	8002c62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c3c:	f7ff ffb2 	bl	8002ba4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b0a      	cmp	r3, #10
 8002c48:	d90b      	bls.n	8002c62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0c5      	b.n	8002dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0e5      	beq.n	8002c3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0202 	bic.w	r2, r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7ff ff90 	bl	8002ba4 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c86:	e012      	b.n	8002cae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c88:	f7ff ff8c 	bl	8002ba4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d90b      	bls.n	8002cae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e09f      	b.n	8002dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e1b      	ldrb	r3, [r3, #24]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7e5b      	ldrb	r3, [r3, #25]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7e9b      	ldrb	r3, [r3, #26]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d108      	bne.n	8002d2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0220 	orr.w	r2, r2, #32
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7edb      	ldrb	r3, [r3, #27]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0210 	bic.w	r2, r2, #16
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0210 	orr.w	r2, r2, #16
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7f1b      	ldrb	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0208 	orr.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e007      	b.n	8002d8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7f5b      	ldrb	r3, [r3, #29]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0204 	orr.w	r2, r2, #4
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e007      	b.n	8002db8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0204 	bic.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	ea42 0103 	orr.w	r1, r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60d3      	str	r3, [r2, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <__NVIC_GetPriorityGrouping+0x18>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f003 0307 	and.w	r3, r3, #7
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f18:	f3bf 8f4f 	dsb	sy
}
 8002f1c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <__NVIC_SystemReset+0x24>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f26:	4904      	ldr	r1, [pc, #16]	; (8002f38 <__NVIC_SystemReset+0x24>)
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_SystemReset+0x28>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f2e:	f3bf 8f4f 	dsb	sy
}
 8002f32:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <__NVIC_SystemReset+0x20>
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	05fa0004 	.word	0x05fa0004

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff7a 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff33 	bl	8002df8 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff48 	bl	8002e40 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff7a 	bl	8002eb0 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff49 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002fd6:	f7ff ff9d 	bl	8002f14 <__NVIC_SystemReset>

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffac 	bl	8002f40 <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_FLASH_Program+0xd8>)
 8003010:	7e1b      	ldrb	r3, [r3, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_FLASH_Program+0x26>
 8003016:	2302      	movs	r3, #2
 8003018:	e054      	b.n	80030c4 <HAL_FLASH_Program+0xd0>
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_FLASH_Program+0xd8>)
 800301c:	2201      	movs	r2, #1
 800301e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003024:	f000 f8a8 	bl	8003178 <FLASH_WaitForLastOperation>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d144      	bne.n	80030bc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	757b      	strb	r3, [r7, #21]
 800303c:	e007      	b.n	800304e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d102      	bne.n	800304a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003044:	2302      	movs	r3, #2
 8003046:	757b      	strb	r3, [r7, #21]
 8003048:	e001      	b.n	800304e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800304a:	2304      	movs	r3, #4
 800304c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800304e:	2300      	movs	r3, #0
 8003050:	75bb      	strb	r3, [r7, #22]
 8003052:	e02d      	b.n	80030b0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003054:	7dbb      	ldrb	r3, [r7, #22]
 8003056:	005a      	lsls	r2, r3, #1
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	eb02 0c03 	add.w	ip, r2, r3
 800305e:	7dbb      	ldrb	r3, [r7, #22]
 8003060:	0119      	lsls	r1, r3, #4
 8003062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003066:	f1c1 0620 	rsb	r6, r1, #32
 800306a:	f1a1 0020 	sub.w	r0, r1, #32
 800306e:	fa22 f401 	lsr.w	r4, r2, r1
 8003072:	fa03 f606 	lsl.w	r6, r3, r6
 8003076:	4334      	orrs	r4, r6
 8003078:	fa23 f000 	lsr.w	r0, r3, r0
 800307c:	4304      	orrs	r4, r0
 800307e:	fa23 f501 	lsr.w	r5, r3, r1
 8003082:	b2a3      	uxth	r3, r4
 8003084:	4619      	mov	r1, r3
 8003086:	4660      	mov	r0, ip
 8003088:	f000 f85a 	bl	8003140 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800308c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003090:	f000 f872 	bl	8003178 <FLASH_WaitForLastOperation>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_FLASH_Program+0xdc>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <HAL_FLASH_Program+0xdc>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80030aa:	7dbb      	ldrb	r3, [r7, #22]
 80030ac:	3301      	adds	r3, #1
 80030ae:	75bb      	strb	r3, [r7, #22]
 80030b0:	7dba      	ldrb	r2, [r7, #22]
 80030b2:	7d7b      	ldrb	r3, [r7, #21]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3cd      	bcc.n	8003054 <HAL_FLASH_Program+0x60>
 80030b8:	e000      	b.n	80030bc <HAL_FLASH_Program+0xc8>
      {
        break;
 80030ba:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_FLASH_Program+0xd8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	761a      	strb	r2, [r3, #24]

  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030cc:	20000a00 	.word	0x20000a00
 80030d0:	40022000 	.word	0x40022000

080030d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_FLASH_Unlock+0x40>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_FLASH_Unlock+0x40>)
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_FLASH_Unlock+0x44>)
 80030ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_FLASH_Unlock+0x40>)
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_FLASH_Unlock+0x48>)
 80030f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_FLASH_Unlock+0x40>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003106:	79fb      	ldrb	r3, [r7, #7]
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40022000 	.word	0x40022000
 8003118:	45670123 	.word	0x45670123
 800311c:	cdef89ab 	.word	0xcdef89ab

08003120 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_FLASH_Lock+0x1c>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_FLASH_Lock+0x1c>)
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000

08003140 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <FLASH_Program_HalfWord+0x30>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <FLASH_Program_HalfWord+0x34>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <FLASH_Program_HalfWord+0x34>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	801a      	strh	r2, [r3, #0]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000a00 	.word	0x20000a00
 8003174:	40022000 	.word	0x40022000

08003178 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff fd10 	bl	8002ba4 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003186:	e010      	b.n	80031aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d00c      	beq.n	80031aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <FLASH_WaitForLastOperation+0x2e>
 8003196:	f7ff fd05 	bl	8002ba4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d201      	bcs.n	80031aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e025      	b.n	80031f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e8      	bne.n	8003188 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031c4:	2220      	movs	r2, #32
 80031c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <FLASH_WaitForLastOperation+0x88>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80031ec:	f000 f80a 	bl	8003204 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000

08003204 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <FLASH_SetErrorCode+0x98>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 8003224:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <FLASH_SetErrorCode+0x98>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 8003244:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <FLASH_SetErrorCode+0x98>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <FLASH_SetErrorCode+0x9c>)
 8003264:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <FLASH_SetErrorCode+0x98>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <FLASH_SetErrorCode+0x98>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f240 1201 	movw	r2, #257	; 0x101
 8003278:	4293      	cmp	r3, r2
 800327a:	d106      	bne.n	800328a <FLASH_SetErrorCode+0x86>
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <FLASH_SetErrorCode+0x98>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <FLASH_SetErrorCode+0x98>)
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	61d3      	str	r3, [r2, #28]
}  
 8003288:	e002      	b.n	8003290 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800328a:	4a04      	ldr	r2, [pc, #16]	; (800329c <FLASH_SetErrorCode+0x98>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60d3      	str	r3, [r2, #12]
}  
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40022000 	.word	0x40022000
 80032a0:	20000a00 	.word	0x20000a00

080032a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032b6:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_FLASHEx_Erase+0xd0>)
 80032b8:	7e1b      	ldrb	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_FLASHEx_Erase+0x1e>
 80032be:	2302      	movs	r3, #2
 80032c0:	e053      	b.n	800336a <HAL_FLASHEx_Erase+0xc6>
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_FLASHEx_Erase+0xd0>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d116      	bne.n	80032fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80032d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032d4:	f7ff ff50 	bl	8003178 <FLASH_WaitForLastOperation>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d141      	bne.n	8003362 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 f84c 	bl	800337c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032e8:	f7ff ff46 	bl	8003178 <FLASH_WaitForLastOperation>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_FLASHEx_Erase+0xd4>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_FLASHEx_Erase+0xd4>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	6113      	str	r3, [r2, #16]
 80032fc:	e031      	b.n	8003362 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80032fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003302:	f7ff ff39 	bl	8003178 <FLASH_WaitForLastOperation>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d12a      	bne.n	8003362 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	e019      	b.n	8003350 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	f000 f849 	bl	80033b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003326:	f7ff ff27 	bl	8003178 <FLASH_WaitForLastOperation>
 800332a:	4603      	mov	r3, r0
 800332c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_FLASHEx_Erase+0xd4>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_FLASHEx_Erase+0xd4>)
 8003334:	f023 0302 	bic.w	r3, r3, #2
 8003338:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	601a      	str	r2, [r3, #0]
            break;
 8003346:	e00c      	b.n	8003362 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	029a      	lsls	r2, r3, #10
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d3dc      	bcc.n	800331c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <HAL_FLASHEx_Erase+0xd0>)
 8003364:	2200      	movs	r2, #0
 8003366:	761a      	strb	r2, [r3, #24]

  return status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000a00 	.word	0x20000a00
 8003378:	40022000 	.word	0x40022000

0800337c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <FLASH_MassErase+0x30>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <FLASH_MassErase+0x34>)
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <FLASH_MassErase+0x34>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <FLASH_MassErase+0x34>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <FLASH_MassErase+0x34>)
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	20000a00 	.word	0x20000a00
 80033b0:	40022000 	.word	0x40022000

080033b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <FLASH_PageErase+0x38>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <FLASH_PageErase+0x3c>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <FLASH_PageErase+0x3c>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80033ce:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <FLASH_PageErase+0x3c>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <FLASH_PageErase+0x3c>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <FLASH_PageErase+0x3c>)
 80033da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000a00 	.word	0x20000a00
 80033f0:	40022000 	.word	0x40022000

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e169      	b.n	80036dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003408:	2201      	movs	r2, #1
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 8158 	bne.w	80036d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a9a      	ldr	r2, [pc, #616]	; (8003694 <HAL_GPIO_Init+0x2a0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d05e      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003430:	4a98      	ldr	r2, [pc, #608]	; (8003694 <HAL_GPIO_Init+0x2a0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d875      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003436:	4a98      	ldr	r2, [pc, #608]	; (8003698 <HAL_GPIO_Init+0x2a4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d058      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 800343c:	4a96      	ldr	r2, [pc, #600]	; (8003698 <HAL_GPIO_Init+0x2a4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d86f      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003442:	4a96      	ldr	r2, [pc, #600]	; (800369c <HAL_GPIO_Init+0x2a8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d052      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003448:	4a94      	ldr	r2, [pc, #592]	; (800369c <HAL_GPIO_Init+0x2a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d869      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800344e:	4a94      	ldr	r2, [pc, #592]	; (80036a0 <HAL_GPIO_Init+0x2ac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04c      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003454:	4a92      	ldr	r2, [pc, #584]	; (80036a0 <HAL_GPIO_Init+0x2ac>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d863      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800345a:	4a92      	ldr	r2, [pc, #584]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d046      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003460:	4a90      	ldr	r2, [pc, #576]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d85d      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003466:	2b12      	cmp	r3, #18
 8003468:	d82a      	bhi.n	80034c0 <HAL_GPIO_Init+0xcc>
 800346a:	2b12      	cmp	r3, #18
 800346c:	d859      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <HAL_GPIO_Init+0x80>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034ef 	.word	0x080034ef
 8003478:	080034c9 	.word	0x080034c9
 800347c:	080034db 	.word	0x080034db
 8003480:	0800351d 	.word	0x0800351d
 8003484:	08003523 	.word	0x08003523
 8003488:	08003523 	.word	0x08003523
 800348c:	08003523 	.word	0x08003523
 8003490:	08003523 	.word	0x08003523
 8003494:	08003523 	.word	0x08003523
 8003498:	08003523 	.word	0x08003523
 800349c:	08003523 	.word	0x08003523
 80034a0:	08003523 	.word	0x08003523
 80034a4:	08003523 	.word	0x08003523
 80034a8:	08003523 	.word	0x08003523
 80034ac:	08003523 	.word	0x08003523
 80034b0:	08003523 	.word	0x08003523
 80034b4:	08003523 	.word	0x08003523
 80034b8:	080034d1 	.word	0x080034d1
 80034bc:	080034e5 	.word	0x080034e5
 80034c0:	4a79      	ldr	r2, [pc, #484]	; (80036a8 <HAL_GPIO_Init+0x2b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034c6:	e02c      	b.n	8003522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	623b      	str	r3, [r7, #32]
          break;
 80034ce:	e029      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	623b      	str	r3, [r7, #32]
          break;
 80034d8:	e024      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	3308      	adds	r3, #8
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e01f      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	330c      	adds	r3, #12
 80034ea:	623b      	str	r3, [r7, #32]
          break;
 80034ec:	e01a      	b.n	8003524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034f6:	2304      	movs	r3, #4
 80034f8:	623b      	str	r3, [r7, #32]
          break;
 80034fa:	e013      	b.n	8003524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003504:	2308      	movs	r3, #8
 8003506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	611a      	str	r2, [r3, #16]
          break;
 800350e:	e009      	b.n	8003524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003510:	2308      	movs	r3, #8
 8003512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	615a      	str	r2, [r3, #20]
          break;
 800351a:	e003      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800351c:	2300      	movs	r3, #0
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x130>
          break;
 8003522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2bff      	cmp	r3, #255	; 0xff
 8003528:	d801      	bhi.n	800352e <HAL_GPIO_Init+0x13a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	e001      	b.n	8003532 <HAL_GPIO_Init+0x13e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2bff      	cmp	r3, #255	; 0xff
 8003538:	d802      	bhi.n	8003540 <HAL_GPIO_Init+0x14c>
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	e002      	b.n	8003546 <HAL_GPIO_Init+0x152>
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	3b08      	subs	r3, #8
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	210f      	movs	r1, #15
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	431a      	orrs	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80b1 	beq.w	80036d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003574:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_GPIO_Init+0x2b8>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <HAL_GPIO_Init+0x2b8>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_GPIO_Init+0x2b8>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800358c:	4a48      	ldr	r2, [pc, #288]	; (80036b0 <HAL_GPIO_Init+0x2bc>)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a40      	ldr	r2, [pc, #256]	; (80036b4 <HAL_GPIO_Init+0x2c0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_GPIO_Init+0x1ec>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3f      	ldr	r2, [pc, #252]	; (80036b8 <HAL_GPIO_Init+0x2c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00d      	beq.n	80035dc <HAL_GPIO_Init+0x1e8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <HAL_GPIO_Init+0x2c8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <HAL_GPIO_Init+0x2cc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_GPIO_Init+0x1e0>
 80035d0:	2303      	movs	r3, #3
 80035d2:	e006      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035d4:	2304      	movs	r3, #4
 80035d6:	e004      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035d8:	2302      	movs	r3, #2
 80035da:	e002      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035e0:	2300      	movs	r3, #0
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	f002 0203 	and.w	r2, r2, #3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	4093      	lsls	r3, r2
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035f2:	492f      	ldr	r1, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x2bc>)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	492c      	ldr	r1, [pc, #176]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	43db      	mvns	r3, r3
 8003622:	4928      	ldr	r1, [pc, #160]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003624:	4013      	ands	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4922      	ldr	r1, [pc, #136]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	43db      	mvns	r3, r3
 800364a:	491e      	ldr	r1, [pc, #120]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800364c:	4013      	ands	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	4918      	ldr	r1, [pc, #96]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	43db      	mvns	r3, r3
 8003672:	4914      	ldr	r1, [pc, #80]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003674:	4013      	ands	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_GPIO_Init+0x2d0>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
 8003690:	e021      	b.n	80036d6 <HAL_GPIO_Init+0x2e2>
 8003692:	bf00      	nop
 8003694:	10320000 	.word	0x10320000
 8003698:	10310000 	.word	0x10310000
 800369c:	10220000 	.word	0x10220000
 80036a0:	10210000 	.word	0x10210000
 80036a4:	10120000 	.word	0x10120000
 80036a8:	10110000 	.word	0x10110000
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40010800 	.word	0x40010800
 80036b8:	40010c00 	.word	0x40010c00
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_GPIO_Init+0x304>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4909      	ldr	r1, [pc, #36]	; (80036f8 <HAL_GPIO_Init+0x304>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f47f ae8e 	bne.w	8003408 <HAL_GPIO_Init+0x14>
  }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	372c      	adds	r7, #44	; 0x2c
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40010400 	.word	0x40010400

080036fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e001      	b.n	800371e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	807b      	strh	r3, [r7, #2]
 8003736:	4613      	mov	r3, r2
 8003738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800373a:	787b      	ldrb	r3, [r7, #1]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003746:	e003      	b.n	8003750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	041a      	lsls	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
	...

0800375c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e26c      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8087 	beq.w	800388a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800377c:	4b92      	ldr	r3, [pc, #584]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003788:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x5e>
 8003794:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a2:	4b89      	ldr	r3, [pc, #548]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d06c      	beq.n	8003888 <HAL_RCC_OscConfig+0x12c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d168      	bne.n	8003888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e246      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x76>
 80037c4:	4b80      	ldr	r3, [pc, #512]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7f      	ldr	r2, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e02e      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x98>
 80037da:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b78      	ldr	r3, [pc, #480]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0xbc>
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a71      	ldr	r2, [pc, #452]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6e      	ldr	r2, [pc, #440]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xd4>
 8003818:	4b6b      	ldr	r3, [pc, #428]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff f9b4 	bl	8002ba4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7ff f9b0 	bl	8002ba4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1fa      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xe4>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7ff f9a0 	bl	8002ba4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7ff f99c 	bl	8002ba4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1e6      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x10c>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x18c>
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x176>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1ba      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4939      	ldr	r1, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x270>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7ff f955 	bl	8002ba4 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7ff f951 	bl	8002ba4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e19b      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4927      	ldr	r1, [pc, #156]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x270>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7ff f934 	bl	8002ba4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7ff f930 	bl	8002ba4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e17a      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03a      	beq.n	80039e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d019      	beq.n	80039a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7ff f914 	bl	8002ba4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003980:	f7ff f910 	bl	8002ba4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e15a      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_RCC_OscConfig+0x26c>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800399e:	2001      	movs	r0, #1
 80039a0:	f000 fad8 	bl	8003f54 <RCC_Delay>
 80039a4:	e01c      	b.n	80039e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7ff f8fa 	bl	8002ba4 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b2:	e00f      	b.n	80039d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7ff f8f6 	bl	8002ba4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d908      	bls.n	80039d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e140      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	42420000 	.word	0x42420000
 80039d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b9e      	ldr	r3, [pc, #632]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e9      	bne.n	80039b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a6 	beq.w	8003b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b97      	ldr	r3, [pc, #604]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a93      	ldr	r2, [pc, #588]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b8e      	ldr	r3, [pc, #568]	; (8003c54 <HAL_RCC_OscConfig+0x4f8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d118      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a26:	4b8b      	ldr	r3, [pc, #556]	; (8003c54 <HAL_RCC_OscConfig+0x4f8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a8a      	ldr	r2, [pc, #552]	; (8003c54 <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a32:	f7ff f8b7 	bl	8002ba4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7ff f8b3 	bl	8002ba4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0fd      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCC_OscConfig+0x4f8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x312>
 8003a60:	4b7b      	ldr	r3, [pc, #492]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a7a      	ldr	r2, [pc, #488]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x334>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	4b73      	ldr	r3, [pc, #460]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a72      	ldr	r2, [pc, #456]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	6213      	str	r3, [r2, #32]
 8003a8e:	e01c      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d10c      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x356>
 8003a98:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a69      	ldr	r2, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	e00b      	b.n	8003aca <HAL_RCC_OscConfig+0x36e>
 8003ab2:	4b67      	ldr	r3, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a66      	ldr	r2, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	4b64      	ldr	r3, [pc, #400]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a63      	ldr	r2, [pc, #396]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d015      	beq.n	8003afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7ff f867 	bl	8002ba4 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7ff f863 	bl	8002ba4 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0ab      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ee      	beq.n	8003ada <HAL_RCC_OscConfig+0x37e>
 8003afc:	e014      	b.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afe:	f7ff f851 	bl	8002ba4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7ff f84d 	bl	8002ba4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e095      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4a47      	ldr	r2, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8081 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b44:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d061      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d146      	bne.n	8003be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0x4fc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7ff f821 	bl	8002ba4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b66:	f7ff f81d 	bl	8002ba4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e067      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b78:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	492d      	ldr	r1, [pc, #180]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a19      	ldr	r1, [r3, #32]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	4927      	ldr	r1, [pc, #156]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_RCC_OscConfig+0x4fc>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fff1 	bl	8002ba4 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fe ffed 	bl	8002ba4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e037      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x46a>
 8003be4:	e02f      	b.n	8003c46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <HAL_RCC_OscConfig+0x4fc>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe ffda 	bl	8002ba4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe ffd6 	bl	8002ba4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e020      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x498>
 8003c12:	e018      	b.n	8003c46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42420060 	.word	0x42420060

08003c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0d0      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b6a      	ldr	r3, [pc, #424]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d910      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 0207 	bic.w	r2, r3, #7
 8003c86:	4965      	ldr	r1, [pc, #404]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0b8      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	494d      	ldr	r1, [pc, #308]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d040      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d115      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e073      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e06b      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4936      	ldr	r1, [pc, #216]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fe ff2a 	bl	8002ba4 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe ff26 	bl	8002ba4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e053      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d210      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 0207 	bic.w	r2, r3, #7
 8003d92:	4922      	ldr	r1, [pc, #136]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4916      	ldr	r1, [pc, #88]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490e      	ldr	r1, [pc, #56]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dea:	f000 f821 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	490a      	ldr	r1, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x1c8>)
 8003dfc:	5ccb      	ldrb	r3, [r1, r3]
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1cc>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1d0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fe88 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08009208 	.word	0x08009208
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	20000004 	.word	0x20000004

08003e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	b490      	push	{r4, r7}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e38:	1d3c      	adds	r4, r7, #4
 8003e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e40:	f240 2301 	movw	r3, #513	; 0x201
 8003e44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x46>
 8003e6e:	e02d      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e72:	623b      	str	r3, [r7, #32]
      break;
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	0c9b      	lsrs	r3, r3, #18
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e82:	4413      	add	r3, r2
 8003e84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c5b      	lsrs	r3, r3, #17
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ea8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eae:	fb02 f203 	mul.w	r2, r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	e004      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ece:	623b      	str	r3, [r7, #32]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3728      	adds	r7, #40	; 0x28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc90      	pop	{r4, r7}
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	080091f8 	.word	0x080091f8
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	007a1200 	.word	0x007a1200
 8003eec:	003d0900 	.word	0x003d0900

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000000 	.word	0x20000000

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff2 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	08009218 	.word	0x08009218

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffde 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0adb      	lsrs	r3, r3, #11
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08009218 	.word	0x08009218

08003f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <RCC_Delay+0x34>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <RCC_Delay+0x38>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0a5b      	lsrs	r3, r3, #9
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f70:	bf00      	nop
  }
  while (Delay --);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e5a      	subs	r2, r3, #1
 8003f76:	60fa      	str	r2, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f9      	bne.n	8003f70 <RCC_Delay+0x1c>
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3

08003f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e076      	b.n	8004090 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb2:	d009      	beq.n	8003fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
 8003fba:	e005      	b.n	8003fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd f9e2 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	ea42 0103 	orr.w	r1, r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	0c1a      	lsrs	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f002 0204 	and.w	r2, r2, #4
 800406e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040a6:	2301      	movs	r3, #1
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_SPI_TransmitReceive+0x26>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e18a      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x33c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c6:	f7fe fd6d 	bl	8002ba4 <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d00f      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x70>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d107      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x68>
 80040f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d003      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004106:	e15b      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_SPI_TransmitReceive+0x82>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_TransmitReceive+0x82>
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004120:	e14e      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b04      	cmp	r3, #4
 800412c:	d003      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2205      	movs	r2, #5
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	887a      	ldrh	r2, [r7, #2]
 8004146:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d007      	beq.n	800418a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d178      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x10a>
 800419c:	8b7b      	ldrh	r3, [r7, #26]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d166      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c6:	e053      	b.n	8004270 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d11b      	bne.n	800420e <HAL_SPI_TransmitReceive+0x176>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d016      	beq.n	800420e <HAL_SPI_TransmitReceive+0x176>
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d113      	bne.n	800420e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d119      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x1b8>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d014      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	b292      	uxth	r2, r2
 8004232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004250:	f7fe fca8 	bl	8002ba4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425c:	429a      	cmp	r2, r3
 800425e:	d807      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x1d8>
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d003      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800426e:	e0a7      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1a6      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x130>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1a1      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x130>
 8004284:	e07c      	b.n	8004380 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x1fc>
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d16b      	bne.n	800436c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ba:	e057      	b.n	800436c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d11c      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x26c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x26c>
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d114      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d119      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x2ae>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d014      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004342:	2301      	movs	r3, #1
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004346:	f7fe fc2d 	bl	8002ba4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004352:	429a      	cmp	r2, r3
 8004354:	d803      	bhi.n	800435e <HAL_SPI_TransmitReceive+0x2c6>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d102      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x2cc>
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800436a:	e029      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1a2      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x224>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d19d      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f8b1 	bl	80044ec <SPI_EndRxTxTransaction>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800439c:	e010      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	e000      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3730      	adds	r7, #48	; 0x30
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043ec:	f7fe fbda 	bl	8002ba4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043fc:	f7fe fbd2 	bl	8002ba4 <HAL_GetTick>
 8004400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004402:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	015b      	lsls	r3, r3, #5
 8004408:	0d1b      	lsrs	r3, r3, #20
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004412:	e054      	b.n	80044be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d050      	beq.n	80044be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800441c:	f7fe fbc2 	bl	8002ba4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	429a      	cmp	r2, r3
 800442a:	d902      	bls.n	8004432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d13d      	bne.n	80044ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d111      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004454:	d004      	beq.n	8004460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d107      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d10f      	bne.n	800449a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e017      	b.n	80044de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d19b      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000000 	.word	0x20000000

080044ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff6a 	bl	80043dc <SPI_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e000      	b.n	8004520 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e03a      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_TIM_Base_Start_IT+0x98>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x58>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d009      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x58>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x58>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d010      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	e007      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800

080045cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc ff90 	bl	8001518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 f98e 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e093      	b.n	80047a6 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc ff00 	bl	8001498 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 f934 	bl	800492c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	f023 0303 	bic.w	r3, r3, #3
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	4313      	orrs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800470a:	f023 030c 	bic.w	r3, r3, #12
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	4313      	orrs	r3, r2
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	011a      	lsls	r2, r3, #4
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	031b      	lsls	r3, r3, #12
 800473a:	4313      	orrs	r3, r2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004748:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4313      	orrs	r3, r2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ac      	b.n	8004924 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	f200 809f 	bhi.w	8004918 <HAL_TIM_PWM_ConfigChannel+0x168>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004919 	.word	0x08004919
 80047e8:	08004919 	.word	0x08004919
 80047ec:	08004919 	.word	0x08004919
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004919 	.word	0x08004919
 80047f8:	08004919 	.word	0x08004919
 80047fc:	08004919 	.word	0x08004919
 8004800:	08004897 	.word	0x08004897
 8004804:	08004919 	.word	0x08004919
 8004808:	08004919 	.word	0x08004919
 800480c:	08004919 	.word	0x08004919
 8004810:	080048d7 	.word	0x080048d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f8e8 	bl	80049f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
      break;
 8004852:	e062      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f92e 	bl	8004abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e041      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f977 	bl	8004b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0208 	orr.w	r2, r2, #8
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
      break;
 80048d4:	e021      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f9c1 	bl	8004c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	61da      	str	r2, [r3, #28]
      break;
 8004916:	e000      	b.n	800491a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <TIM_Base_SetConfig+0xbc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a25      	ldr	r2, [pc, #148]	; (80049ec <TIM_Base_SetConfig+0xc0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_Base_SetConfig+0xbc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_Base_SetConfig+0xc0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d108      	bne.n	80049a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800

080049f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0302 	bic.w	r3, r3, #2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <TIM_OC1_SetConfig+0xc8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d10c      	bne.n	8004a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0308 	bic.w	r3, r3, #8
 8004a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 0304 	bic.w	r3, r3, #4
 8004a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <TIM_OC1_SetConfig+0xc8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d111      	bne.n	8004a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00

08004abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0210 	bic.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0320 	bic.w	r3, r3, #32
 8004b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <TIM_OC2_SetConfig+0xd0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <TIM_OC2_SetConfig+0xd0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d113      	bne.n	8004b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00

08004b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <TIM_OC3_SetConfig+0xd0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <TIM_OC3_SetConfig+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d113      	bne.n	8004c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00

08004c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0f      	ldr	r2, [pc, #60]	; (8004cfc <TIM_OC4_SetConfig+0x98>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	40012c00 	.word	0x40012c00

08004d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e046      	b.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d009      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10c      	bne.n	8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800

08004dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e03f      	b.n	8004e4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc fc02 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f829 	bl	8004e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e92:	f023 030c 	bic.w	r3, r3, #12
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <UART_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d103      	bne.n	8004ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7ff f834 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	e002      	b.n	8004ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7ff f81c 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <UART_SetConfig+0x118>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	0119      	lsls	r1, r3, #4
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <UART_SetConfig+0x118>)
 8004f06:	fba3 0302 	umull	r0, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2064      	movs	r0, #100	; 0x64
 8004f0e:	fb00 f303 	mul.w	r3, r0, r3
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	; 0x32
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <UART_SetConfig+0x118>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f24:	4419      	add	r1, r3
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009a      	lsls	r2, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <UART_SetConfig+0x118>)
 8004f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2064      	movs	r0, #100	; 0x64
 8004f46:	fb00 f303 	mul.w	r3, r0, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <UART_SetConfig+0x118>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	440a      	add	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	51eb851f 	.word	0x51eb851f

08004f74 <Stockpile_Flash_Data_Empty>:
  * @brief  Flash数据清空
  * @param  stockpile	Flash分区表实例
  * @retval NULL
**/
void Stockpile_Flash_Data_Empty(Stockpile_FLASH_Typedef *stockpile)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	uint32_t count;
	HAL_FLASH_Unlock();	//LL_FLASH_Unlock();
 8004f7c:	f7fe f8aa 	bl	80030d4 <HAL_FLASH_Unlock>
	for(count = 0; count < stockpile->page_num; count++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e01e      	b.n	8004fc4 <Stockpile_Flash_Data_Empty+0x50>
	{
		FLASH_EraseInitTypeDef erase_config;
		uint32_t page_error;
		erase_config.TypeErase   = FLASH_TYPEERASE_PAGES;																	//页擦除		
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
		erase_config.PageAddress = stockpile->begin_add + (count * Stockpile_Page_Size);	//页起始地址
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4413      	add	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
		erase_config.NbPages     = 1;																											//擦除页数量
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
		HAL_FLASHEx_Erase(&erase_config, &page_error);
 8004f9a:	f107 0208 	add.w	r2, r7, #8
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe f97d 	bl	80032a4 <HAL_FLASHEx_Erase>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004faa:	f04f 30ff 	mov.w	r0, #4294967295
 8004fae:	f7fe f8e3 	bl	8003178 <FLASH_WaitForLastOperation>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <Stockpile_Flash_Data_Empty+0x68>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <Stockpile_Flash_Data_Empty+0x68>)
 8004fb8:	f023 0302 	bic.w	r3, r3, #2
 8004fbc:	6113      	str	r3, [r2, #16]
	for(count = 0; count < stockpile->page_num; count++)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d3db      	bcc.n	8004f86 <Stockpile_Flash_Data_Empty+0x12>
	}
	HAL_FLASH_Lock();	//LL_FLASH_Lock();
 8004fce:	f7fe f8a7 	bl	8003120 <HAL_FLASH_Lock>
}
 8004fd2:	bf00      	nop
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000

08004fe0 <Stockpile_Flash_Data_Begin>:
  * @brief  Flash数据开始写入
  * @param  stockpile	Flash分区表实例
  * @retval NULL
**/
void Stockpile_Flash_Data_Begin(Stockpile_FLASH_Typedef *stockpile)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();	//LL_FLASH_Unlock();
 8004fe8:	f7fe f874 	bl	80030d4 <HAL_FLASH_Unlock>
	stockpile->asce_write_add = stockpile->begin_add;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <Stockpile_Flash_Data_End>:
  * @brief  Flash数据结束写入
  * @param  stockpile	Flash分区表实例
  * @retval NULL
**/
void Stockpile_Flash_Data_End(Stockpile_FLASH_Typedef *stockpile)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Lock();	//LL_FLASH_Lock();
 8005004:	f7fe f88c 	bl	8003120 <HAL_FLASH_Lock>
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <Stockpile_Flash_Data_Write_Data16>:
  * @param  data		半字数据缓冲区
  * @param  num			半字数量
  * @retval NULL
**/
void Stockpile_Flash_Data_Write_Data16(Stockpile_FLASH_Typedef *stockpile, uint16_t *data, uint32_t num)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
	if(stockpile->asce_write_add < stockpile->begin_add)									return;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d32b      	bcc.n	8005080 <Stockpile_Flash_Data_Write_Data16+0x70>
	if((stockpile->asce_write_add + num * 2) > stockpile->begin_add + stockpile->area_size)	return;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	441a      	add	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	440b      	add	r3, r1
 800503c:	429a      	cmp	r2, r3
 800503e:	d821      	bhi.n	8005084 <Stockpile_Flash_Data_Write_Data16+0x74>
	
	for(uint32_t i=0; i<num; i++)
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e017      	b.n	8005076 <Stockpile_Flash_Data_Write_Data16+0x66>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, stockpile->asce_write_add, (uint64_t)data[i]) == HAL_OK)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68d9      	ldr	r1, [r3, #12]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	2001      	movs	r0, #1
 800505c:	f7fd ffca 	bl	8002ff4 <HAL_FLASH_Program>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <Stockpile_Flash_Data_Write_Data16+0x60>
			stockpile->asce_write_add += 2;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	60da      	str	r2, [r3, #12]
	for(uint32_t i=0; i<num; i++)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3e3      	bcc.n	8005046 <Stockpile_Flash_Data_Write_Data16+0x36>
 800507e:	e002      	b.n	8005086 <Stockpile_Flash_Data_Write_Data16+0x76>
	if(stockpile->asce_write_add < stockpile->begin_add)									return;
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <Stockpile_Flash_Data_Write_Data16+0x76>
	if((stockpile->asce_write_add + num * 2) > stockpile->begin_add + stockpile->area_size)	return;
 8005084:	bf00      	nop
	}
}
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <_ZN6Button15ReadButtonPinIOEh>:
#include "button_stm32.h"
#include <gpio.h>

bool Button::ReadButtonPinIO(uint8_t _id)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
    switch (_id)
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d002      	beq.n	80050a4 <_ZN6Button15ReadButtonPinIOEh+0x18>
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d00c      	beq.n	80050bc <_ZN6Button15ReadButtonPinIOEh+0x30>
 80050a2:	e016      	b.n	80050d2 <_ZN6Button15ReadButtonPinIOEh+0x46>
    {
        case 1:
            return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET;
 80050a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050a8:	480c      	ldr	r0, [pc, #48]	; (80050dc <_ZN6Button15ReadButtonPinIOEh+0x50>)
 80050aa:	f7fe fb27 	bl	80036fc <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e00b      	b.n	80050d4 <_ZN6Button15ReadButtonPinIOEh+0x48>
        case 2:
            return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET;
 80050bc:	2104      	movs	r1, #4
 80050be:	4807      	ldr	r0, [pc, #28]	; (80050dc <_ZN6Button15ReadButtonPinIOEh+0x50>)
 80050c0:	f7fe fb1c 	bl	80036fc <HAL_GPIO_ReadPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e000      	b.n	80050d4 <_ZN6Button15ReadButtonPinIOEh+0x48>
        default:
            return false;
 80050d2:	2300      	movs	r3, #0
    }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40010c00 	.word	0x40010c00

080050e0 <_ZN17EncoderCalibrator15BeginWriteFlashEv>:
#include "encoder_calibrator_stm32.h"
#include "Platform/Memory/stockpile_f103cb.h"

void EncoderCalibrator::BeginWriteFlash()
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    Stockpile_Flash_Data_Begin(&stockpile_quick_cali);
 80050e8:	4803      	ldr	r0, [pc, #12]	; (80050f8 <_ZN17EncoderCalibrator15BeginWriteFlashEv+0x18>)
 80050ea:	f7ff ff79 	bl	8004fe0 <Stockpile_Flash_Data_Begin>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000000c 	.word	0x2000000c

080050fc <_ZN17EncoderCalibrator13EndWriteFlashEv>:


void EncoderCalibrator::EndWriteFlash()
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    Stockpile_Flash_Data_End(&stockpile_quick_cali);
 8005104:	4803      	ldr	r0, [pc, #12]	; (8005114 <_ZN17EncoderCalibrator13EndWriteFlashEv+0x18>)
 8005106:	f7ff ff79 	bl	8004ffc <Stockpile_Flash_Data_End>
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c

08005118 <_ZN17EncoderCalibrator10ClearFlashEv>:


void EncoderCalibrator::ClearFlash()
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    Stockpile_Flash_Data_Empty(&stockpile_quick_cali);
 8005120:	4803      	ldr	r0, [pc, #12]	; (8005130 <_ZN17EncoderCalibrator10ClearFlashEv+0x18>)
 8005122:	f7ff ff27 	bl	8004f74 <Stockpile_Flash_Data_Empty>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000000c 	.word	0x2000000c

08005134 <_ZN17EncoderCalibrator22WriteFlash16bitsAppendEt>:


void EncoderCalibrator::WriteFlash16bitsAppend(uint16_t _data)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
    Stockpile_Flash_Data_Write_Data16(&stockpile_quick_cali, &_data, 1);
 8005140:	1cbb      	adds	r3, r7, #2
 8005142:	2201      	movs	r2, #1
 8005144:	4619      	mov	r1, r3
 8005146:	4803      	ldr	r0, [pc, #12]	; (8005154 <_ZN17EncoderCalibrator22WriteFlash16bitsAppendEt+0x20>)
 8005148:	f7ff ff62 	bl	8005010 <Stockpile_Flash_Data_Write_Data16>
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000000c 	.word	0x2000000c

08005158 <_ZN6MT68167SpiInitEv>:
#include "mt6816_stm32.h"
#include "spi.h"

void MT6816::SpiInit()
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
    MX_SPI1_Init();
 8005160:	f7fc f85c 	bl	800121c <MX_SPI1_Init>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN6MT681624SpiTransmitAndRead16BitsEt>:

uint16_t MT6816::SpiTransmitAndRead16Bits(uint16_t _dataTx)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	807b      	strh	r3, [r7, #2]
    uint16_t dataRx;

    GPIOA->BRR = GPIO_PIN_15; // Chip select
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x3c>)
 800517a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800517e:	615a      	str	r2, [r3, #20]
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &_dataTx, (uint8_t*) &dataRx, 1, HAL_MAX_DELAY);
 8005180:	f107 020e 	add.w	r2, r7, #14
 8005184:	1cb9      	adds	r1, r7, #2
 8005186:	f04f 33ff 	mov.w	r3, #4294967295
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2301      	movs	r3, #1
 800518e:	4807      	ldr	r0, [pc, #28]	; (80051ac <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x40>)
 8005190:	f7fe ff82 	bl	8004098 <HAL_SPI_TransmitReceive>
    GPIOA->BSRR = GPIO_PIN_15;
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <_ZN6MT681624SpiTransmitAndRead16BitsEt+0x3c>)
 8005196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800519a:	611a      	str	r2, [r3, #16]

    return dataRx;
 800519c:	89fb      	ldrh	r3, [r7, #14]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40010800 	.word	0x40010800
 80051ac:	20000844 	.word	0x20000844

080051b0 <_ZN8TB67H4508InitGpioEv>:
#include "tb67h450_stm32.h"
#include "gpio.h"
#include "time.h"

void TB67H450::InitGpio()
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b8:	f107 0310 	add.w	r3, r7, #16
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	60da      	str	r2, [r3, #12]

    /* Signal Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	4a19      	ldr	r2, [pc, #100]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	6193      	str	r3, [r2, #24]
 80051d2:	4b17      	ldr	r3, [pc, #92]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051de:	4b14      	ldr	r3, [pc, #80]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	6193      	str	r3, [r2, #24]
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <_ZN8TB67H4508InitGpioEv+0x80>)
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin, GPIO_PIN_RESET);
 80051f6:	2200      	movs	r2, #0
 80051f8:	213c      	movs	r1, #60	; 0x3c
 80051fa:	480e      	ldr	r0, [pc, #56]	; (8005234 <_ZN8TB67H4508InitGpioEv+0x84>)
 80051fc:	f7fe fa95 	bl	800372a <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, IN_PWM_B_Pin|IN_PWM_A_Pin, GPIO_PIN_RESET);
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005206:	480c      	ldr	r0, [pc, #48]	; (8005238 <_ZN8TB67H4508InitGpioEv+0x88>)
 8005208:	f7fe fa8f 	bl	800372a <HAL_GPIO_WritePin>

    /*Configure GPIO pins : IN_BM_Pin IN_BP_Pin IN_AM_Pin IN_AP_Pin */
    GPIO_InitStruct.Pin = IN_BM_Pin|IN_BP_Pin|IN_AM_Pin|IN_AP_Pin;
 800520c:	233c      	movs	r3, #60	; 0x3c
 800520e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005218:	2302      	movs	r3, #2
 800521a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521c:	f107 0310 	add.w	r3, r7, #16
 8005220:	4619      	mov	r1, r3
 8005222:	4804      	ldr	r0, [pc, #16]	; (8005234 <_ZN8TB67H4508InitGpioEv+0x84>)
 8005224:	f7fe f8e6 	bl	80033f4 <HAL_GPIO_Init>

}
 8005228:	bf00      	nop
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	40010800 	.word	0x40010800
 8005238:	40010c00 	.word	0x40010c00

0800523c <_ZN8TB67H4507InitPwmEv>:


void TB67H450::InitPwm()
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
    MX_TIM1_Init();
 8005244:	f7fc fb1a 	bl	800187c <MX_TIM1_Init>
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZN8TB67H45016DacOutputVoltageEtt>:


void TB67H450::DacOutputVoltage(uint16_t _voltageA_3300mVIn12bits, uint16_t _voltageB_3300mVIn12bits)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
 800525c:	4613      	mov	r3, r2
 800525e:	803b      	strh	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, _voltageA_3300mVIn12bits >> 2);
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	109a      	asrs	r2, r3, #2
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <_ZN8TB67H45016DacOutputVoltageEtt+0x30>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, _voltageB_3300mVIn12bits >> 2);
 800526a:	883b      	ldrh	r3, [r7, #0]
 800526c:	109a      	asrs	r2, r3, #2
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <_ZN8TB67H45016DacOutputVoltageEtt+0x30>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	200008e4 	.word	0x200008e4

08005284 <_ZN8TB67H4509SetInputAEbb>:


void TB67H450::SetInputA(bool _statusAp, bool _statusAm)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
 8005290:	4613      	mov	r3, r2
 8005292:	70bb      	strb	r3, [r7, #2]
    _statusAp ? (GPIOA->BSRR = GPIO_PIN_5) : (GPIOA->BRR = GPIO_PIN_5);
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <_ZN8TB67H4509SetInputAEbb+0x1e>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <_ZN8TB67H4509SetInputAEbb+0x44>)
 800529c:	2220      	movs	r2, #32
 800529e:	611a      	str	r2, [r3, #16]
 80052a0:	e002      	b.n	80052a8 <_ZN8TB67H4509SetInputAEbb+0x24>
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <_ZN8TB67H4509SetInputAEbb+0x44>)
 80052a4:	2220      	movs	r2, #32
 80052a6:	615a      	str	r2, [r3, #20]
    _statusAm ? (GPIOA->BSRR = GPIO_PIN_4) : (GPIOA->BRR = GPIO_PIN_4);
 80052a8:	78bb      	ldrb	r3, [r7, #2]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <_ZN8TB67H4509SetInputAEbb+0x32>
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <_ZN8TB67H4509SetInputAEbb+0x44>)
 80052b0:	2210      	movs	r2, #16
 80052b2:	611a      	str	r2, [r3, #16]
}
 80052b4:	e002      	b.n	80052bc <_ZN8TB67H4509SetInputAEbb+0x38>
    _statusAm ? (GPIOA->BSRR = GPIO_PIN_4) : (GPIOA->BRR = GPIO_PIN_4);
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <_ZN8TB67H4509SetInputAEbb+0x44>)
 80052b8:	2210      	movs	r2, #16
 80052ba:	615a      	str	r2, [r3, #20]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010800 	.word	0x40010800

080052cc <_ZN8TB67H4509SetInputBEbb>:


void TB67H450::SetInputB(bool _statusBp, bool _statusBm)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
 80052d8:	4613      	mov	r3, r2
 80052da:	70bb      	strb	r3, [r7, #2]
    _statusBp ? (GPIOA->BSRR = GPIO_PIN_3) : (GPIOA->BRR = GPIO_PIN_3);
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <_ZN8TB67H4509SetInputBEbb+0x1e>
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <_ZN8TB67H4509SetInputBEbb+0x44>)
 80052e4:	2208      	movs	r2, #8
 80052e6:	611a      	str	r2, [r3, #16]
 80052e8:	e002      	b.n	80052f0 <_ZN8TB67H4509SetInputBEbb+0x24>
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <_ZN8TB67H4509SetInputBEbb+0x44>)
 80052ec:	2208      	movs	r2, #8
 80052ee:	615a      	str	r2, [r3, #20]
    _statusBm ? (GPIOA->BSRR = GPIO_PIN_2) : (GPIOA->BRR = GPIO_PIN_2);
 80052f0:	78bb      	ldrb	r3, [r7, #2]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <_ZN8TB67H4509SetInputBEbb+0x32>
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <_ZN8TB67H4509SetInputBEbb+0x44>)
 80052f8:	2204      	movs	r2, #4
 80052fa:	611a      	str	r2, [r3, #16]
}
 80052fc:	e002      	b.n	8005304 <_ZN8TB67H4509SetInputBEbb+0x38>
    _statusBm ? (GPIOA->BSRR = GPIO_PIN_2) : (GPIOA->BRR = GPIO_PIN_2);
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <_ZN8TB67H4509SetInputBEbb+0x44>)
 8005300:	2204      	movs	r2, #4
 8005302:	615a      	str	r2, [r3, #20]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010800 	.word	0x40010800

08005314 <_ZN13MotionPlanner14CurrentTrackerC1EPS_>:
    };

    class CurrentTracker
    {
    public:
        explicit CurrentTracker(MotionPlanner* _context) :
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
            context(_context)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
        {
        }
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <_ZN13MotionPlanner15VelocityTrackerC1EPS_>:
    CurrentTracker currentTracker = CurrentTracker(this);

    class VelocityTracker
    {
    public:
        explicit VelocityTracker(MotionPlanner* _context) :
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
            context(_context)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
        {
        }
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <_ZN13MotionPlanner15PositionTrackerC1EPS_>:
    VelocityTracker velocityTracker = VelocityTracker(this);

    class PositionTracker
    {
    public:
        explicit PositionTracker(MotionPlanner* _context) :
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
            context(_context)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	611a      	str	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	61da      	str	r2, [r3, #28]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	621a      	str	r2, [r3, #32]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
        {
        }
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <_ZN13MotionPlanner20PositionInterpolatorC1EPS_>:
    PositionTracker positionTracker = PositionTracker(this);

    class PositionInterpolator
    {
    public:
        explicit PositionInterpolator(MotionPlanner* _context) :
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
            context(_context)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	619a      	str	r2, [r3, #24]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	61da      	str	r2, [r3, #28]
        {
        }
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <_ZN13MotionPlanner17TrajectoryTrackerC1EPS_>:
    PositionInterpolator positionInterpolator = PositionInterpolator(this);

    class TrajectoryTracker
    {
    public:
        explicit TrajectoryTracker(MotionPlanner* _context) :
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
            context(_context)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	22c8      	movs	r2, #200	; 0xc8
 800544e:	619a      	str	r2, [r3, #24]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	771a      	strb	r2, [r3, #28]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	621a      	str	r2, [r3, #32]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	635a      	str	r2, [r3, #52]	; 0x34
        {
        }
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <_ZN5Motor8Config_tC1Ev>:

        static int32_t CompensateAdvancedAngle(int32_t _vel);
    };


    struct Config_t
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	6053      	str	r3, [r2, #4]
 8005498:	6093      	str	r3, [r2, #8]
 800549a:	60d3      	str	r3, [r2, #12]
 800549c:	6113      	str	r3, [r2, #16]
 800549e:	6153      	str	r3, [r2, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3318      	adds	r3, #24
 80054a4:	2264      	movs	r2, #100	; 0x64
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fbd9 	bl	8005c60 <memset>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <_ZN13MotionPlannerC1Ev>:
    MotionPlanner() = default;
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a15      	ldr	r2, [pc, #84]	; (8005524 <_ZN13MotionPlannerC1Ev+0x6c>)
 80054ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3308      	adds	r3, #8
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff ff19 	bl	8005314 <_ZN13MotionPlanner14CurrentTrackerC1EPS_>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	331c      	adds	r3, #28
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ff2d 	bl	8005348 <_ZN13MotionPlanner15VelocityTrackerC1EPS_>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3330      	adds	r3, #48	; 0x30
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff41 	bl	800537c <_ZN13MotionPlanner15PositionTrackerC1EPS_>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	335c      	adds	r3, #92	; 0x5c
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff68 	bl	80053d6 <_ZN13MotionPlanner20PositionInterpolatorC1EPS_>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	337c      	adds	r3, #124	; 0x7c
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff85 	bl	800541c <_ZN13MotionPlanner17TrajectoryTrackerC1EPS_>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	000f4240 	.word	0x000f4240

08005528 <_ZN5MotorC1Ev>:
    Motor() :
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
        controller(&controllerInstance)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	22c8      	movs	r2, #200	; 0xc8
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6852      	ldr	r2, [r2, #4]
 8005546:	fb02 f203 	mul.w	r2, r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	330c      	adds	r3, #12
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ff97 	bl	8005486 <_ZN5Motor8Config_tC1Ev>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3388      	adds	r3, #136	; 0x88
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ffab 	bl	80054b8 <_ZN13MotionPlannerC1Ev>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f85c 	bl	8005644 <_ZN5Motor10ControllerC1EPS_>
        config.motionParams.encoderHomeOffset = 0;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
        config.motionParams.caliCurrent = 2000;             // (mA)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005598:	611a      	str	r2, [r3, #16]
        config.motionParams.ratedCurrent = 1000;            // (mA)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a0:	615a      	str	r2, [r3, #20]
        config.motionParams.ratedCurrentAcc = 2 * 1000;     // (mA/s)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80055a8:	621a      	str	r2, [r3, #32]
        config.motionParams.ratedVelocity = 30 * MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	619a      	str	r2, [r3, #24]
        config.motionParams.ratedVelocityAcc = 1000 * MOTOR_ONE_CIRCLE_SUBDIVIDE_STEPS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c4:	fb02 f203 	mul.w	r2, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	61da      	str	r2, [r3, #28]
        config.ctrlParams.stallProtectSwitch = false;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
        config.ctrlParams.pid =
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3324      	adds	r3, #36	; 0x24
 80055d8:	2230      	movs	r2, #48	; 0x30
 80055da:	2100      	movs	r1, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fb3f 	bl	8005c60 <memset>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2205      	movs	r2, #5
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	221e      	movs	r2, #30
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c
        config.ctrlParams.dce =
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3354      	adds	r3, #84	; 0x54
 80055f2:	2230      	movs	r2, #48	; 0x30
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fb32 	bl	8005c60 <memset>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	22c8      	movs	r2, #200	; 0xc8
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2250      	movs	r2, #80	; 0x50
 8005606:	659a      	str	r2, [r3, #88]	; 0x58
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800560e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	22fa      	movs	r2, #250	; 0xfa
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
        motionPlanner.AttachConfig(&config.motionParams);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	330c      	adds	r3, #12
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f7fc fc17 	bl	8001e56 <_ZN13MotionPlanner12AttachConfigEPNS_8Config_tE>
        controller->AttachConfig(&config.ctrlParams);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fc fd67 	bl	8002108 <_ZN5Motor10Controller12AttachConfigEPNS0_8Config_tE>
    }
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZN5Motor10ControllerC1EPS_>:
        explicit Controller(Motor* _context)
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
        {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	719a      	strb	r2, [r3, #6]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	71da      	strb	r2, [r3, #7]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	615a      	str	r2, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	61da      	str	r2, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	621a      	str	r2, [r3, #32]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	649a      	str	r2, [r3, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	659a      	str	r2, [r3, #88]	; 0x58
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            context = _context;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	609a      	str	r2, [r3, #8]
            requestMode = MODE_STOP;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	711a      	strb	r2, [r3, #4]
            modeRunning = MODE_STOP;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	715a      	strb	r2, [r3, #5]
        }
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <_ZN11EncoderBaseC1Ev>:
#define CTRL_STEP_FW_ENCODER_H

#include <cstdint>


class EncoderBase
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	4a08      	ldr	r2, [pc, #32]	; (800574c <_ZN11EncoderBaseC1Ev+0x2c>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	809a      	strh	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	08009b28 	.word	0x08009b28

08005750 <_ZN10MT6816BaseC1EPt>:
#include <cstdint>

class MT6816Base : public EncoderBase
{
public:
    explicit MT6816Base(uint16_t* _quickCaliDataPtr) :
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
        quickCaliDataPtr(_quickCaliDataPtr),
        spiRawData(SpiRawData_t{0})
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ffdf 	bl	8005720 <_ZN11EncoderBaseC1Ev>
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <_ZN10MT6816BaseC1EPt+0x34>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3310      	adds	r3, #16
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	809a      	strh	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	619a      	str	r2, [r3, #24]
    {
    }
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	08009a5c 	.word	0x08009a5c

08005788 <_ZN6MT6816C1Ev>:
    /*
     * _quickCaliDataPtr is the start address where calibration data stored,
     * in STM32F103CBT6 flash size is 128K (0x08000000 ~ 0x08020000), we use
     * last 33K (32K clib + 1K user) for storage, and it starts from 0x08017C00.
     */
    explicit MT6816() : MT6816Base((uint16_t*) (0x08017C00))
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4906      	ldr	r1, [pc, #24]	; (80057ac <_ZN6MT6816C1Ev+0x24>)
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ffdb 	bl	8005750 <_ZN10MT6816BaseC1EPt>
 800579a:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <_ZN6MT6816C1Ev+0x28>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
    {}
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	08017c00 	.word	0x08017c00
 80057b0:	08009a9c 	.word	0x08009a9c

080057b4 <_ZN10DriverBaseC1Ev>:
#define CTRL_STEP_FW_DRIVER_BASE_H

#include <cstdint>


class DriverBase
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <_ZN10DriverBaseC1Ev+0x30>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	809a      	strh	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	330a      	adds	r3, #10
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	809a      	strh	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	08009b0c 	.word	0x08009b0c

080057e8 <_ZN12TB67H450BaseC1Ev>:
#include "driver_base.h"

class TB67H450Base : public DriverBase
{
public:
    explicit TB67H450Base()
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ffde 	bl	80057b4 <_ZN10DriverBaseC1Ev>
 80057f8:	4a03      	ldr	r2, [pc, #12]	; (8005808 <_ZN12TB67H450BaseC1Ev+0x20>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	08009a2c 	.word	0x08009a2c

0800580c <_ZN8TB67H450C1Ev>:
#include "Driver/tb67h450_base.h"

class TB67H450 : public TB67H450Base
{
public:
    explicit TB67H450() : TB67H450Base()
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	6053      	str	r3, [r2, #4]
 800581e:	6093      	str	r3, [r2, #8]
 8005820:	60d3      	str	r3, [r2, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ffdf 	bl	80057e8 <_ZN12TB67H450BaseC1Ev>
 800582a:	4a04      	ldr	r2, [pc, #16]	; (800583c <_ZN8TB67H450C1Ev+0x30>)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	601a      	str	r2, [r3, #0]
    {}
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	08009ab8 	.word	0x08009ab8

08005840 <_ZN21EncoderCalibratorBaseC1EP5Motor>:
        CALI_BACKWARD_MEASURE,
        CALI_CALCULATING,
    } State_t;


    explicit EncoderCalibratorBase(Motor* _motor)
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
    {
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <_ZN21EncoderCalibratorBaseC1EP5Motor+0x88>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	82da      	strh	r2, [r3, #22]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3318      	adds	r3, #24
 800585a:	2220      	movs	r2, #32
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f9fe 	bl	8005c60 <memset>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3338      	adds	r3, #56	; 0x38
 8005868:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f9f6 	bl	8005c60 <memset>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800587a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f9ed 	bl	8005c60 <memset>
        motor = _motor;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	609a      	str	r2, [r3, #8]

        isTriggered = false;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	711a      	strb	r2, [r3, #4]
        errorCode = CALI_NO_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	731a      	strb	r2, [r3, #12]
        state = CALI_DISABLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	735a      	strb	r2, [r3, #13]
        goPosition = 0;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
        rcdX = 0;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
        rcdY = 0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
        resultNum = 0;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
    }
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	08009af4 	.word	0x08009af4

080058cc <_ZN17EncoderCalibratorC1EP5Motor>:
#include "Sensor/Encoder/encoder_calibrator_base.h"

class EncoderCalibrator : public EncoderCalibratorBase
{
public:
    explicit EncoderCalibrator(Motor* _motor) : EncoderCalibratorBase(_motor)
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ffb0 	bl	8005840 <_ZN21EncoderCalibratorBaseC1EP5Motor>
 80058e0:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <_ZN17EncoderCalibratorC1EP5Motor+0x24>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
    {}
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08009a84 	.word	0x08009a84

080058f4 <_ZN10ButtonBaseC1Ehm>:

    explicit ButtonBase(uint8_t _id) :
        id(_id)
    {}

    ButtonBase(uint8_t _id, uint32_t _longPressTime) :
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	460b      	mov	r3, r1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
        id(_id), longPressTime(_longPressTime)
 8005902:	4a0d      	ldr	r2, [pc, #52]	; (8005938 <_ZN10ButtonBaseC1Ehm+0x44>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	7afa      	ldrb	r2, [r7, #11]
 800590c:	711a      	strb	r2, [r3, #4]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	715a      	strb	r2, [r3, #5]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
    {}
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	08009ae8 	.word	0x08009ae8

0800593c <_ZN6ButtonC1Ehm>:
{
public:
    explicit Button(uint8_t _id) : ButtonBase(_id)
    {}

    Button(uint8_t _id, uint32_t _longPressTime) : ButtonBase(_id, _longPressTime)
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	460b      	mov	r3, r1
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	72fb      	strb	r3, [r7, #11]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	7af9      	ldrb	r1, [r7, #11]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ffcf 	bl	80058f4 <_ZN10ButtonBaseC1Ehm>
 8005956:	4a04      	ldr	r2, [pc, #16]	; (8005968 <_ZN6ButtonC1Ehm+0x2c>)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]
    {}
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	08009a78 	.word	0x08009a78

0800596c <Main>:
//Led statusLed;


/* Main Entry ----------------------------------------------------------------*/
void Main()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
//    motor.config.ctrlParams.dce.kd = boardConfig.dce_kd;
//    motor.config.ctrlParams.stallProtectSwitch = boardConfig.enableStallProtect;
//
//
//    /*---------------- Init Motor ----------------*/
    motor.AttachDriver(&tb67H450);
 8005970:	4923      	ldr	r1, [pc, #140]	; (8005a00 <Main+0x94>)
 8005972:	4824      	ldr	r0, [pc, #144]	; (8005a04 <Main+0x98>)
 8005974:	f7fc faa4 	bl	8001ec0 <_ZN5Motor12AttachDriverEP10DriverBase>
    motor.AttachEncoder(&mt6816);
 8005978:	4923      	ldr	r1, [pc, #140]	; (8005a08 <Main+0x9c>)
 800597a:	4822      	ldr	r0, [pc, #136]	; (8005a04 <Main+0x98>)
 800597c:	f7fc fa92 	bl	8001ea4 <_ZN5Motor13AttachEncoderEP11EncoderBase>
    motor.controller->Init();
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <Main+0x98>)
 8005982:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc fb0a 	bl	8001fa0 <_ZN5Motor10Controller4InitEv>
    motor.driver->Init();
 800598c:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <Main+0x98>)
 800598e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <Main+0x98>)
 8005994:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3
    motor.encoder->Init();
 80059a0:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <Main+0x98>)
 80059a2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80059a6:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <Main+0x98>)
 80059a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4610      	mov	r0, r2
 80059b2:	4798      	blx	r3
//
//
//    /*------------- Init peripherals -------------*/
    button1.SetOnEventListener(OnButton1Event);
 80059b4:	4915      	ldr	r1, [pc, #84]	; (8005a0c <Main+0xa0>)
 80059b6:	4816      	ldr	r0, [pc, #88]	; (8005a10 <Main+0xa4>)
 80059b8:	f7fd f883 	bl	8002ac2 <_ZN10ButtonBase18SetOnEventListenerEPFvNS_5EventEE>
    button2.SetOnEventListener(OnButton2Event);
 80059bc:	4915      	ldr	r1, [pc, #84]	; (8005a14 <Main+0xa8>)
 80059be:	4816      	ldr	r0, [pc, #88]	; (8005a18 <Main+0xac>)
 80059c0:	f7fd f87f 	bl	8002ac2 <_ZN10ButtonBase18SetOnEventListenerEPFvNS_5EventEE>
//
//
//    /*------- Start Close-Loop Control Tick ------*/
    HAL_Delay(100);
 80059c4:	2064      	movs	r0, #100	; 0x64
 80059c6:	f7fd f8f7 	bl	8002bb8 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim1);  // 100Hz
 80059ca:	4814      	ldr	r0, [pc, #80]	; (8005a1c <Main+0xb0>)
 80059cc:	f7fe fdac 	bl	8004528 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);  // 20kHz
 80059d0:	4813      	ldr	r0, [pc, #76]	; (8005a20 <Main+0xb4>)
 80059d2:	f7fe fda9 	bl	8004528 <HAL_TIM_Base_Start_IT>
//
//    if (button1.IsPressed() && button2.IsPressed())
        encoderCalibrator.isTriggered = true;
 80059d6:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <Main+0xb8>)
 80059d8:	2201      	movs	r2, #1
 80059da:	711a      	strb	r2, [r3, #4]
//
//
    for (;;)
    {
        encoderCalibrator.TickMainLoop();
 80059dc:	4811      	ldr	r0, [pc, #68]	; (8005a24 <Main+0xb8>)
 80059de:	f7fc fcf3 	bl	80023c8 <_ZN21EncoderCalibratorBase12TickMainLoopEv>


        if (boardConfig.configStatus == CONFIG_COMMIT)
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <Main+0xbc>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d103      	bne.n	80059f2 <Main+0x86>
        {
            boardConfig.configStatus = CONFIG_OK;
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <Main+0xbc>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e7f4      	b.n	80059dc <Main+0x70>
//            eeprom.put(0, boardConfig);
        } else if (boardConfig.configStatus == CONFIG_RESTORE)
 80059f2:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <Main+0xbc>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <Main+0x70>
        {
//            eeprom.put(0, boardConfig);
            HAL_NVIC_SystemReset();
 80059fa:	f7fd faea 	bl	8002fd2 <HAL_NVIC_SystemReset>
        encoderCalibrator.TickMainLoop();
 80059fe:	e7ed      	b.n	80059dc <Main+0x70>
 8005a00:	200003fc 	.word	0x200003fc
 8005a04:	2000024c 	.word	0x2000024c
 8005a08:	2000040c 	.word	0x2000040c
 8005a0c:	08005a2d 	.word	0x08005a2d
 8005a10:	2000079c 	.word	0x2000079c
 8005a14:	08005aa5 	.word	0x08005aa5
 8005a18:	200007b4 	.word	0x200007b4
 8005a1c:	200008e4 	.word	0x200008e4
 8005a20:	2000089c 	.word	0x2000089c
 8005a24:	20000434 	.word	0x20000434
 8005a28:	20000218 	.word	0x20000218

08005a2c <_Z14OnButton1EventN10ButtonBase5EventE>:
    else
        motor.Tick20kHz();
}

void OnButton1Event(Button::Event _event)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
    switch (_event)
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d82a      	bhi.n	8005a92 <_Z14OnButton1EventN10ButtonBase5EventE+0x66>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <_Z14OnButton1EventN10ButtonBase5EventE+0x18>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a91 	.word	0x08005a91
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a55 	.word	0x08005a55
 8005a50:	08005a5b 	.word	0x08005a5b
        case ButtonBase::UP:
            break;
        case ButtonBase::DOWN:
            break;
        case ButtonBase::LONG_PRESS:
            HAL_NVIC_SystemReset();
 8005a54:	f7fd fabd 	bl	8002fd2 <HAL_NVIC_SystemReset>
            break;
 8005a58:	e01b      	b.n	8005a92 <_Z14OnButton1EventN10ButtonBase5EventE+0x66>
        case ButtonBase::CLICK:
            if (motor.controller->modeRunning != Motor::MODE_STOP)
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <_Z14OnButton1EventN10ButtonBase5EventE+0x70>)
 8005a5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a60:	795b      	ldrb	r3, [r3, #5]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <_Z14OnButton1EventN10ButtonBase5EventE+0x54>
            {
                boardConfig.defaultMode = motor.controller->modeRunning;
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <_Z14OnButton1EventN10ButtonBase5EventE+0x70>)
 8005a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a6c:	795b      	ldrb	r3, [r3, #5]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <_Z14OnButton1EventN10ButtonBase5EventE+0x74>)
 8005a72:	60da      	str	r2, [r3, #12]
                motor.controller->requestMode = Motor::MODE_STOP;
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <_Z14OnButton1EventN10ButtonBase5EventE+0x70>)
 8005a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	711a      	strb	r2, [r3, #4]
            } else
            {
                motor.controller->requestMode = static_cast<Motor::Mode_t>(boardConfig.defaultMode);
            }
            break;
 8005a7e:	e008      	b.n	8005a92 <_Z14OnButton1EventN10ButtonBase5EventE+0x66>
                motor.controller->requestMode = static_cast<Motor::Mode_t>(boardConfig.defaultMode);
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <_Z14OnButton1EventN10ButtonBase5EventE+0x74>)
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <_Z14OnButton1EventN10ButtonBase5EventE+0x70>)
 8005a86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	711a      	strb	r2, [r3, #4]
            break;
 8005a8e:	e000      	b.n	8005a92 <_Z14OnButton1EventN10ButtonBase5EventE+0x66>
            break;
 8005a90:	bf00      	nop
    }
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000024c 	.word	0x2000024c
 8005aa0:	20000218 	.word	0x20000218

08005aa4 <_Z14OnButton2EventN10ButtonBase5EventE>:


void OnButton2Event(Button::Event _event)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
    switch (_event)
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d84b      	bhi.n	8005b4c <_Z14OnButton2EventN10ButtonBase5EventE+0xa8>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <_Z14OnButton2EventN10ButtonBase5EventE+0x18>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005b47 	.word	0x08005b47
 8005ac0:	08005b47 	.word	0x08005b47
 8005ac4:	08005acd 	.word	0x08005acd
 8005ac8:	08005b39 	.word	0x08005b39
        case ButtonBase::UP:
            break;
        case ButtonBase::DOWN:
            break;
        case ButtonBase::LONG_PRESS:
            switch (motor.controller->modeRunning)
 8005acc:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <_Z14OnButton2EventN10ButtonBase5EventE+0xb0>)
 8005ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ad2:	795b      	ldrb	r3, [r3, #5]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d838      	bhi.n	8005b4a <_Z14OnButton2EventN10ButtonBase5EventE+0xa6>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <_Z14OnButton2EventN10ButtonBase5EventE+0x3c>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b05 	.word	0x08005b05
 8005af0:	08005b35 	.word	0x08005b35
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005b05 	.word	0x08005b05
 8005b00:	08005b35 	.word	0x08005b35
            {
                case Motor::MODE_COMMAND_CURRENT:
                case Motor::MODE_PWM_CURRENT:
                    motor.controller->SetCurrentSetPoint(0);
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <_Z14OnButton2EventN10ButtonBase5EventE+0xb0>)
 8005b06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fc fa10 	bl	8001f32 <_ZN5Motor10Controller18SetCurrentSetPointEl>
                    break;
 8005b12:	e010      	b.n	8005b36 <_Z14OnButton2EventN10ButtonBase5EventE+0x92>
                case Motor::MODE_COMMAND_VELOCITY:
                case Motor::MODE_PWM_VELOCITY:
                    motor.controller->SetVelocitySetPoint(0);
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <_Z14OnButton2EventN10ButtonBase5EventE+0xb0>)
 8005b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fc f9ee 	bl	8001efe <_ZN5Motor10Controller19SetVelocitySetPointEl>
                    break;
 8005b22:	e008      	b.n	8005b36 <_Z14OnButton2EventN10ButtonBase5EventE+0x92>
                case Motor::MODE_COMMAND_POSITION:
                case Motor::MODE_PWM_POSITION:
                    motor.controller->SetPositionSetPoint(0);
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <_Z14OnButton2EventN10ButtonBase5EventE+0xb0>)
 8005b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fc f9d5 	bl	8001edc <_ZN5Motor10Controller19SetPositionSetPointEl>
                    break;
 8005b32:	e000      	b.n	8005b36 <_Z14OnButton2EventN10ButtonBase5EventE+0x92>
                case Motor::MODE_COMMAND_Trajectory:
                case Motor::MODE_STEP_DIR:
                case Motor::MODE_STOP:
                    break;
 8005b34:	bf00      	nop
            }
            break;
 8005b36:	e008      	b.n	8005b4a <_Z14OnButton2EventN10ButtonBase5EventE+0xa6>
        case ButtonBase::CLICK:
            motor.controller->ClearStallFlag();
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <_Z14OnButton2EventN10ButtonBase5EventE+0xb0>)
 8005b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fc fa1e 	bl	8001f80 <_ZN5Motor10Controller14ClearStallFlagEv>
            break;
 8005b44:	e002      	b.n	8005b4c <_Z14OnButton2EventN10ButtonBase5EventE+0xa8>
            break;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <_Z14OnButton2EventN10ButtonBase5EventE+0xa8>
            break;
 8005b4a:	bf00      	nop
    }
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2000024c 	.word	0x2000024c

08005b58 <_Z41__static_initialization_and_destruction_0ii>:
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d11d      	bne.n	8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d118      	bne.n	8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
Motor motor;
 8005b72:	480e      	ldr	r0, [pc, #56]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005b74:	f7ff fcd8 	bl	8005528 <_ZN5MotorC1Ev>
TB67H450 tb67H450;
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005b7a:	f7ff fe47 	bl	800580c <_ZN8TB67H450C1Ev>
MT6816 mt6816;
 8005b7e:	480d      	ldr	r0, [pc, #52]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005b80:	f7ff fe02 	bl	8005788 <_ZN6MT6816C1Ev>
EncoderCalibrator encoderCalibrator(&motor);
 8005b84:	4909      	ldr	r1, [pc, #36]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005b86:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005b88:	f7ff fea0 	bl	80058cc <_ZN17EncoderCalibratorC1EP5Motor>
Button button1(1, 1000), button2(2, 3000);
 8005b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b90:	2101      	movs	r1, #1
 8005b92:	480a      	ldr	r0, [pc, #40]	; (8005bbc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005b94:	f7ff fed2 	bl	800593c <_ZN6ButtonC1Ehm>
 8005b98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	4808      	ldr	r0, [pc, #32]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005ba0:	f7ff fecc 	bl	800593c <_ZN6ButtonC1Ehm>
}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	2000024c 	.word	0x2000024c
 8005bb0:	200003fc 	.word	0x200003fc
 8005bb4:	2000040c 	.word	0x2000040c
 8005bb8:	20000434 	.word	0x20000434
 8005bbc:	2000079c 	.word	0x2000079c
 8005bc0:	200007b4 	.word	0x200007b4

08005bc4 <_GLOBAL__sub_I_boardConfig>:
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f7ff ffc3 	bl	8005b58 <_Z41__static_initialization_and_destruction_0ii>
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <__cxa_pure_virtual>:
 8005bd4:	b508      	push	{r3, lr}
 8005bd6:	f000 f80d 	bl	8005bf4 <_ZSt9terminatev>

08005bda <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005bda:	b508      	push	{r3, lr}
 8005bdc:	4780      	blx	r0
 8005bde:	f000 f80e 	bl	8005bfe <abort>
	...

08005be4 <_ZSt13get_terminatev>:
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <_ZSt13get_terminatev+0xc>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	f3bf 8f5b 	dmb	ish
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	2000001c 	.word	0x2000001c

08005bf4 <_ZSt9terminatev>:
 8005bf4:	b508      	push	{r3, lr}
 8005bf6:	f7ff fff5 	bl	8005be4 <_ZSt13get_terminatev>
 8005bfa:	f7ff ffee 	bl	8005bda <_ZN10__cxxabiv111__terminateEPFvvE>

08005bfe <abort>:
 8005bfe:	2006      	movs	r0, #6
 8005c00:	b508      	push	{r3, lr}
 8005c02:	f000 fa73 	bl	80060ec <raise>
 8005c06:	2001      	movs	r0, #1
 8005c08:	f7fb fd88 	bl	800171c <_exit>

08005c0c <__errno>:
 8005c0c:	4b01      	ldr	r3, [pc, #4]	; (8005c14 <__errno+0x8>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000020 	.word	0x20000020

08005c18 <__libc_init_array>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	2600      	movs	r6, #0
 8005c1c:	4d0c      	ldr	r5, [pc, #48]	; (8005c50 <__libc_init_array+0x38>)
 8005c1e:	4c0d      	ldr	r4, [pc, #52]	; (8005c54 <__libc_init_array+0x3c>)
 8005c20:	1b64      	subs	r4, r4, r5
 8005c22:	10a4      	asrs	r4, r4, #2
 8005c24:	42a6      	cmp	r6, r4
 8005c26:	d109      	bne.n	8005c3c <__libc_init_array+0x24>
 8005c28:	f003 fad8 	bl	80091dc <_init>
 8005c2c:	2600      	movs	r6, #0
 8005c2e:	4d0a      	ldr	r5, [pc, #40]	; (8005c58 <__libc_init_array+0x40>)
 8005c30:	4c0a      	ldr	r4, [pc, #40]	; (8005c5c <__libc_init_array+0x44>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	d105      	bne.n	8005c46 <__libc_init_array+0x2e>
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c40:	4798      	blx	r3
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7ee      	b.n	8005c24 <__libc_init_array+0xc>
 8005c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4a:	4798      	blx	r3
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	e7f2      	b.n	8005c36 <__libc_init_array+0x1e>
 8005c50:	08009f7c 	.word	0x08009f7c
 8005c54:	08009f7c 	.word	0x08009f7c
 8005c58:	08009f7c 	.word	0x08009f7c
 8005c5c:	08009f84 	.word	0x08009f84

08005c60 <memset>:
 8005c60:	4603      	mov	r3, r0
 8005c62:	4402      	add	r2, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d100      	bne.n	8005c6a <memset+0xa>
 8005c68:	4770      	bx	lr
 8005c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c6e:	e7f9      	b.n	8005c64 <memset+0x4>

08005c70 <_scanf_float>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	b087      	sub	sp, #28
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	688b      	ldr	r3, [r1, #8]
 8005c7a:	4617      	mov	r7, r2
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c82:	bf85      	ittet	hi
 8005c84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c88:	195b      	addhi	r3, r3, r5
 8005c8a:	2300      	movls	r3, #0
 8005c8c:	9302      	strhi	r3, [sp, #8]
 8005c8e:	bf88      	it	hi
 8005c90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c94:	468b      	mov	fp, r1
 8005c96:	f04f 0500 	mov.w	r5, #0
 8005c9a:	bf8c      	ite	hi
 8005c9c:	608b      	strhi	r3, [r1, #8]
 8005c9e:	9302      	strls	r3, [sp, #8]
 8005ca0:	680b      	ldr	r3, [r1, #0]
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ca8:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cac:	460c      	mov	r4, r1
 8005cae:	465e      	mov	r6, fp
 8005cb0:	46aa      	mov	sl, r5
 8005cb2:	46a9      	mov	r9, r5
 8005cb4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cb8:	9501      	str	r5, [sp, #4]
 8005cba:	68a2      	ldr	r2, [r4, #8]
 8005cbc:	b152      	cbz	r2, 8005cd4 <_scanf_float+0x64>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8005cc4:	d864      	bhi.n	8005d90 <_scanf_float+0x120>
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d83c      	bhi.n	8005d44 <_scanf_float+0xd4>
 8005cca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005cce:	b2c8      	uxtb	r0, r1
 8005cd0:	280e      	cmp	r0, #14
 8005cd2:	d93a      	bls.n	8005d4a <_scanf_float+0xda>
 8005cd4:	f1b9 0f00 	cmp.w	r9, #0
 8005cd8:	d003      	beq.n	8005ce2 <_scanf_float+0x72>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ce6:	f1ba 0f01 	cmp.w	sl, #1
 8005cea:	f200 8113 	bhi.w	8005f14 <_scanf_float+0x2a4>
 8005cee:	455e      	cmp	r6, fp
 8005cf0:	f200 8105 	bhi.w	8005efe <_scanf_float+0x28e>
 8005cf4:	2501      	movs	r5, #1
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	b007      	add	sp, #28
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d02:	2a0d      	cmp	r2, #13
 8005d04:	d8e6      	bhi.n	8005cd4 <_scanf_float+0x64>
 8005d06:	a101      	add	r1, pc, #4	; (adr r1, 8005d0c <_scanf_float+0x9c>)
 8005d08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d0c:	08005e4b 	.word	0x08005e4b
 8005d10:	08005cd5 	.word	0x08005cd5
 8005d14:	08005cd5 	.word	0x08005cd5
 8005d18:	08005cd5 	.word	0x08005cd5
 8005d1c:	08005eab 	.word	0x08005eab
 8005d20:	08005e83 	.word	0x08005e83
 8005d24:	08005cd5 	.word	0x08005cd5
 8005d28:	08005cd5 	.word	0x08005cd5
 8005d2c:	08005e59 	.word	0x08005e59
 8005d30:	08005cd5 	.word	0x08005cd5
 8005d34:	08005cd5 	.word	0x08005cd5
 8005d38:	08005cd5 	.word	0x08005cd5
 8005d3c:	08005cd5 	.word	0x08005cd5
 8005d40:	08005e11 	.word	0x08005e11
 8005d44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d48:	e7db      	b.n	8005d02 <_scanf_float+0x92>
 8005d4a:	290e      	cmp	r1, #14
 8005d4c:	d8c2      	bhi.n	8005cd4 <_scanf_float+0x64>
 8005d4e:	a001      	add	r0, pc, #4	; (adr r0, 8005d54 <_scanf_float+0xe4>)
 8005d50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d54:	08005e03 	.word	0x08005e03
 8005d58:	08005cd5 	.word	0x08005cd5
 8005d5c:	08005e03 	.word	0x08005e03
 8005d60:	08005e97 	.word	0x08005e97
 8005d64:	08005cd5 	.word	0x08005cd5
 8005d68:	08005db1 	.word	0x08005db1
 8005d6c:	08005ded 	.word	0x08005ded
 8005d70:	08005ded 	.word	0x08005ded
 8005d74:	08005ded 	.word	0x08005ded
 8005d78:	08005ded 	.word	0x08005ded
 8005d7c:	08005ded 	.word	0x08005ded
 8005d80:	08005ded 	.word	0x08005ded
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005ded 	.word	0x08005ded
 8005d8c:	08005ded 	.word	0x08005ded
 8005d90:	2b6e      	cmp	r3, #110	; 0x6e
 8005d92:	d809      	bhi.n	8005da8 <_scanf_float+0x138>
 8005d94:	2b60      	cmp	r3, #96	; 0x60
 8005d96:	d8b2      	bhi.n	8005cfe <_scanf_float+0x8e>
 8005d98:	2b54      	cmp	r3, #84	; 0x54
 8005d9a:	d077      	beq.n	8005e8c <_scanf_float+0x21c>
 8005d9c:	2b59      	cmp	r3, #89	; 0x59
 8005d9e:	d199      	bne.n	8005cd4 <_scanf_float+0x64>
 8005da0:	2d07      	cmp	r5, #7
 8005da2:	d197      	bne.n	8005cd4 <_scanf_float+0x64>
 8005da4:	2508      	movs	r5, #8
 8005da6:	e029      	b.n	8005dfc <_scanf_float+0x18c>
 8005da8:	2b74      	cmp	r3, #116	; 0x74
 8005daa:	d06f      	beq.n	8005e8c <_scanf_float+0x21c>
 8005dac:	2b79      	cmp	r3, #121	; 0x79
 8005dae:	e7f6      	b.n	8005d9e <_scanf_float+0x12e>
 8005db0:	6821      	ldr	r1, [r4, #0]
 8005db2:	05c8      	lsls	r0, r1, #23
 8005db4:	d51a      	bpl.n	8005dec <_scanf_float+0x17c>
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005dbc:	6021      	str	r1, [r4, #0]
 8005dbe:	f109 0901 	add.w	r9, r9, #1
 8005dc2:	b11b      	cbz	r3, 8005dcc <_scanf_float+0x15c>
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	3201      	adds	r2, #1
 8005dc8:	9302      	str	r3, [sp, #8]
 8005dca:	60a2      	str	r2, [r4, #8]
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	f340 8084 	ble.w	8005eec <_scanf_float+0x27c>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	e766      	b.n	8005cba <_scanf_float+0x4a>
 8005dec:	eb1a 0f05 	cmn.w	sl, r5
 8005df0:	f47f af70 	bne.w	8005cd4 <_scanf_float+0x64>
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8005e00:	e7e4      	b.n	8005dcc <_scanf_float+0x15c>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	0610      	lsls	r0, r2, #24
 8005e06:	f57f af65 	bpl.w	8005cd4 <_scanf_float+0x64>
 8005e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0e:	e7f4      	b.n	8005dfa <_scanf_float+0x18a>
 8005e10:	f1ba 0f00 	cmp.w	sl, #0
 8005e14:	d10e      	bne.n	8005e34 <_scanf_float+0x1c4>
 8005e16:	f1b9 0f00 	cmp.w	r9, #0
 8005e1a:	d10e      	bne.n	8005e3a <_scanf_float+0x1ca>
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e26:	d108      	bne.n	8005e3a <_scanf_float+0x1ca>
 8005e28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e2c:	f04f 0a01 	mov.w	sl, #1
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	e7e3      	b.n	8005dfc <_scanf_float+0x18c>
 8005e34:	f1ba 0f02 	cmp.w	sl, #2
 8005e38:	d055      	beq.n	8005ee6 <_scanf_float+0x276>
 8005e3a:	2d01      	cmp	r5, #1
 8005e3c:	d002      	beq.n	8005e44 <_scanf_float+0x1d4>
 8005e3e:	2d04      	cmp	r5, #4
 8005e40:	f47f af48 	bne.w	8005cd4 <_scanf_float+0x64>
 8005e44:	3501      	adds	r5, #1
 8005e46:	b2ed      	uxtb	r5, r5
 8005e48:	e7d8      	b.n	8005dfc <_scanf_float+0x18c>
 8005e4a:	f1ba 0f01 	cmp.w	sl, #1
 8005e4e:	f47f af41 	bne.w	8005cd4 <_scanf_float+0x64>
 8005e52:	f04f 0a02 	mov.w	sl, #2
 8005e56:	e7d1      	b.n	8005dfc <_scanf_float+0x18c>
 8005e58:	b97d      	cbnz	r5, 8005e7a <_scanf_float+0x20a>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	f47f af3c 	bne.w	8005cda <_scanf_float+0x6a>
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e6c:	f47f af39 	bne.w	8005ce2 <_scanf_float+0x72>
 8005e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e74:	2501      	movs	r5, #1
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	e7c0      	b.n	8005dfc <_scanf_float+0x18c>
 8005e7a:	2d03      	cmp	r5, #3
 8005e7c:	d0e2      	beq.n	8005e44 <_scanf_float+0x1d4>
 8005e7e:	2d05      	cmp	r5, #5
 8005e80:	e7de      	b.n	8005e40 <_scanf_float+0x1d0>
 8005e82:	2d02      	cmp	r5, #2
 8005e84:	f47f af26 	bne.w	8005cd4 <_scanf_float+0x64>
 8005e88:	2503      	movs	r5, #3
 8005e8a:	e7b7      	b.n	8005dfc <_scanf_float+0x18c>
 8005e8c:	2d06      	cmp	r5, #6
 8005e8e:	f47f af21 	bne.w	8005cd4 <_scanf_float+0x64>
 8005e92:	2507      	movs	r5, #7
 8005e94:	e7b2      	b.n	8005dfc <_scanf_float+0x18c>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	0591      	lsls	r1, r2, #22
 8005e9a:	f57f af1b 	bpl.w	8005cd4 <_scanf_float+0x64>
 8005e9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005ea2:	6022      	str	r2, [r4, #0]
 8005ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ea8:	e7a8      	b.n	8005dfc <_scanf_float+0x18c>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005eb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005eb4:	d006      	beq.n	8005ec4 <_scanf_float+0x254>
 8005eb6:	0550      	lsls	r0, r2, #21
 8005eb8:	f57f af0c 	bpl.w	8005cd4 <_scanf_float+0x64>
 8005ebc:	f1b9 0f00 	cmp.w	r9, #0
 8005ec0:	f43f af0f 	beq.w	8005ce2 <_scanf_float+0x72>
 8005ec4:	0591      	lsls	r1, r2, #22
 8005ec6:	bf58      	it	pl
 8005ec8:	9901      	ldrpl	r1, [sp, #4]
 8005eca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ece:	bf58      	it	pl
 8005ed0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ed4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ed8:	f04f 0900 	mov.w	r9, #0
 8005edc:	bf58      	it	pl
 8005ede:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	e78a      	b.n	8005dfc <_scanf_float+0x18c>
 8005ee6:	f04f 0a03 	mov.w	sl, #3
 8005eea:	e787      	b.n	8005dfc <_scanf_float+0x18c>
 8005eec:	4639      	mov	r1, r7
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ef4:	4798      	blx	r3
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f43f aedf 	beq.w	8005cba <_scanf_float+0x4a>
 8005efc:	e6ea      	b.n	8005cd4 <_scanf_float+0x64>
 8005efe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f02:	463a      	mov	r2, r7
 8005f04:	4640      	mov	r0, r8
 8005f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f0a:	4798      	blx	r3
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	e6ec      	b.n	8005cee <_scanf_float+0x7e>
 8005f14:	1e6b      	subs	r3, r5, #1
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d825      	bhi.n	8005f66 <_scanf_float+0x2f6>
 8005f1a:	2d02      	cmp	r5, #2
 8005f1c:	d836      	bhi.n	8005f8c <_scanf_float+0x31c>
 8005f1e:	455e      	cmp	r6, fp
 8005f20:	f67f aee8 	bls.w	8005cf4 <_scanf_float+0x84>
 8005f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f28:	463a      	mov	r2, r7
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f30:	4798      	blx	r3
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	e7f1      	b.n	8005f1e <_scanf_float+0x2ae>
 8005f3a:	9802      	ldr	r0, [sp, #8]
 8005f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f44:	463a      	mov	r2, r7
 8005f46:	9002      	str	r0, [sp, #8]
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4798      	blx	r3
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f56:	fa5f fa8a 	uxtb.w	sl, sl
 8005f5a:	f1ba 0f02 	cmp.w	sl, #2
 8005f5e:	d1ec      	bne.n	8005f3a <_scanf_float+0x2ca>
 8005f60:	3d03      	subs	r5, #3
 8005f62:	b2ed      	uxtb	r5, r5
 8005f64:	1b76      	subs	r6, r6, r5
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	05da      	lsls	r2, r3, #23
 8005f6a:	d52f      	bpl.n	8005fcc <_scanf_float+0x35c>
 8005f6c:	055b      	lsls	r3, r3, #21
 8005f6e:	d510      	bpl.n	8005f92 <_scanf_float+0x322>
 8005f70:	455e      	cmp	r6, fp
 8005f72:	f67f aebf 	bls.w	8005cf4 <_scanf_float+0x84>
 8005f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f7a:	463a      	mov	r2, r7
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	e7f1      	b.n	8005f70 <_scanf_float+0x300>
 8005f8c:	46aa      	mov	sl, r5
 8005f8e:	9602      	str	r6, [sp, #8]
 8005f90:	e7df      	b.n	8005f52 <_scanf_float+0x2e2>
 8005f92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	2965      	cmp	r1, #101	; 0x65
 8005f9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	d00c      	beq.n	8005fc0 <_scanf_float+0x350>
 8005fa6:	2945      	cmp	r1, #69	; 0x45
 8005fa8:	d00a      	beq.n	8005fc0 <_scanf_float+0x350>
 8005faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	4798      	blx	r3
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	1eb5      	subs	r5, r6, #2
 8005fbe:	6123      	str	r3, [r4, #16]
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fc8:	4798      	blx	r3
 8005fca:	462e      	mov	r6, r5
 8005fcc:	6825      	ldr	r5, [r4, #0]
 8005fce:	f015 0510 	ands.w	r5, r5, #16
 8005fd2:	d159      	bne.n	8006088 <_scanf_float+0x418>
 8005fd4:	7035      	strb	r5, [r6, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe0:	d11c      	bne.n	800601c <_scanf_float+0x3ac>
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	454b      	cmp	r3, r9
 8005fe6:	eba3 0209 	sub.w	r2, r3, r9
 8005fea:	d124      	bne.n	8006036 <_scanf_float+0x3c6>
 8005fec:	2200      	movs	r2, #0
 8005fee:	4659      	mov	r1, fp
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	f000 ff11 	bl	8006e18 <_strtod_r>
 8005ff6:	f8d4 c000 	ldr.w	ip, [r4]
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	f01c 0f02 	tst.w	ip, #2
 8006000:	4606      	mov	r6, r0
 8006002:	460f      	mov	r7, r1
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	d021      	beq.n	800604c <_scanf_float+0x3dc>
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	600a      	str	r2, [r1, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	e9c3 6700 	strd	r6, r7, [r3]
 8006014:	68e3      	ldr	r3, [r4, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60e3      	str	r3, [r4, #12]
 800601a:	e66c      	b.n	8005cf6 <_scanf_float+0x86>
 800601c:	9b04      	ldr	r3, [sp, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0e4      	beq.n	8005fec <_scanf_float+0x37c>
 8006022:	9905      	ldr	r1, [sp, #20]
 8006024:	230a      	movs	r3, #10
 8006026:	462a      	mov	r2, r5
 8006028:	4640      	mov	r0, r8
 800602a:	3101      	adds	r1, #1
 800602c:	f000 ff80 	bl	8006f30 <_strtol_r>
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	9e05      	ldr	r6, [sp, #20]
 8006034:	1ac2      	subs	r2, r0, r3
 8006036:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800603a:	429e      	cmp	r6, r3
 800603c:	bf28      	it	cs
 800603e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006042:	4630      	mov	r0, r6
 8006044:	4911      	ldr	r1, [pc, #68]	; (800608c <_scanf_float+0x41c>)
 8006046:	f000 f86d 	bl	8006124 <siprintf>
 800604a:	e7cf      	b.n	8005fec <_scanf_float+0x37c>
 800604c:	f01c 0f04 	tst.w	ip, #4
 8006050:	f103 0e04 	add.w	lr, r3, #4
 8006054:	d003      	beq.n	800605e <_scanf_float+0x3ee>
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	f8c1 e000 	str.w	lr, [r1]
 800605c:	e7d7      	b.n	800600e <_scanf_float+0x39e>
 800605e:	9a03      	ldr	r2, [sp, #12]
 8006060:	f8c2 e000 	str.w	lr, [r2]
 8006064:	f8d3 8000 	ldr.w	r8, [r3]
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	f7fa fcce 	bl	8000a0c <__aeabi_dcmpun>
 8006070:	b128      	cbz	r0, 800607e <_scanf_float+0x40e>
 8006072:	4807      	ldr	r0, [pc, #28]	; (8006090 <_scanf_float+0x420>)
 8006074:	f000 f80e 	bl	8006094 <nanf>
 8006078:	f8c8 0000 	str.w	r0, [r8]
 800607c:	e7ca      	b.n	8006014 <_scanf_float+0x3a4>
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fcf9 	bl	8000a78 <__aeabi_d2f>
 8006086:	e7f7      	b.n	8006078 <_scanf_float+0x408>
 8006088:	2500      	movs	r5, #0
 800608a:	e634      	b.n	8005cf6 <_scanf_float+0x86>
 800608c:	08009b38 	.word	0x08009b38
 8006090:	08009f7a 	.word	0x08009f7a

08006094 <nanf>:
 8006094:	4800      	ldr	r0, [pc, #0]	; (8006098 <nanf+0x4>)
 8006096:	4770      	bx	lr
 8006098:	7fc00000 	.word	0x7fc00000

0800609c <_raise_r>:
 800609c:	291f      	cmp	r1, #31
 800609e:	b538      	push	{r3, r4, r5, lr}
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	d904      	bls.n	80060b0 <_raise_r+0x14>
 80060a6:	2316      	movs	r3, #22
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060b2:	b112      	cbz	r2, 80060ba <_raise_r+0x1e>
 80060b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060b8:	b94b      	cbnz	r3, 80060ce <_raise_r+0x32>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 f830 	bl	8006120 <_getpid_r>
 80060c0:	462a      	mov	r2, r5
 80060c2:	4601      	mov	r1, r0
 80060c4:	4620      	mov	r0, r4
 80060c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ca:	f000 b817 	b.w	80060fc <_kill_r>
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00a      	beq.n	80060e8 <_raise_r+0x4c>
 80060d2:	1c59      	adds	r1, r3, #1
 80060d4:	d103      	bne.n	80060de <_raise_r+0x42>
 80060d6:	2316      	movs	r3, #22
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	2001      	movs	r0, #1
 80060dc:	e7e7      	b.n	80060ae <_raise_r+0x12>
 80060de:	2400      	movs	r4, #0
 80060e0:	4628      	mov	r0, r5
 80060e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060e6:	4798      	blx	r3
 80060e8:	2000      	movs	r0, #0
 80060ea:	e7e0      	b.n	80060ae <_raise_r+0x12>

080060ec <raise>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	; (80060f8 <raise+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f7ff bfd3 	b.w	800609c <_raise_r>
 80060f6:	bf00      	nop
 80060f8:	20000020 	.word	0x20000020

080060fc <_kill_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	2300      	movs	r3, #0
 8006100:	4d06      	ldr	r5, [pc, #24]	; (800611c <_kill_r+0x20>)
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	f7fb faf7 	bl	80016fc <_kill>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d102      	bne.n	8006118 <_kill_r+0x1c>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	b103      	cbz	r3, 8006118 <_kill_r+0x1c>
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	20000a2c 	.word	0x20000a2c

08006120 <_getpid_r>:
 8006120:	f7fb bae5 	b.w	80016ee <_getpid>

08006124 <siprintf>:
 8006124:	b40e      	push	{r1, r2, r3}
 8006126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800612a:	b500      	push	{lr}
 800612c:	b09c      	sub	sp, #112	; 0x70
 800612e:	ab1d      	add	r3, sp, #116	; 0x74
 8006130:	9002      	str	r0, [sp, #8]
 8006132:	9006      	str	r0, [sp, #24]
 8006134:	9107      	str	r1, [sp, #28]
 8006136:	9104      	str	r1, [sp, #16]
 8006138:	4808      	ldr	r0, [pc, #32]	; (800615c <siprintf+0x38>)
 800613a:	4909      	ldr	r1, [pc, #36]	; (8006160 <siprintf+0x3c>)
 800613c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	6800      	ldr	r0, [r0, #0]
 8006144:	a902      	add	r1, sp, #8
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	f002 fb56 	bl	80087f8 <_svfiprintf_r>
 800614c:	2200      	movs	r2, #0
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	b01c      	add	sp, #112	; 0x70
 8006154:	f85d eb04 	ldr.w	lr, [sp], #4
 8006158:	b003      	add	sp, #12
 800615a:	4770      	bx	lr
 800615c:	20000020 	.word	0x20000020
 8006160:	ffff0208 	.word	0xffff0208

08006164 <__sread>:
 8006164:	b510      	push	{r4, lr}
 8006166:	460c      	mov	r4, r1
 8006168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616c:	f002 fdda 	bl	8008d24 <_read_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	bfab      	itete	ge
 8006174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006176:	89a3      	ldrhlt	r3, [r4, #12]
 8006178:	181b      	addge	r3, r3, r0
 800617a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617e:	bfac      	ite	ge
 8006180:	6563      	strge	r3, [r4, #84]	; 0x54
 8006182:	81a3      	strhlt	r3, [r4, #12]
 8006184:	bd10      	pop	{r4, pc}

08006186 <__swrite>:
 8006186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618a:	461f      	mov	r7, r3
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	4605      	mov	r5, r0
 8006190:	05db      	lsls	r3, r3, #23
 8006192:	460c      	mov	r4, r1
 8006194:	4616      	mov	r6, r2
 8006196:	d505      	bpl.n	80061a4 <__swrite+0x1e>
 8006198:	2302      	movs	r3, #2
 800619a:	2200      	movs	r2, #0
 800619c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a0:	f001 fccc 	bl	8007b3c <_lseek_r>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	4632      	mov	r2, r6
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	4628      	mov	r0, r5
 80061b0:	463b      	mov	r3, r7
 80061b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	f000 bf0d 	b.w	8006fd8 <_write_r>

080061be <__sseek>:
 80061be:	b510      	push	{r4, lr}
 80061c0:	460c      	mov	r4, r1
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f001 fcb9 	bl	8007b3c <_lseek_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	bf15      	itete	ne
 80061d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061da:	81a3      	strheq	r3, [r4, #12]
 80061dc:	bf18      	it	ne
 80061de:	81a3      	strhne	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__sclose>:
 80061e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e6:	f000 bf77 	b.w	80070d8 <_close_r>

080061ea <sulp>:
 80061ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ee:	460f      	mov	r7, r1
 80061f0:	4690      	mov	r8, r2
 80061f2:	f002 f8a9 	bl	8008348 <__ulp>
 80061f6:	4604      	mov	r4, r0
 80061f8:	460d      	mov	r5, r1
 80061fa:	f1b8 0f00 	cmp.w	r8, #0
 80061fe:	d011      	beq.n	8006224 <sulp+0x3a>
 8006200:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006208:	2b00      	cmp	r3, #0
 800620a:	dd0b      	ble.n	8006224 <sulp+0x3a>
 800620c:	2400      	movs	r4, #0
 800620e:	051b      	lsls	r3, r3, #20
 8006210:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006214:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	f7fa f95c 	bl	80004d8 <__aeabi_dmul>
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	4620      	mov	r0, r4
 8006226:	4629      	mov	r1, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	0000      	movs	r0, r0
	...

08006230 <_strtod_l>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	469b      	mov	fp, r3
 8006236:	2300      	movs	r3, #0
 8006238:	b0a1      	sub	sp, #132	; 0x84
 800623a:	931c      	str	r3, [sp, #112]	; 0x70
 800623c:	4ba1      	ldr	r3, [pc, #644]	; (80064c4 <_strtod_l+0x294>)
 800623e:	4682      	mov	sl, r0
 8006240:	681f      	ldr	r7, [r3, #0]
 8006242:	460e      	mov	r6, r1
 8006244:	4638      	mov	r0, r7
 8006246:	9217      	str	r2, [sp, #92]	; 0x5c
 8006248:	f7f9 ff82 	bl	8000150 <strlen>
 800624c:	f04f 0800 	mov.w	r8, #0
 8006250:	4604      	mov	r4, r0
 8006252:	f04f 0900 	mov.w	r9, #0
 8006256:	961b      	str	r6, [sp, #108]	; 0x6c
 8006258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	2a2b      	cmp	r2, #43	; 0x2b
 800625e:	d04c      	beq.n	80062fa <_strtod_l+0xca>
 8006260:	d83a      	bhi.n	80062d8 <_strtod_l+0xa8>
 8006262:	2a0d      	cmp	r2, #13
 8006264:	d833      	bhi.n	80062ce <_strtod_l+0x9e>
 8006266:	2a08      	cmp	r2, #8
 8006268:	d833      	bhi.n	80062d2 <_strtod_l+0xa2>
 800626a:	2a00      	cmp	r2, #0
 800626c:	d03d      	beq.n	80062ea <_strtod_l+0xba>
 800626e:	2300      	movs	r3, #0
 8006270:	930c      	str	r3, [sp, #48]	; 0x30
 8006272:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006274:	782b      	ldrb	r3, [r5, #0]
 8006276:	2b30      	cmp	r3, #48	; 0x30
 8006278:	f040 80af 	bne.w	80063da <_strtod_l+0x1aa>
 800627c:	786b      	ldrb	r3, [r5, #1]
 800627e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006282:	2b58      	cmp	r3, #88	; 0x58
 8006284:	d16c      	bne.n	8006360 <_strtod_l+0x130>
 8006286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006288:	4650      	mov	r0, sl
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	ab1c      	add	r3, sp, #112	; 0x70
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4a8d      	ldr	r2, [pc, #564]	; (80064c8 <_strtod_l+0x298>)
 8006292:	f8cd b008 	str.w	fp, [sp, #8]
 8006296:	ab1d      	add	r3, sp, #116	; 0x74
 8006298:	a91b      	add	r1, sp, #108	; 0x6c
 800629a:	f001 f94d 	bl	8007538 <__gethex>
 800629e:	f010 0607 	ands.w	r6, r0, #7
 80062a2:	4604      	mov	r4, r0
 80062a4:	d005      	beq.n	80062b2 <_strtod_l+0x82>
 80062a6:	2e06      	cmp	r6, #6
 80062a8:	d129      	bne.n	80062fe <_strtod_l+0xce>
 80062aa:	2300      	movs	r3, #0
 80062ac:	3501      	adds	r5, #1
 80062ae:	951b      	str	r5, [sp, #108]	; 0x6c
 80062b0:	930c      	str	r3, [sp, #48]	; 0x30
 80062b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8596 	bne.w	8006de6 <_strtod_l+0xbb6>
 80062ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062bc:	b1d3      	cbz	r3, 80062f4 <_strtod_l+0xc4>
 80062be:	4642      	mov	r2, r8
 80062c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	b021      	add	sp, #132	; 0x84
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ce:	2a20      	cmp	r2, #32
 80062d0:	d1cd      	bne.n	800626e <_strtod_l+0x3e>
 80062d2:	3301      	adds	r3, #1
 80062d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80062d6:	e7bf      	b.n	8006258 <_strtod_l+0x28>
 80062d8:	2a2d      	cmp	r2, #45	; 0x2d
 80062da:	d1c8      	bne.n	800626e <_strtod_l+0x3e>
 80062dc:	2201      	movs	r2, #1
 80062de:	920c      	str	r2, [sp, #48]	; 0x30
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1c3      	bne.n	8006272 <_strtod_l+0x42>
 80062ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 8577 	bne.w	8006de2 <_strtod_l+0xbb2>
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	e7e4      	b.n	80062c4 <_strtod_l+0x94>
 80062fa:	2200      	movs	r2, #0
 80062fc:	e7ef      	b.n	80062de <_strtod_l+0xae>
 80062fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006300:	b13a      	cbz	r2, 8006312 <_strtod_l+0xe2>
 8006302:	2135      	movs	r1, #53	; 0x35
 8006304:	a81e      	add	r0, sp, #120	; 0x78
 8006306:	f002 f923 	bl	8008550 <__copybits>
 800630a:	4650      	mov	r0, sl
 800630c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800630e:	f001 fceb 	bl	8007ce8 <_Bfree>
 8006312:	3e01      	subs	r6, #1
 8006314:	2e05      	cmp	r6, #5
 8006316:	d807      	bhi.n	8006328 <_strtod_l+0xf8>
 8006318:	e8df f006 	tbb	[pc, r6]
 800631c:	1d180b0e 	.word	0x1d180b0e
 8006320:	030e      	.short	0x030e
 8006322:	f04f 0900 	mov.w	r9, #0
 8006326:	46c8      	mov	r8, r9
 8006328:	0721      	lsls	r1, r4, #28
 800632a:	d5c2      	bpl.n	80062b2 <_strtod_l+0x82>
 800632c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006330:	e7bf      	b.n	80062b2 <_strtod_l+0x82>
 8006332:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006336:	e7f7      	b.n	8006328 <_strtod_l+0xf8>
 8006338:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800633a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800633e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006346:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800634a:	e7ed      	b.n	8006328 <_strtod_l+0xf8>
 800634c:	f04f 0800 	mov.w	r8, #0
 8006350:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80064cc <_strtod_l+0x29c>
 8006354:	e7e8      	b.n	8006328 <_strtod_l+0xf8>
 8006356:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800635a:	f04f 38ff 	mov.w	r8, #4294967295
 800635e:	e7e3      	b.n	8006328 <_strtod_l+0xf8>
 8006360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	921b      	str	r2, [sp, #108]	; 0x6c
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b30      	cmp	r3, #48	; 0x30
 800636a:	d0f9      	beq.n	8006360 <_strtod_l+0x130>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0a0      	beq.n	80062b2 <_strtod_l+0x82>
 8006370:	2301      	movs	r3, #1
 8006372:	9307      	str	r3, [sp, #28]
 8006374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006376:	220a      	movs	r2, #10
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	2300      	movs	r3, #0
 800637c:	469b      	mov	fp, r3
 800637e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006382:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006384:	7805      	ldrb	r5, [r0, #0]
 8006386:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800638a:	b2d9      	uxtb	r1, r3
 800638c:	2909      	cmp	r1, #9
 800638e:	d926      	bls.n	80063de <_strtod_l+0x1ae>
 8006390:	4622      	mov	r2, r4
 8006392:	4639      	mov	r1, r7
 8006394:	f002 fcee 	bl	8008d74 <strncmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	d032      	beq.n	8006402 <_strtod_l+0x1d2>
 800639c:	2000      	movs	r0, #0
 800639e:	462b      	mov	r3, r5
 80063a0:	465c      	mov	r4, fp
 80063a2:	4602      	mov	r2, r0
 80063a4:	9004      	str	r0, [sp, #16]
 80063a6:	2b65      	cmp	r3, #101	; 0x65
 80063a8:	d001      	beq.n	80063ae <_strtod_l+0x17e>
 80063aa:	2b45      	cmp	r3, #69	; 0x45
 80063ac:	d113      	bne.n	80063d6 <_strtod_l+0x1a6>
 80063ae:	b91c      	cbnz	r4, 80063b8 <_strtod_l+0x188>
 80063b0:	9b07      	ldr	r3, [sp, #28]
 80063b2:	4303      	orrs	r3, r0
 80063b4:	d099      	beq.n	80062ea <_strtod_l+0xba>
 80063b6:	2400      	movs	r4, #0
 80063b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80063ba:	1c73      	adds	r3, r6, #1
 80063bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80063be:	7873      	ldrb	r3, [r6, #1]
 80063c0:	2b2b      	cmp	r3, #43	; 0x2b
 80063c2:	d078      	beq.n	80064b6 <_strtod_l+0x286>
 80063c4:	2b2d      	cmp	r3, #45	; 0x2d
 80063c6:	d07b      	beq.n	80064c0 <_strtod_l+0x290>
 80063c8:	2700      	movs	r7, #0
 80063ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80063ce:	2909      	cmp	r1, #9
 80063d0:	f240 8082 	bls.w	80064d8 <_strtod_l+0x2a8>
 80063d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80063d6:	2500      	movs	r5, #0
 80063d8:	e09e      	b.n	8006518 <_strtod_l+0x2e8>
 80063da:	2300      	movs	r3, #0
 80063dc:	e7c9      	b.n	8006372 <_strtod_l+0x142>
 80063de:	f1bb 0f08 	cmp.w	fp, #8
 80063e2:	bfd5      	itete	le
 80063e4:	9906      	ldrle	r1, [sp, #24]
 80063e6:	9905      	ldrgt	r1, [sp, #20]
 80063e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80063ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80063f0:	f100 0001 	add.w	r0, r0, #1
 80063f4:	bfd4      	ite	le
 80063f6:	9306      	strle	r3, [sp, #24]
 80063f8:	9305      	strgt	r3, [sp, #20]
 80063fa:	f10b 0b01 	add.w	fp, fp, #1
 80063fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8006400:	e7bf      	b.n	8006382 <_strtod_l+0x152>
 8006402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006404:	191a      	adds	r2, r3, r4
 8006406:	921b      	str	r2, [sp, #108]	; 0x6c
 8006408:	5d1b      	ldrb	r3, [r3, r4]
 800640a:	f1bb 0f00 	cmp.w	fp, #0
 800640e:	d036      	beq.n	800647e <_strtod_l+0x24e>
 8006410:	465c      	mov	r4, fp
 8006412:	9004      	str	r0, [sp, #16]
 8006414:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006418:	2a09      	cmp	r2, #9
 800641a:	d912      	bls.n	8006442 <_strtod_l+0x212>
 800641c:	2201      	movs	r2, #1
 800641e:	e7c2      	b.n	80063a6 <_strtod_l+0x176>
 8006420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006422:	3001      	adds	r0, #1
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	921b      	str	r2, [sp, #108]	; 0x6c
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b30      	cmp	r3, #48	; 0x30
 800642c:	d0f8      	beq.n	8006420 <_strtod_l+0x1f0>
 800642e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006432:	2a08      	cmp	r2, #8
 8006434:	f200 84dc 	bhi.w	8006df0 <_strtod_l+0xbc0>
 8006438:	9004      	str	r0, [sp, #16]
 800643a:	2000      	movs	r0, #0
 800643c:	4604      	mov	r4, r0
 800643e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006440:	9208      	str	r2, [sp, #32]
 8006442:	3b30      	subs	r3, #48	; 0x30
 8006444:	f100 0201 	add.w	r2, r0, #1
 8006448:	d013      	beq.n	8006472 <_strtod_l+0x242>
 800644a:	9904      	ldr	r1, [sp, #16]
 800644c:	1905      	adds	r5, r0, r4
 800644e:	4411      	add	r1, r2
 8006450:	9104      	str	r1, [sp, #16]
 8006452:	4622      	mov	r2, r4
 8006454:	210a      	movs	r1, #10
 8006456:	42aa      	cmp	r2, r5
 8006458:	d113      	bne.n	8006482 <_strtod_l+0x252>
 800645a:	1822      	adds	r2, r4, r0
 800645c:	2a08      	cmp	r2, #8
 800645e:	f104 0401 	add.w	r4, r4, #1
 8006462:	4404      	add	r4, r0
 8006464:	dc1b      	bgt.n	800649e <_strtod_l+0x26e>
 8006466:	220a      	movs	r2, #10
 8006468:	9906      	ldr	r1, [sp, #24]
 800646a:	fb02 3301 	mla	r3, r2, r1, r3
 800646e:	9306      	str	r3, [sp, #24]
 8006470:	2200      	movs	r2, #0
 8006472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006474:	4610      	mov	r0, r2
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	911b      	str	r1, [sp, #108]	; 0x6c
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	e7ca      	b.n	8006414 <_strtod_l+0x1e4>
 800647e:	4658      	mov	r0, fp
 8006480:	e7d3      	b.n	800642a <_strtod_l+0x1fa>
 8006482:	2a08      	cmp	r2, #8
 8006484:	dc04      	bgt.n	8006490 <_strtod_l+0x260>
 8006486:	9f06      	ldr	r7, [sp, #24]
 8006488:	434f      	muls	r7, r1
 800648a:	9706      	str	r7, [sp, #24]
 800648c:	3201      	adds	r2, #1
 800648e:	e7e2      	b.n	8006456 <_strtod_l+0x226>
 8006490:	1c57      	adds	r7, r2, #1
 8006492:	2f10      	cmp	r7, #16
 8006494:	bfde      	ittt	le
 8006496:	9f05      	ldrle	r7, [sp, #20]
 8006498:	434f      	mulle	r7, r1
 800649a:	9705      	strle	r7, [sp, #20]
 800649c:	e7f6      	b.n	800648c <_strtod_l+0x25c>
 800649e:	2c10      	cmp	r4, #16
 80064a0:	bfdf      	itttt	le
 80064a2:	220a      	movle	r2, #10
 80064a4:	9905      	ldrle	r1, [sp, #20]
 80064a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80064aa:	9305      	strle	r3, [sp, #20]
 80064ac:	e7e0      	b.n	8006470 <_strtod_l+0x240>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2201      	movs	r2, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	e77c      	b.n	80063b0 <_strtod_l+0x180>
 80064b6:	2700      	movs	r7, #0
 80064b8:	1cb3      	adds	r3, r6, #2
 80064ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80064bc:	78b3      	ldrb	r3, [r6, #2]
 80064be:	e784      	b.n	80063ca <_strtod_l+0x19a>
 80064c0:	2701      	movs	r7, #1
 80064c2:	e7f9      	b.n	80064b8 <_strtod_l+0x288>
 80064c4:	08009d80 	.word	0x08009d80
 80064c8:	08009b4c 	.word	0x08009b4c
 80064cc:	7ff00000 	.word	0x7ff00000
 80064d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	911b      	str	r1, [sp, #108]	; 0x6c
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b30      	cmp	r3, #48	; 0x30
 80064da:	d0f9      	beq.n	80064d0 <_strtod_l+0x2a0>
 80064dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80064e0:	2908      	cmp	r1, #8
 80064e2:	f63f af78 	bhi.w	80063d6 <_strtod_l+0x1a6>
 80064e6:	f04f 0e0a 	mov.w	lr, #10
 80064ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80064ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064f4:	1c59      	adds	r1, r3, #1
 80064f6:	911b      	str	r1, [sp, #108]	; 0x6c
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80064fe:	2d09      	cmp	r5, #9
 8006500:	d935      	bls.n	800656e <_strtod_l+0x33e>
 8006502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006504:	1b49      	subs	r1, r1, r5
 8006506:	2908      	cmp	r1, #8
 8006508:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800650c:	dc02      	bgt.n	8006514 <_strtod_l+0x2e4>
 800650e:	4565      	cmp	r5, ip
 8006510:	bfa8      	it	ge
 8006512:	4665      	movge	r5, ip
 8006514:	b107      	cbz	r7, 8006518 <_strtod_l+0x2e8>
 8006516:	426d      	negs	r5, r5
 8006518:	2c00      	cmp	r4, #0
 800651a:	d14c      	bne.n	80065b6 <_strtod_l+0x386>
 800651c:	9907      	ldr	r1, [sp, #28]
 800651e:	4301      	orrs	r1, r0
 8006520:	f47f aec7 	bne.w	80062b2 <_strtod_l+0x82>
 8006524:	2a00      	cmp	r2, #0
 8006526:	f47f aee0 	bne.w	80062ea <_strtod_l+0xba>
 800652a:	2b69      	cmp	r3, #105	; 0x69
 800652c:	d026      	beq.n	800657c <_strtod_l+0x34c>
 800652e:	dc23      	bgt.n	8006578 <_strtod_l+0x348>
 8006530:	2b49      	cmp	r3, #73	; 0x49
 8006532:	d023      	beq.n	800657c <_strtod_l+0x34c>
 8006534:	2b4e      	cmp	r3, #78	; 0x4e
 8006536:	f47f aed8 	bne.w	80062ea <_strtod_l+0xba>
 800653a:	499c      	ldr	r1, [pc, #624]	; (80067ac <_strtod_l+0x57c>)
 800653c:	a81b      	add	r0, sp, #108	; 0x6c
 800653e:	f001 fa49 	bl	80079d4 <__match>
 8006542:	2800      	cmp	r0, #0
 8006544:	f43f aed1 	beq.w	80062ea <_strtod_l+0xba>
 8006548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b28      	cmp	r3, #40	; 0x28
 800654e:	d12c      	bne.n	80065aa <_strtod_l+0x37a>
 8006550:	4997      	ldr	r1, [pc, #604]	; (80067b0 <_strtod_l+0x580>)
 8006552:	aa1e      	add	r2, sp, #120	; 0x78
 8006554:	a81b      	add	r0, sp, #108	; 0x6c
 8006556:	f001 fa51 	bl	80079fc <__hexnan>
 800655a:	2805      	cmp	r0, #5
 800655c:	d125      	bne.n	80065aa <_strtod_l+0x37a>
 800655e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006560:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006564:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006568:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800656c:	e6a1      	b.n	80062b2 <_strtod_l+0x82>
 800656e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006572:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006576:	e7bc      	b.n	80064f2 <_strtod_l+0x2c2>
 8006578:	2b6e      	cmp	r3, #110	; 0x6e
 800657a:	e7dc      	b.n	8006536 <_strtod_l+0x306>
 800657c:	498d      	ldr	r1, [pc, #564]	; (80067b4 <_strtod_l+0x584>)
 800657e:	a81b      	add	r0, sp, #108	; 0x6c
 8006580:	f001 fa28 	bl	80079d4 <__match>
 8006584:	2800      	cmp	r0, #0
 8006586:	f43f aeb0 	beq.w	80062ea <_strtod_l+0xba>
 800658a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800658c:	498a      	ldr	r1, [pc, #552]	; (80067b8 <_strtod_l+0x588>)
 800658e:	3b01      	subs	r3, #1
 8006590:	a81b      	add	r0, sp, #108	; 0x6c
 8006592:	931b      	str	r3, [sp, #108]	; 0x6c
 8006594:	f001 fa1e 	bl	80079d4 <__match>
 8006598:	b910      	cbnz	r0, 80065a0 <_strtod_l+0x370>
 800659a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800659c:	3301      	adds	r3, #1
 800659e:	931b      	str	r3, [sp, #108]	; 0x6c
 80065a0:	f04f 0800 	mov.w	r8, #0
 80065a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80067c8 <_strtod_l+0x598>
 80065a8:	e683      	b.n	80062b2 <_strtod_l+0x82>
 80065aa:	4884      	ldr	r0, [pc, #528]	; (80067bc <_strtod_l+0x58c>)
 80065ac:	f002 fbcc 	bl	8008d48 <nan>
 80065b0:	4680      	mov	r8, r0
 80065b2:	4689      	mov	r9, r1
 80065b4:	e67d      	b.n	80062b2 <_strtod_l+0x82>
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	f1bb 0f00 	cmp.w	fp, #0
 80065bc:	bf08      	it	eq
 80065be:	46a3      	moveq	fp, r4
 80065c0:	1aeb      	subs	r3, r5, r3
 80065c2:	2c10      	cmp	r4, #16
 80065c4:	9806      	ldr	r0, [sp, #24]
 80065c6:	4626      	mov	r6, r4
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	bfa8      	it	ge
 80065cc:	2610      	movge	r6, #16
 80065ce:	f7f9 ff09 	bl	80003e4 <__aeabi_ui2d>
 80065d2:	2c09      	cmp	r4, #9
 80065d4:	4680      	mov	r8, r0
 80065d6:	4689      	mov	r9, r1
 80065d8:	dd13      	ble.n	8006602 <_strtod_l+0x3d2>
 80065da:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <_strtod_l+0x590>)
 80065dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065e4:	f7f9 ff78 	bl	80004d8 <__aeabi_dmul>
 80065e8:	4680      	mov	r8, r0
 80065ea:	9805      	ldr	r0, [sp, #20]
 80065ec:	4689      	mov	r9, r1
 80065ee:	f7f9 fef9 	bl	80003e4 <__aeabi_ui2d>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7f9 fdb7 	bl	800016c <__adddf3>
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	2c0f      	cmp	r4, #15
 8006604:	dc36      	bgt.n	8006674 <_strtod_l+0x444>
 8006606:	9b07      	ldr	r3, [sp, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f43f ae52 	beq.w	80062b2 <_strtod_l+0x82>
 800660e:	dd22      	ble.n	8006656 <_strtod_l+0x426>
 8006610:	2b16      	cmp	r3, #22
 8006612:	dc09      	bgt.n	8006628 <_strtod_l+0x3f8>
 8006614:	4c6a      	ldr	r4, [pc, #424]	; (80067c0 <_strtod_l+0x590>)
 8006616:	4642      	mov	r2, r8
 8006618:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800661c:	464b      	mov	r3, r9
 800661e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006622:	f7f9 ff59 	bl	80004d8 <__aeabi_dmul>
 8006626:	e7c3      	b.n	80065b0 <_strtod_l+0x380>
 8006628:	9a07      	ldr	r2, [sp, #28]
 800662a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800662e:	4293      	cmp	r3, r2
 8006630:	db20      	blt.n	8006674 <_strtod_l+0x444>
 8006632:	4d63      	ldr	r5, [pc, #396]	; (80067c0 <_strtod_l+0x590>)
 8006634:	f1c4 040f 	rsb	r4, r4, #15
 8006638:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800663c:	4642      	mov	r2, r8
 800663e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006642:	464b      	mov	r3, r9
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	1b1c      	subs	r4, r3, r4
 800664c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006654:	e7e5      	b.n	8006622 <_strtod_l+0x3f2>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	3316      	adds	r3, #22
 800665a:	db0b      	blt.n	8006674 <_strtod_l+0x444>
 800665c:	9b04      	ldr	r3, [sp, #16]
 800665e:	4a58      	ldr	r2, [pc, #352]	; (80067c0 <_strtod_l+0x590>)
 8006660:	1b5d      	subs	r5, r3, r5
 8006662:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006666:	4640      	mov	r0, r8
 8006668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800666c:	4649      	mov	r1, r9
 800666e:	f7fa f85d 	bl	800072c <__aeabi_ddiv>
 8006672:	e79d      	b.n	80065b0 <_strtod_l+0x380>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	1ba6      	subs	r6, r4, r6
 8006678:	441e      	add	r6, r3
 800667a:	2e00      	cmp	r6, #0
 800667c:	dd71      	ble.n	8006762 <_strtod_l+0x532>
 800667e:	f016 030f 	ands.w	r3, r6, #15
 8006682:	d00a      	beq.n	800669a <_strtod_l+0x46a>
 8006684:	494e      	ldr	r1, [pc, #312]	; (80067c0 <_strtod_l+0x590>)
 8006686:	4642      	mov	r2, r8
 8006688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800668c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006690:	464b      	mov	r3, r9
 8006692:	f7f9 ff21 	bl	80004d8 <__aeabi_dmul>
 8006696:	4680      	mov	r8, r0
 8006698:	4689      	mov	r9, r1
 800669a:	f036 060f 	bics.w	r6, r6, #15
 800669e:	d050      	beq.n	8006742 <_strtod_l+0x512>
 80066a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80066a4:	dd27      	ble.n	80066f6 <_strtod_l+0x4c6>
 80066a6:	f04f 0b00 	mov.w	fp, #0
 80066aa:	f8cd b010 	str.w	fp, [sp, #16]
 80066ae:	f8cd b020 	str.w	fp, [sp, #32]
 80066b2:	f8cd b018 	str.w	fp, [sp, #24]
 80066b6:	2322      	movs	r3, #34	; 0x22
 80066b8:	f04f 0800 	mov.w	r8, #0
 80066bc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80067c8 <_strtod_l+0x598>
 80066c0:	f8ca 3000 	str.w	r3, [sl]
 80066c4:	9b08      	ldr	r3, [sp, #32]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f43f adf3 	beq.w	80062b2 <_strtod_l+0x82>
 80066cc:	4650      	mov	r0, sl
 80066ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066d0:	f001 fb0a 	bl	8007ce8 <_Bfree>
 80066d4:	4650      	mov	r0, sl
 80066d6:	9906      	ldr	r1, [sp, #24]
 80066d8:	f001 fb06 	bl	8007ce8 <_Bfree>
 80066dc:	4650      	mov	r0, sl
 80066de:	9904      	ldr	r1, [sp, #16]
 80066e0:	f001 fb02 	bl	8007ce8 <_Bfree>
 80066e4:	4650      	mov	r0, sl
 80066e6:	9908      	ldr	r1, [sp, #32]
 80066e8:	f001 fafe 	bl	8007ce8 <_Bfree>
 80066ec:	4659      	mov	r1, fp
 80066ee:	4650      	mov	r0, sl
 80066f0:	f001 fafa 	bl	8007ce8 <_Bfree>
 80066f4:	e5dd      	b.n	80062b2 <_strtod_l+0x82>
 80066f6:	2300      	movs	r3, #0
 80066f8:	4640      	mov	r0, r8
 80066fa:	4649      	mov	r1, r9
 80066fc:	461f      	mov	r7, r3
 80066fe:	1136      	asrs	r6, r6, #4
 8006700:	2e01      	cmp	r6, #1
 8006702:	dc21      	bgt.n	8006748 <_strtod_l+0x518>
 8006704:	b10b      	cbz	r3, 800670a <_strtod_l+0x4da>
 8006706:	4680      	mov	r8, r0
 8006708:	4689      	mov	r9, r1
 800670a:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <_strtod_l+0x594>)
 800670c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006710:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006714:	4642      	mov	r2, r8
 8006716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671a:	464b      	mov	r3, r9
 800671c:	f7f9 fedc 	bl	80004d8 <__aeabi_dmul>
 8006720:	4b29      	ldr	r3, [pc, #164]	; (80067c8 <_strtod_l+0x598>)
 8006722:	460a      	mov	r2, r1
 8006724:	400b      	ands	r3, r1
 8006726:	4929      	ldr	r1, [pc, #164]	; (80067cc <_strtod_l+0x59c>)
 8006728:	4680      	mov	r8, r0
 800672a:	428b      	cmp	r3, r1
 800672c:	d8bb      	bhi.n	80066a6 <_strtod_l+0x476>
 800672e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006732:	428b      	cmp	r3, r1
 8006734:	bf86      	itte	hi
 8006736:	f04f 38ff 	movhi.w	r8, #4294967295
 800673a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80067d0 <_strtod_l+0x5a0>
 800673e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006742:	2300      	movs	r3, #0
 8006744:	9305      	str	r3, [sp, #20]
 8006746:	e07e      	b.n	8006846 <_strtod_l+0x616>
 8006748:	07f2      	lsls	r2, r6, #31
 800674a:	d507      	bpl.n	800675c <_strtod_l+0x52c>
 800674c:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <_strtod_l+0x594>)
 800674e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f7f9 febf 	bl	80004d8 <__aeabi_dmul>
 800675a:	2301      	movs	r3, #1
 800675c:	3701      	adds	r7, #1
 800675e:	1076      	asrs	r6, r6, #1
 8006760:	e7ce      	b.n	8006700 <_strtod_l+0x4d0>
 8006762:	d0ee      	beq.n	8006742 <_strtod_l+0x512>
 8006764:	4276      	negs	r6, r6
 8006766:	f016 020f 	ands.w	r2, r6, #15
 800676a:	d00a      	beq.n	8006782 <_strtod_l+0x552>
 800676c:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <_strtod_l+0x590>)
 800676e:	4640      	mov	r0, r8
 8006770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006774:	4649      	mov	r1, r9
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f7f9 ffd7 	bl	800072c <__aeabi_ddiv>
 800677e:	4680      	mov	r8, r0
 8006780:	4689      	mov	r9, r1
 8006782:	1136      	asrs	r6, r6, #4
 8006784:	d0dd      	beq.n	8006742 <_strtod_l+0x512>
 8006786:	2e1f      	cmp	r6, #31
 8006788:	dd24      	ble.n	80067d4 <_strtod_l+0x5a4>
 800678a:	f04f 0b00 	mov.w	fp, #0
 800678e:	f8cd b010 	str.w	fp, [sp, #16]
 8006792:	f8cd b020 	str.w	fp, [sp, #32]
 8006796:	f8cd b018 	str.w	fp, [sp, #24]
 800679a:	2322      	movs	r3, #34	; 0x22
 800679c:	f04f 0800 	mov.w	r8, #0
 80067a0:	f04f 0900 	mov.w	r9, #0
 80067a4:	f8ca 3000 	str.w	r3, [sl]
 80067a8:	e78c      	b.n	80066c4 <_strtod_l+0x494>
 80067aa:	bf00      	nop
 80067ac:	08009b46 	.word	0x08009b46
 80067b0:	08009b60 	.word	0x08009b60
 80067b4:	08009b3d 	.word	0x08009b3d
 80067b8:	08009b40 	.word	0x08009b40
 80067bc:	08009f7a 	.word	0x08009f7a
 80067c0:	08009e38 	.word	0x08009e38
 80067c4:	08009e10 	.word	0x08009e10
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	7ca00000 	.word	0x7ca00000
 80067d0:	7fefffff 	.word	0x7fefffff
 80067d4:	f016 0310 	ands.w	r3, r6, #16
 80067d8:	bf18      	it	ne
 80067da:	236a      	movne	r3, #106	; 0x6a
 80067dc:	4640      	mov	r0, r8
 80067de:	9305      	str	r3, [sp, #20]
 80067e0:	4649      	mov	r1, r9
 80067e2:	2300      	movs	r3, #0
 80067e4:	4fb2      	ldr	r7, [pc, #712]	; (8006ab0 <_strtod_l+0x880>)
 80067e6:	07f2      	lsls	r2, r6, #31
 80067e8:	d504      	bpl.n	80067f4 <_strtod_l+0x5c4>
 80067ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ee:	f7f9 fe73 	bl	80004d8 <__aeabi_dmul>
 80067f2:	2301      	movs	r3, #1
 80067f4:	1076      	asrs	r6, r6, #1
 80067f6:	f107 0708 	add.w	r7, r7, #8
 80067fa:	d1f4      	bne.n	80067e6 <_strtod_l+0x5b6>
 80067fc:	b10b      	cbz	r3, 8006802 <_strtod_l+0x5d2>
 80067fe:	4680      	mov	r8, r0
 8006800:	4689      	mov	r9, r1
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	b1bb      	cbz	r3, 8006836 <_strtod_l+0x606>
 8006806:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800680a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800680e:	2b00      	cmp	r3, #0
 8006810:	4649      	mov	r1, r9
 8006812:	dd10      	ble.n	8006836 <_strtod_l+0x606>
 8006814:	2b1f      	cmp	r3, #31
 8006816:	f340 812b 	ble.w	8006a70 <_strtod_l+0x840>
 800681a:	2b34      	cmp	r3, #52	; 0x34
 800681c:	bfd8      	it	le
 800681e:	f04f 32ff 	movle.w	r2, #4294967295
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	bfcf      	iteee	gt
 8006828:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800682c:	3b20      	suble	r3, #32
 800682e:	fa02 f303 	lslle.w	r3, r2, r3
 8006832:	ea03 0901 	andle.w	r9, r3, r1
 8006836:	2200      	movs	r2, #0
 8006838:	2300      	movs	r3, #0
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	f7fa f8b3 	bl	80009a8 <__aeabi_dcmpeq>
 8006842:	2800      	cmp	r0, #0
 8006844:	d1a1      	bne.n	800678a <_strtod_l+0x55a>
 8006846:	9b06      	ldr	r3, [sp, #24]
 8006848:	465a      	mov	r2, fp
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4650      	mov	r0, sl
 800684e:	4623      	mov	r3, r4
 8006850:	9908      	ldr	r1, [sp, #32]
 8006852:	f001 fab5 	bl	8007dc0 <__s2b>
 8006856:	9008      	str	r0, [sp, #32]
 8006858:	2800      	cmp	r0, #0
 800685a:	f43f af24 	beq.w	80066a6 <_strtod_l+0x476>
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	f04f 0b00 	mov.w	fp, #0
 8006864:	1b5d      	subs	r5, r3, r5
 8006866:	9b07      	ldr	r3, [sp, #28]
 8006868:	f8cd b010 	str.w	fp, [sp, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfb4      	ite	lt
 8006870:	462b      	movlt	r3, r5
 8006872:	2300      	movge	r3, #0
 8006874:	930e      	str	r3, [sp, #56]	; 0x38
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800687c:	9316      	str	r3, [sp, #88]	; 0x58
 800687e:	9b08      	ldr	r3, [sp, #32]
 8006880:	4650      	mov	r0, sl
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	f001 f9f0 	bl	8007c68 <_Balloc>
 8006888:	9006      	str	r0, [sp, #24]
 800688a:	2800      	cmp	r0, #0
 800688c:	f43f af13 	beq.w	80066b6 <_strtod_l+0x486>
 8006890:	9b08      	ldr	r3, [sp, #32]
 8006892:	300c      	adds	r0, #12
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	f103 010c 	add.w	r1, r3, #12
 800689a:	3202      	adds	r2, #2
 800689c:	0092      	lsls	r2, r2, #2
 800689e:	f001 f9d5 	bl	8007c4c <memcpy>
 80068a2:	ab1e      	add	r3, sp, #120	; 0x78
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	ab1d      	add	r3, sp, #116	; 0x74
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4642      	mov	r2, r8
 80068ac:	464b      	mov	r3, r9
 80068ae:	4650      	mov	r0, sl
 80068b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80068b4:	f001 fdc2 	bl	800843c <__d2b>
 80068b8:	901c      	str	r0, [sp, #112]	; 0x70
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f43f aefb 	beq.w	80066b6 <_strtod_l+0x486>
 80068c0:	2101      	movs	r1, #1
 80068c2:	4650      	mov	r0, sl
 80068c4:	f001 fb14 	bl	8007ef0 <__i2b>
 80068c8:	4603      	mov	r3, r0
 80068ca:	9004      	str	r0, [sp, #16]
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f43f aef2 	beq.w	80066b6 <_strtod_l+0x486>
 80068d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80068d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	bfab      	itete	ge
 80068da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80068dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80068de:	18ee      	addge	r6, r5, r3
 80068e0:	1b5c      	sublt	r4, r3, r5
 80068e2:	9b05      	ldr	r3, [sp, #20]
 80068e4:	bfa8      	it	ge
 80068e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80068e8:	eba5 0503 	sub.w	r5, r5, r3
 80068ec:	4415      	add	r5, r2
 80068ee:	4b71      	ldr	r3, [pc, #452]	; (8006ab4 <_strtod_l+0x884>)
 80068f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80068f4:	bfb8      	it	lt
 80068f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80068f8:	429d      	cmp	r5, r3
 80068fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068fe:	f280 80c9 	bge.w	8006a94 <_strtod_l+0x864>
 8006902:	1b5b      	subs	r3, r3, r5
 8006904:	2b1f      	cmp	r3, #31
 8006906:	f04f 0701 	mov.w	r7, #1
 800690a:	eba2 0203 	sub.w	r2, r2, r3
 800690e:	f300 80b6 	bgt.w	8006a7e <_strtod_l+0x84e>
 8006912:	2500      	movs	r5, #0
 8006914:	fa07 f303 	lsl.w	r3, r7, r3
 8006918:	930f      	str	r3, [sp, #60]	; 0x3c
 800691a:	18b7      	adds	r7, r6, r2
 800691c:	9b05      	ldr	r3, [sp, #20]
 800691e:	42be      	cmp	r6, r7
 8006920:	4414      	add	r4, r2
 8006922:	441c      	add	r4, r3
 8006924:	4633      	mov	r3, r6
 8006926:	bfa8      	it	ge
 8006928:	463b      	movge	r3, r7
 800692a:	42a3      	cmp	r3, r4
 800692c:	bfa8      	it	ge
 800692e:	4623      	movge	r3, r4
 8006930:	2b00      	cmp	r3, #0
 8006932:	bfc2      	ittt	gt
 8006934:	1aff      	subgt	r7, r7, r3
 8006936:	1ae4      	subgt	r4, r4, r3
 8006938:	1af6      	subgt	r6, r6, r3
 800693a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd17      	ble.n	8006970 <_strtod_l+0x740>
 8006940:	461a      	mov	r2, r3
 8006942:	4650      	mov	r0, sl
 8006944:	9904      	ldr	r1, [sp, #16]
 8006946:	f001 fb8d 	bl	8008064 <__pow5mult>
 800694a:	9004      	str	r0, [sp, #16]
 800694c:	2800      	cmp	r0, #0
 800694e:	f43f aeb2 	beq.w	80066b6 <_strtod_l+0x486>
 8006952:	4601      	mov	r1, r0
 8006954:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006956:	4650      	mov	r0, sl
 8006958:	f001 fae0 	bl	8007f1c <__multiply>
 800695c:	9009      	str	r0, [sp, #36]	; 0x24
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f aea9 	beq.w	80066b6 <_strtod_l+0x486>
 8006964:	4650      	mov	r0, sl
 8006966:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006968:	f001 f9be 	bl	8007ce8 <_Bfree>
 800696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696e:	931c      	str	r3, [sp, #112]	; 0x70
 8006970:	2f00      	cmp	r7, #0
 8006972:	f300 8093 	bgt.w	8006a9c <_strtod_l+0x86c>
 8006976:	9b07      	ldr	r3, [sp, #28]
 8006978:	2b00      	cmp	r3, #0
 800697a:	dd08      	ble.n	800698e <_strtod_l+0x75e>
 800697c:	4650      	mov	r0, sl
 800697e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006980:	9906      	ldr	r1, [sp, #24]
 8006982:	f001 fb6f 	bl	8008064 <__pow5mult>
 8006986:	9006      	str	r0, [sp, #24]
 8006988:	2800      	cmp	r0, #0
 800698a:	f43f ae94 	beq.w	80066b6 <_strtod_l+0x486>
 800698e:	2c00      	cmp	r4, #0
 8006990:	dd08      	ble.n	80069a4 <_strtod_l+0x774>
 8006992:	4622      	mov	r2, r4
 8006994:	4650      	mov	r0, sl
 8006996:	9906      	ldr	r1, [sp, #24]
 8006998:	f001 fbbe 	bl	8008118 <__lshift>
 800699c:	9006      	str	r0, [sp, #24]
 800699e:	2800      	cmp	r0, #0
 80069a0:	f43f ae89 	beq.w	80066b6 <_strtod_l+0x486>
 80069a4:	2e00      	cmp	r6, #0
 80069a6:	dd08      	ble.n	80069ba <_strtod_l+0x78a>
 80069a8:	4632      	mov	r2, r6
 80069aa:	4650      	mov	r0, sl
 80069ac:	9904      	ldr	r1, [sp, #16]
 80069ae:	f001 fbb3 	bl	8008118 <__lshift>
 80069b2:	9004      	str	r0, [sp, #16]
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f43f ae7e 	beq.w	80066b6 <_strtod_l+0x486>
 80069ba:	4650      	mov	r0, sl
 80069bc:	9a06      	ldr	r2, [sp, #24]
 80069be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80069c0:	f001 fc32 	bl	8008228 <__mdiff>
 80069c4:	4683      	mov	fp, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f43f ae75 	beq.w	80066b6 <_strtod_l+0x486>
 80069cc:	2400      	movs	r4, #0
 80069ce:	68c3      	ldr	r3, [r0, #12]
 80069d0:	9904      	ldr	r1, [sp, #16]
 80069d2:	60c4      	str	r4, [r0, #12]
 80069d4:	930d      	str	r3, [sp, #52]	; 0x34
 80069d6:	f001 fc0b 	bl	80081f0 <__mcmp>
 80069da:	42a0      	cmp	r0, r4
 80069dc:	da70      	bge.n	8006ac0 <_strtod_l+0x890>
 80069de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e0:	ea53 0308 	orrs.w	r3, r3, r8
 80069e4:	f040 8096 	bne.w	8006b14 <_strtod_l+0x8e4>
 80069e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8091 	bne.w	8006b14 <_strtod_l+0x8e4>
 80069f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069fe:	f240 8089 	bls.w	8006b14 <_strtod_l+0x8e4>
 8006a02:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006a06:	b923      	cbnz	r3, 8006a12 <_strtod_l+0x7e2>
 8006a08:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f340 8081 	ble.w	8006b14 <_strtod_l+0x8e4>
 8006a12:	4659      	mov	r1, fp
 8006a14:	2201      	movs	r2, #1
 8006a16:	4650      	mov	r0, sl
 8006a18:	f001 fb7e 	bl	8008118 <__lshift>
 8006a1c:	9904      	ldr	r1, [sp, #16]
 8006a1e:	4683      	mov	fp, r0
 8006a20:	f001 fbe6 	bl	80081f0 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dd75      	ble.n	8006b14 <_strtod_l+0x8e4>
 8006a28:	9905      	ldr	r1, [sp, #20]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <_strtod_l+0x888>)
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	f000 8091 	beq.w	8006b56 <_strtod_l+0x926>
 8006a34:	ea02 0109 	and.w	r1, r2, r9
 8006a38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a3c:	f300 808b 	bgt.w	8006b56 <_strtod_l+0x926>
 8006a40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a44:	f77f aea9 	ble.w	800679a <_strtod_l+0x56a>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <_strtod_l+0x88c>)
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006a52:	4649      	mov	r1, r9
 8006a54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a58:	f7f9 fd3e 	bl	80004d8 <__aeabi_dmul>
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4303      	orrs	r3, r0
 8006a60:	bf08      	it	eq
 8006a62:	2322      	moveq	r3, #34	; 0x22
 8006a64:	4680      	mov	r8, r0
 8006a66:	4689      	mov	r9, r1
 8006a68:	bf08      	it	eq
 8006a6a:	f8ca 3000 	streq.w	r3, [sl]
 8006a6e:	e62d      	b.n	80066cc <_strtod_l+0x49c>
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	ea03 0808 	and.w	r8, r3, r8
 8006a7c:	e6db      	b.n	8006836 <_strtod_l+0x606>
 8006a7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006a82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006a86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006a8a:	35e2      	adds	r5, #226	; 0xe2
 8006a8c:	fa07 f505 	lsl.w	r5, r7, r5
 8006a90:	970f      	str	r7, [sp, #60]	; 0x3c
 8006a92:	e742      	b.n	800691a <_strtod_l+0x6ea>
 8006a94:	2301      	movs	r3, #1
 8006a96:	2500      	movs	r5, #0
 8006a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a9a:	e73e      	b.n	800691a <_strtod_l+0x6ea>
 8006a9c:	463a      	mov	r2, r7
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006aa2:	f001 fb39 	bl	8008118 <__lshift>
 8006aa6:	901c      	str	r0, [sp, #112]	; 0x70
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f47f af64 	bne.w	8006976 <_strtod_l+0x746>
 8006aae:	e602      	b.n	80066b6 <_strtod_l+0x486>
 8006ab0:	08009b78 	.word	0x08009b78
 8006ab4:	fffffc02 	.word	0xfffffc02
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	39500000 	.word	0x39500000
 8006ac0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ac4:	d166      	bne.n	8006b94 <_strtod_l+0x964>
 8006ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006acc:	b35a      	cbz	r2, 8006b26 <_strtod_l+0x8f6>
 8006ace:	4a9c      	ldr	r2, [pc, #624]	; (8006d40 <_strtod_l+0xb10>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d12c      	bne.n	8006b2e <_strtod_l+0x8fe>
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	b303      	cbz	r3, 8006b1c <_strtod_l+0x8ec>
 8006ada:	464b      	mov	r3, r9
 8006adc:	4a99      	ldr	r2, [pc, #612]	; (8006d44 <_strtod_l+0xb14>)
 8006ade:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006ae8:	d81b      	bhi.n	8006b22 <_strtod_l+0x8f2>
 8006aea:	0d12      	lsrs	r2, r2, #20
 8006aec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	4298      	cmp	r0, r3
 8006af6:	d11a      	bne.n	8006b2e <_strtod_l+0x8fe>
 8006af8:	4b93      	ldr	r3, [pc, #588]	; (8006d48 <_strtod_l+0xb18>)
 8006afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d102      	bne.n	8006b06 <_strtod_l+0x8d6>
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f add8 	beq.w	80066b6 <_strtod_l+0x486>
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	4b8e      	ldr	r3, [pc, #568]	; (8006d44 <_strtod_l+0xb14>)
 8006b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b0e:	401a      	ands	r2, r3
 8006b10:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d196      	bne.n	8006a48 <_strtod_l+0x818>
 8006b1a:	e5d7      	b.n	80066cc <_strtod_l+0x49c>
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b20:	e7e8      	b.n	8006af4 <_strtod_l+0x8c4>
 8006b22:	460b      	mov	r3, r1
 8006b24:	e7e6      	b.n	8006af4 <_strtod_l+0x8c4>
 8006b26:	ea53 0308 	orrs.w	r3, r3, r8
 8006b2a:	f43f af7d 	beq.w	8006a28 <_strtod_l+0x7f8>
 8006b2e:	b1e5      	cbz	r5, 8006b6a <_strtod_l+0x93a>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	421d      	tst	r5, r3
 8006b34:	d0ee      	beq.n	8006b14 <_strtod_l+0x8e4>
 8006b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	b1c3      	cbz	r3, 8006b72 <_strtod_l+0x942>
 8006b40:	f7ff fb53 	bl	80061ea <sulp>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b4c:	f7f9 fb0e 	bl	800016c <__adddf3>
 8006b50:	4680      	mov	r8, r0
 8006b52:	4689      	mov	r9, r1
 8006b54:	e7de      	b.n	8006b14 <_strtod_l+0x8e4>
 8006b56:	4013      	ands	r3, r2
 8006b58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006b60:	f04f 38ff 	mov.w	r8, #4294967295
 8006b64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006b68:	e7d4      	b.n	8006b14 <_strtod_l+0x8e4>
 8006b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b6c:	ea13 0f08 	tst.w	r3, r8
 8006b70:	e7e0      	b.n	8006b34 <_strtod_l+0x904>
 8006b72:	f7ff fb3a 	bl	80061ea <sulp>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b7e:	f7f9 faf3 	bl	8000168 <__aeabi_dsub>
 8006b82:	2200      	movs	r2, #0
 8006b84:	2300      	movs	r3, #0
 8006b86:	4680      	mov	r8, r0
 8006b88:	4689      	mov	r9, r1
 8006b8a:	f7f9 ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0c0      	beq.n	8006b14 <_strtod_l+0x8e4>
 8006b92:	e602      	b.n	800679a <_strtod_l+0x56a>
 8006b94:	4658      	mov	r0, fp
 8006b96:	9904      	ldr	r1, [sp, #16]
 8006b98:	f001 fcac 	bl	80084f4 <__ratio>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	f7f9 ff13 	bl	80009d0 <__aeabi_dcmple>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d075      	beq.n	8006c9a <_strtod_l+0xa6a>
 8006bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d047      	beq.n	8006c44 <_strtod_l+0xa14>
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	4f65      	ldr	r7, [pc, #404]	; (8006d4c <_strtod_l+0xb1c>)
 8006bb8:	4d64      	ldr	r5, [pc, #400]	; (8006d4c <_strtod_l+0xb1c>)
 8006bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	0d1b      	lsrs	r3, r3, #20
 8006bc2:	051b      	lsls	r3, r3, #20
 8006bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bc8:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <_strtod_l+0xb20>)
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f040 80c8 	bne.w	8006d60 <_strtod_l+0xb30>
 8006bd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006be0:	4649      	mov	r1, r9
 8006be2:	f001 fbb1 	bl	8008348 <__ulp>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fc73 	bl	80004d8 <__aeabi_dmul>
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	f7f9 fab9 	bl	800016c <__adddf3>
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4951      	ldr	r1, [pc, #324]	; (8006d44 <_strtod_l+0xb14>)
 8006bfe:	4a55      	ldr	r2, [pc, #340]	; (8006d54 <_strtod_l+0xb24>)
 8006c00:	4019      	ands	r1, r3
 8006c02:	4291      	cmp	r1, r2
 8006c04:	4680      	mov	r8, r0
 8006c06:	d95e      	bls.n	8006cc6 <_strtod_l+0xa96>
 8006c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d103      	bne.n	8006c1a <_strtod_l+0x9ea>
 8006c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c14:	3301      	adds	r3, #1
 8006c16:	f43f ad4e 	beq.w	80066b6 <_strtod_l+0x486>
 8006c1a:	f04f 38ff 	mov.w	r8, #4294967295
 8006c1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006d48 <_strtod_l+0xb18>
 8006c22:	4650      	mov	r0, sl
 8006c24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c26:	f001 f85f 	bl	8007ce8 <_Bfree>
 8006c2a:	4650      	mov	r0, sl
 8006c2c:	9906      	ldr	r1, [sp, #24]
 8006c2e:	f001 f85b 	bl	8007ce8 <_Bfree>
 8006c32:	4650      	mov	r0, sl
 8006c34:	9904      	ldr	r1, [sp, #16]
 8006c36:	f001 f857 	bl	8007ce8 <_Bfree>
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f001 f853 	bl	8007ce8 <_Bfree>
 8006c42:	e61c      	b.n	800687e <_strtod_l+0x64e>
 8006c44:	f1b8 0f00 	cmp.w	r8, #0
 8006c48:	d119      	bne.n	8006c7e <_strtod_l+0xa4e>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c50:	b9e3      	cbnz	r3, 8006c8c <_strtod_l+0xa5c>
 8006c52:	2200      	movs	r2, #0
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <_strtod_l+0xb1c>)
 8006c5a:	f7f9 feaf 	bl	80009bc <__aeabi_dcmplt>
 8006c5e:	b9c8      	cbnz	r0, 8006c94 <_strtod_l+0xa64>
 8006c60:	2200      	movs	r2, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <_strtod_l+0xb28>)
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c74:	9418      	str	r4, [sp, #96]	; 0x60
 8006c76:	9319      	str	r3, [sp, #100]	; 0x64
 8006c78:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006c7c:	e79d      	b.n	8006bba <_strtod_l+0x98a>
 8006c7e:	f1b8 0f01 	cmp.w	r8, #1
 8006c82:	d103      	bne.n	8006c8c <_strtod_l+0xa5c>
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f43f ad87 	beq.w	800679a <_strtod_l+0x56a>
 8006c8c:	2600      	movs	r6, #0
 8006c8e:	2400      	movs	r4, #0
 8006c90:	4f32      	ldr	r7, [pc, #200]	; (8006d5c <_strtod_l+0xb2c>)
 8006c92:	e791      	b.n	8006bb8 <_strtod_l+0x988>
 8006c94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006c96:	4d30      	ldr	r5, [pc, #192]	; (8006d58 <_strtod_l+0xb28>)
 8006c98:	e7ea      	b.n	8006c70 <_strtod_l+0xa40>
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <_strtod_l+0xb28>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fc19 	bl	80004d8 <__aeabi_dmul>
 8006ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca8:	4604      	mov	r4, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	b933      	cbnz	r3, 8006cbc <_strtod_l+0xa8c>
 8006cae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cb2:	9010      	str	r0, [sp, #64]	; 0x40
 8006cb4:	9311      	str	r3, [sp, #68]	; 0x44
 8006cb6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006cba:	e77e      	b.n	8006bba <_strtod_l+0x98a>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006cc4:	e7f7      	b.n	8006cb6 <_strtod_l+0xa86>
 8006cc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1a8      	bne.n	8006c22 <_strtod_l+0x9f2>
 8006cd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cd6:	0d1b      	lsrs	r3, r3, #20
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d1a1      	bne.n	8006c22 <_strtod_l+0x9f2>
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7fa f977 	bl	8000fd4 <__aeabi_d2lz>
 8006ce6:	f7f9 fbc9 	bl	800047c <__aeabi_l2d>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fa39 	bl	8000168 <__aeabi_dsub>
 8006cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cfc:	ea43 0308 	orr.w	r3, r3, r8
 8006d00:	4313      	orrs	r3, r2
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	d066      	beq.n	8006dd6 <_strtod_l+0xba6>
 8006d08:	a309      	add	r3, pc, #36	; (adr r3, 8006d30 <_strtod_l+0xb00>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fe55 	bl	80009bc <__aeabi_dcmplt>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f47f acda 	bne.w	80066cc <_strtod_l+0x49c>
 8006d18:	a307      	add	r3, pc, #28	; (adr r3, 8006d38 <_strtod_l+0xb08>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fe69 	bl	80009f8 <__aeabi_dcmpgt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f af7b 	beq.w	8006c22 <_strtod_l+0x9f2>
 8006d2c:	e4ce      	b.n	80066cc <_strtod_l+0x49c>
 8006d2e:	bf00      	nop
 8006d30:	94a03595 	.word	0x94a03595
 8006d34:	3fdfffff 	.word	0x3fdfffff
 8006d38:	35afe535 	.word	0x35afe535
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	000fffff 	.word	0x000fffff
 8006d44:	7ff00000 	.word	0x7ff00000
 8006d48:	7fefffff 	.word	0x7fefffff
 8006d4c:	3ff00000 	.word	0x3ff00000
 8006d50:	7fe00000 	.word	0x7fe00000
 8006d54:	7c9fffff 	.word	0x7c9fffff
 8006d58:	3fe00000 	.word	0x3fe00000
 8006d5c:	bff00000 	.word	0xbff00000
 8006d60:	9b05      	ldr	r3, [sp, #20]
 8006d62:	b313      	cbz	r3, 8006daa <_strtod_l+0xb7a>
 8006d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d6a:	d81e      	bhi.n	8006daa <_strtod_l+0xb7a>
 8006d6c:	a326      	add	r3, pc, #152	; (adr r3, 8006e08 <_strtod_l+0xbd8>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 fe2b 	bl	80009d0 <__aeabi_dcmple>
 8006d7a:	b190      	cbz	r0, 8006da2 <_strtod_l+0xb72>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7f9 fe5a 	bl	8000a38 <__aeabi_d2uiz>
 8006d84:	2801      	cmp	r0, #1
 8006d86:	bf38      	it	cc
 8006d88:	2001      	movcc	r0, #1
 8006d8a:	f7f9 fb2b 	bl	80003e4 <__aeabi_ui2d>
 8006d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	b9d3      	cbnz	r3, 8006dcc <_strtod_l+0xb9c>
 8006d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d9a:	9012      	str	r0, [sp, #72]	; 0x48
 8006d9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006da2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006da4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006da8:	1a9f      	subs	r7, r3, r2
 8006daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dae:	f001 facb 	bl	8008348 <__ulp>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fb8d 	bl	80004d8 <__aeabi_dmul>
 8006dbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dc2:	f7f9 f9d3 	bl	800016c <__adddf3>
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	4689      	mov	r9, r1
 8006dca:	e77e      	b.n	8006cca <_strtod_l+0xa9a>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006dd4:	e7e3      	b.n	8006d9e <_strtod_l+0xb6e>
 8006dd6:	a30e      	add	r3, pc, #56	; (adr r3, 8006e10 <_strtod_l+0xbe0>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7f9 fdee 	bl	80009bc <__aeabi_dcmplt>
 8006de0:	e7a1      	b.n	8006d26 <_strtod_l+0xaf6>
 8006de2:	2300      	movs	r3, #0
 8006de4:	930c      	str	r3, [sp, #48]	; 0x30
 8006de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006de8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	f7ff ba65 	b.w	80062ba <_strtod_l+0x8a>
 8006df0:	2b65      	cmp	r3, #101	; 0x65
 8006df2:	f43f ab5c 	beq.w	80064ae <_strtod_l+0x27e>
 8006df6:	2b45      	cmp	r3, #69	; 0x45
 8006df8:	f43f ab59 	beq.w	80064ae <_strtod_l+0x27e>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f7ff bb8d 	b.w	800651c <_strtod_l+0x2ec>
 8006e02:	bf00      	nop
 8006e04:	f3af 8000 	nop.w
 8006e08:	ffc00000 	.word	0xffc00000
 8006e0c:	41dfffff 	.word	0x41dfffff
 8006e10:	94a03595 	.word	0x94a03595
 8006e14:	3fcfffff 	.word	0x3fcfffff

08006e18 <_strtod_r>:
 8006e18:	4b01      	ldr	r3, [pc, #4]	; (8006e20 <_strtod_r+0x8>)
 8006e1a:	f7ff ba09 	b.w	8006230 <_strtod_l>
 8006e1e:	bf00      	nop
 8006e20:	20000088 	.word	0x20000088

08006e24 <_strtol_l.isra.0>:
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2a:	4686      	mov	lr, r0
 8006e2c:	d001      	beq.n	8006e32 <_strtol_l.isra.0+0xe>
 8006e2e:	2b24      	cmp	r3, #36	; 0x24
 8006e30:	d906      	bls.n	8006e40 <_strtol_l.isra.0+0x1c>
 8006e32:	f7fe feeb 	bl	8005c0c <__errno>
 8006e36:	2316      	movs	r3, #22
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e40:	468c      	mov	ip, r1
 8006e42:	4e3a      	ldr	r6, [pc, #232]	; (8006f2c <_strtol_l.isra.0+0x108>)
 8006e44:	4660      	mov	r0, ip
 8006e46:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006e4a:	5da5      	ldrb	r5, [r4, r6]
 8006e4c:	f015 0508 	ands.w	r5, r5, #8
 8006e50:	d1f8      	bne.n	8006e44 <_strtol_l.isra.0+0x20>
 8006e52:	2c2d      	cmp	r4, #45	; 0x2d
 8006e54:	d133      	bne.n	8006ebe <_strtol_l.isra.0+0x9a>
 8006e56:	f04f 0801 	mov.w	r8, #1
 8006e5a:	f89c 4000 	ldrb.w	r4, [ip]
 8006e5e:	f100 0c02 	add.w	ip, r0, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d05d      	beq.n	8006f22 <_strtol_l.isra.0+0xfe>
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d10c      	bne.n	8006e84 <_strtol_l.isra.0+0x60>
 8006e6a:	2c30      	cmp	r4, #48	; 0x30
 8006e6c:	d10a      	bne.n	8006e84 <_strtol_l.isra.0+0x60>
 8006e6e:	f89c 0000 	ldrb.w	r0, [ip]
 8006e72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006e76:	2858      	cmp	r0, #88	; 0x58
 8006e78:	d14e      	bne.n	8006f18 <_strtol_l.isra.0+0xf4>
 8006e7a:	2310      	movs	r3, #16
 8006e7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006e80:	f10c 0c02 	add.w	ip, ip, #2
 8006e84:	2500      	movs	r5, #0
 8006e86:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006e8a:	3f01      	subs	r7, #1
 8006e8c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006e90:	4628      	mov	r0, r5
 8006e92:	fb03 7a19 	mls	sl, r3, r9, r7
 8006e96:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006e9a:	2e09      	cmp	r6, #9
 8006e9c:	d818      	bhi.n	8006ed0 <_strtol_l.isra.0+0xac>
 8006e9e:	4634      	mov	r4, r6
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	dd24      	ble.n	8006eee <_strtol_l.isra.0+0xca>
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	db1f      	blt.n	8006ee8 <_strtol_l.isra.0+0xc4>
 8006ea8:	4581      	cmp	r9, r0
 8006eaa:	d31d      	bcc.n	8006ee8 <_strtol_l.isra.0+0xc4>
 8006eac:	d101      	bne.n	8006eb2 <_strtol_l.isra.0+0x8e>
 8006eae:	45a2      	cmp	sl, r4
 8006eb0:	db1a      	blt.n	8006ee8 <_strtol_l.isra.0+0xc4>
 8006eb2:	2501      	movs	r5, #1
 8006eb4:	fb00 4003 	mla	r0, r0, r3, r4
 8006eb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006ebc:	e7eb      	b.n	8006e96 <_strtol_l.isra.0+0x72>
 8006ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8006ec0:	bf08      	it	eq
 8006ec2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006ec6:	46a8      	mov	r8, r5
 8006ec8:	bf08      	it	eq
 8006eca:	f100 0c02 	addeq.w	ip, r0, #2
 8006ece:	e7c8      	b.n	8006e62 <_strtol_l.isra.0+0x3e>
 8006ed0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006ed4:	2e19      	cmp	r6, #25
 8006ed6:	d801      	bhi.n	8006edc <_strtol_l.isra.0+0xb8>
 8006ed8:	3c37      	subs	r4, #55	; 0x37
 8006eda:	e7e1      	b.n	8006ea0 <_strtol_l.isra.0+0x7c>
 8006edc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006ee0:	2e19      	cmp	r6, #25
 8006ee2:	d804      	bhi.n	8006eee <_strtol_l.isra.0+0xca>
 8006ee4:	3c57      	subs	r4, #87	; 0x57
 8006ee6:	e7db      	b.n	8006ea0 <_strtol_l.isra.0+0x7c>
 8006ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8006eec:	e7e4      	b.n	8006eb8 <_strtol_l.isra.0+0x94>
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	da08      	bge.n	8006f04 <_strtol_l.isra.0+0xe0>
 8006ef2:	2322      	movs	r3, #34	; 0x22
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f8ce 3000 	str.w	r3, [lr]
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d09e      	beq.n	8006e3c <_strtol_l.isra.0+0x18>
 8006efe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006f02:	e007      	b.n	8006f14 <_strtol_l.isra.0+0xf0>
 8006f04:	f1b8 0f00 	cmp.w	r8, #0
 8006f08:	d000      	beq.n	8006f0c <_strtol_l.isra.0+0xe8>
 8006f0a:	4240      	negs	r0, r0
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	d095      	beq.n	8006e3c <_strtol_l.isra.0+0x18>
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	d1f4      	bne.n	8006efe <_strtol_l.isra.0+0xda>
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	e791      	b.n	8006e3c <_strtol_l.isra.0+0x18>
 8006f18:	2430      	movs	r4, #48	; 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1b2      	bne.n	8006e84 <_strtol_l.isra.0+0x60>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	e7b0      	b.n	8006e84 <_strtol_l.isra.0+0x60>
 8006f22:	2c30      	cmp	r4, #48	; 0x30
 8006f24:	d0a3      	beq.n	8006e6e <_strtol_l.isra.0+0x4a>
 8006f26:	230a      	movs	r3, #10
 8006f28:	e7ac      	b.n	8006e84 <_strtol_l.isra.0+0x60>
 8006f2a:	bf00      	nop
 8006f2c:	08009ba1 	.word	0x08009ba1

08006f30 <_strtol_r>:
 8006f30:	f7ff bf78 	b.w	8006e24 <_strtol_l.isra.0>

08006f34 <__swbuf_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	460e      	mov	r6, r1
 8006f38:	4614      	mov	r4, r2
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	b118      	cbz	r0, 8006f46 <__swbuf_r+0x12>
 8006f3e:	6983      	ldr	r3, [r0, #24]
 8006f40:	b90b      	cbnz	r3, 8006f46 <__swbuf_r+0x12>
 8006f42:	f000 f9f3 	bl	800732c <__sinit>
 8006f46:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <__swbuf_r+0x98>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	d12b      	bne.n	8006fa4 <__swbuf_r+0x70>
 8006f4c:	686c      	ldr	r4, [r5, #4]
 8006f4e:	69a3      	ldr	r3, [r4, #24]
 8006f50:	60a3      	str	r3, [r4, #8]
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	071a      	lsls	r2, r3, #28
 8006f56:	d52f      	bpl.n	8006fb8 <__swbuf_r+0x84>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	b36b      	cbz	r3, 8006fb8 <__swbuf_r+0x84>
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	6820      	ldr	r0, [r4, #0]
 8006f60:	b2f6      	uxtb	r6, r6
 8006f62:	1ac0      	subs	r0, r0, r3
 8006f64:	6963      	ldr	r3, [r4, #20]
 8006f66:	4637      	mov	r7, r6
 8006f68:	4283      	cmp	r3, r0
 8006f6a:	dc04      	bgt.n	8006f76 <__swbuf_r+0x42>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	f000 f948 	bl	8007204 <_fflush_r>
 8006f74:	bb30      	cbnz	r0, 8006fc4 <__swbuf_r+0x90>
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	3001      	adds	r0, #1
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	60a3      	str	r3, [r4, #8]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	6022      	str	r2, [r4, #0]
 8006f84:	701e      	strb	r6, [r3, #0]
 8006f86:	6963      	ldr	r3, [r4, #20]
 8006f88:	4283      	cmp	r3, r0
 8006f8a:	d004      	beq.n	8006f96 <__swbuf_r+0x62>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	07db      	lsls	r3, r3, #31
 8006f90:	d506      	bpl.n	8006fa0 <__swbuf_r+0x6c>
 8006f92:	2e0a      	cmp	r6, #10
 8006f94:	d104      	bne.n	8006fa0 <__swbuf_r+0x6c>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 f933 	bl	8007204 <_fflush_r>
 8006f9e:	b988      	cbnz	r0, 8006fc4 <__swbuf_r+0x90>
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa4:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <__swbuf_r+0x9c>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d101      	bne.n	8006fae <__swbuf_r+0x7a>
 8006faa:	68ac      	ldr	r4, [r5, #8]
 8006fac:	e7cf      	b.n	8006f4e <__swbuf_r+0x1a>
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <__swbuf_r+0xa0>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	bf08      	it	eq
 8006fb4:	68ec      	ldreq	r4, [r5, #12]
 8006fb6:	e7ca      	b.n	8006f4e <__swbuf_r+0x1a>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f81e 	bl	8006ffc <__swsetup_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d0cb      	beq.n	8006f5c <__swbuf_r+0x28>
 8006fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc8:	e7ea      	b.n	8006fa0 <__swbuf_r+0x6c>
 8006fca:	bf00      	nop
 8006fcc:	08009cc4 	.word	0x08009cc4
 8006fd0:	08009ce4 	.word	0x08009ce4
 8006fd4:	08009ca4 	.word	0x08009ca4

08006fd8 <_write_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4d05      	ldr	r5, [pc, #20]	; (8006ff8 <_write_r+0x20>)
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f7fa fbbf 	bl	800176a <_write>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_write_r+0x1e>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_write_r+0x1e>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000a2c 	.word	0x20000a2c

08006ffc <__swsetup_r>:
 8006ffc:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <__swsetup_r+0xcc>)
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	4606      	mov	r6, r0
 8007004:	460c      	mov	r4, r1
 8007006:	b125      	cbz	r5, 8007012 <__swsetup_r+0x16>
 8007008:	69ab      	ldr	r3, [r5, #24]
 800700a:	b913      	cbnz	r3, 8007012 <__swsetup_r+0x16>
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f98d 	bl	800732c <__sinit>
 8007012:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <__swsetup_r+0xd0>)
 8007014:	429c      	cmp	r4, r3
 8007016:	d10f      	bne.n	8007038 <__swsetup_r+0x3c>
 8007018:	686c      	ldr	r4, [r5, #4]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d42c      	bmi.n	800707e <__swsetup_r+0x82>
 8007024:	06dd      	lsls	r5, r3, #27
 8007026:	d411      	bmi.n	800704c <__swsetup_r+0x50>
 8007028:	2309      	movs	r3, #9
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	e03e      	b.n	80070b6 <__swsetup_r+0xba>
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <__swsetup_r+0xd4>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d101      	bne.n	8007042 <__swsetup_r+0x46>
 800703e:	68ac      	ldr	r4, [r5, #8]
 8007040:	e7eb      	b.n	800701a <__swsetup_r+0x1e>
 8007042:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <__swsetup_r+0xd8>)
 8007044:	429c      	cmp	r4, r3
 8007046:	bf08      	it	eq
 8007048:	68ec      	ldreq	r4, [r5, #12]
 800704a:	e7e6      	b.n	800701a <__swsetup_r+0x1e>
 800704c:	0758      	lsls	r0, r3, #29
 800704e:	d512      	bpl.n	8007076 <__swsetup_r+0x7a>
 8007050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007052:	b141      	cbz	r1, 8007066 <__swsetup_r+0x6a>
 8007054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007058:	4299      	cmp	r1, r3
 800705a:	d002      	beq.n	8007062 <__swsetup_r+0x66>
 800705c:	4630      	mov	r0, r6
 800705e:	f001 fac9 	bl	80085f4 <_free_r>
 8007062:	2300      	movs	r3, #0
 8007064:	6363      	str	r3, [r4, #52]	; 0x34
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	2300      	movs	r3, #0
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f043 0308 	orr.w	r3, r3, #8
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	b94b      	cbnz	r3, 8007096 <__swsetup_r+0x9a>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800708c:	d003      	beq.n	8007096 <__swsetup_r+0x9a>
 800708e:	4621      	mov	r1, r4
 8007090:	4630      	mov	r0, r6
 8007092:	f000 fd89 	bl	8007ba8 <__smakebuf_r>
 8007096:	89a0      	ldrh	r0, [r4, #12]
 8007098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800709c:	f010 0301 	ands.w	r3, r0, #1
 80070a0:	d00a      	beq.n	80070b8 <__swsetup_r+0xbc>
 80070a2:	2300      	movs	r3, #0
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	425b      	negs	r3, r3
 80070aa:	61a3      	str	r3, [r4, #24]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	b943      	cbnz	r3, 80070c2 <__swsetup_r+0xc6>
 80070b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070b4:	d1ba      	bne.n	800702c <__swsetup_r+0x30>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	0781      	lsls	r1, r0, #30
 80070ba:	bf58      	it	pl
 80070bc:	6963      	ldrpl	r3, [r4, #20]
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	e7f4      	b.n	80070ac <__swsetup_r+0xb0>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e7f7      	b.n	80070b6 <__swsetup_r+0xba>
 80070c6:	bf00      	nop
 80070c8:	20000020 	.word	0x20000020
 80070cc:	08009cc4 	.word	0x08009cc4
 80070d0:	08009ce4 	.word	0x08009ce4
 80070d4:	08009ca4 	.word	0x08009ca4

080070d8 <_close_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	2300      	movs	r3, #0
 80070dc:	4d05      	ldr	r5, [pc, #20]	; (80070f4 <_close_r+0x1c>)
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7fa fb5d 	bl	80017a2 <_close>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_close_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_close_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20000a2c 	.word	0x20000a2c

080070f8 <__sflush_r>:
 80070f8:	898a      	ldrh	r2, [r1, #12]
 80070fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	4605      	mov	r5, r0
 8007100:	0710      	lsls	r0, r2, #28
 8007102:	460c      	mov	r4, r1
 8007104:	d458      	bmi.n	80071b8 <__sflush_r+0xc0>
 8007106:	684b      	ldr	r3, [r1, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	dc05      	bgt.n	8007118 <__sflush_r+0x20>
 800710c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	dc02      	bgt.n	8007118 <__sflush_r+0x20>
 8007112:	2000      	movs	r0, #0
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800711a:	2e00      	cmp	r6, #0
 800711c:	d0f9      	beq.n	8007112 <__sflush_r+0x1a>
 800711e:	2300      	movs	r3, #0
 8007120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007124:	682f      	ldr	r7, [r5, #0]
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	d032      	beq.n	8007190 <__sflush_r+0x98>
 800712a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	075a      	lsls	r2, r3, #29
 8007130:	d505      	bpl.n	800713e <__sflush_r+0x46>
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	1ac0      	subs	r0, r0, r3
 8007136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007138:	b10b      	cbz	r3, 800713e <__sflush_r+0x46>
 800713a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800713c:	1ac0      	subs	r0, r0, r3
 800713e:	2300      	movs	r3, #0
 8007140:	4602      	mov	r2, r0
 8007142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007144:	4628      	mov	r0, r5
 8007146:	6a21      	ldr	r1, [r4, #32]
 8007148:	47b0      	blx	r6
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	d106      	bne.n	800715e <__sflush_r+0x66>
 8007150:	6829      	ldr	r1, [r5, #0]
 8007152:	291d      	cmp	r1, #29
 8007154:	d82c      	bhi.n	80071b0 <__sflush_r+0xb8>
 8007156:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <__sflush_r+0x108>)
 8007158:	40ca      	lsrs	r2, r1
 800715a:	07d6      	lsls	r6, r2, #31
 800715c:	d528      	bpl.n	80071b0 <__sflush_r+0xb8>
 800715e:	2200      	movs	r2, #0
 8007160:	6062      	str	r2, [r4, #4]
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	04d9      	lsls	r1, r3, #19
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	d504      	bpl.n	8007174 <__sflush_r+0x7c>
 800716a:	1c42      	adds	r2, r0, #1
 800716c:	d101      	bne.n	8007172 <__sflush_r+0x7a>
 800716e:	682b      	ldr	r3, [r5, #0]
 8007170:	b903      	cbnz	r3, 8007174 <__sflush_r+0x7c>
 8007172:	6560      	str	r0, [r4, #84]	; 0x54
 8007174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007176:	602f      	str	r7, [r5, #0]
 8007178:	2900      	cmp	r1, #0
 800717a:	d0ca      	beq.n	8007112 <__sflush_r+0x1a>
 800717c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007180:	4299      	cmp	r1, r3
 8007182:	d002      	beq.n	800718a <__sflush_r+0x92>
 8007184:	4628      	mov	r0, r5
 8007186:	f001 fa35 	bl	80085f4 <_free_r>
 800718a:	2000      	movs	r0, #0
 800718c:	6360      	str	r0, [r4, #52]	; 0x34
 800718e:	e7c1      	b.n	8007114 <__sflush_r+0x1c>
 8007190:	6a21      	ldr	r1, [r4, #32]
 8007192:	2301      	movs	r3, #1
 8007194:	4628      	mov	r0, r5
 8007196:	47b0      	blx	r6
 8007198:	1c41      	adds	r1, r0, #1
 800719a:	d1c7      	bne.n	800712c <__sflush_r+0x34>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0c4      	beq.n	800712c <__sflush_r+0x34>
 80071a2:	2b1d      	cmp	r3, #29
 80071a4:	d001      	beq.n	80071aa <__sflush_r+0xb2>
 80071a6:	2b16      	cmp	r3, #22
 80071a8:	d101      	bne.n	80071ae <__sflush_r+0xb6>
 80071aa:	602f      	str	r7, [r5, #0]
 80071ac:	e7b1      	b.n	8007112 <__sflush_r+0x1a>
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	e7ad      	b.n	8007114 <__sflush_r+0x1c>
 80071b8:	690f      	ldr	r7, [r1, #16]
 80071ba:	2f00      	cmp	r7, #0
 80071bc:	d0a9      	beq.n	8007112 <__sflush_r+0x1a>
 80071be:	0793      	lsls	r3, r2, #30
 80071c0:	bf18      	it	ne
 80071c2:	2300      	movne	r3, #0
 80071c4:	680e      	ldr	r6, [r1, #0]
 80071c6:	bf08      	it	eq
 80071c8:	694b      	ldreq	r3, [r1, #20]
 80071ca:	eba6 0807 	sub.w	r8, r6, r7
 80071ce:	600f      	str	r7, [r1, #0]
 80071d0:	608b      	str	r3, [r1, #8]
 80071d2:	f1b8 0f00 	cmp.w	r8, #0
 80071d6:	dd9c      	ble.n	8007112 <__sflush_r+0x1a>
 80071d8:	4643      	mov	r3, r8
 80071da:	463a      	mov	r2, r7
 80071dc:	4628      	mov	r0, r5
 80071de:	6a21      	ldr	r1, [r4, #32]
 80071e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071e2:	47b0      	blx	r6
 80071e4:	2800      	cmp	r0, #0
 80071e6:	dc06      	bgt.n	80071f6 <__sflush_r+0xfe>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	e78e      	b.n	8007114 <__sflush_r+0x1c>
 80071f6:	4407      	add	r7, r0
 80071f8:	eba8 0800 	sub.w	r8, r8, r0
 80071fc:	e7e9      	b.n	80071d2 <__sflush_r+0xda>
 80071fe:	bf00      	nop
 8007200:	20400001 	.word	0x20400001

08007204 <_fflush_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	4605      	mov	r5, r0
 800720a:	460c      	mov	r4, r1
 800720c:	b913      	cbnz	r3, 8007214 <_fflush_r+0x10>
 800720e:	2500      	movs	r5, #0
 8007210:	4628      	mov	r0, r5
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	b118      	cbz	r0, 800721e <_fflush_r+0x1a>
 8007216:	6983      	ldr	r3, [r0, #24]
 8007218:	b90b      	cbnz	r3, 800721e <_fflush_r+0x1a>
 800721a:	f000 f887 	bl	800732c <__sinit>
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <_fflush_r+0x6c>)
 8007220:	429c      	cmp	r4, r3
 8007222:	d11b      	bne.n	800725c <_fflush_r+0x58>
 8007224:	686c      	ldr	r4, [r5, #4]
 8007226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ef      	beq.n	800720e <_fflush_r+0xa>
 800722e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007230:	07d0      	lsls	r0, r2, #31
 8007232:	d404      	bmi.n	800723e <_fflush_r+0x3a>
 8007234:	0599      	lsls	r1, r3, #22
 8007236:	d402      	bmi.n	800723e <_fflush_r+0x3a>
 8007238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723a:	f000 fc7c 	bl	8007b36 <__retarget_lock_acquire_recursive>
 800723e:	4628      	mov	r0, r5
 8007240:	4621      	mov	r1, r4
 8007242:	f7ff ff59 	bl	80070f8 <__sflush_r>
 8007246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007248:	4605      	mov	r5, r0
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d4e0      	bmi.n	8007210 <_fflush_r+0xc>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	059b      	lsls	r3, r3, #22
 8007252:	d4dd      	bmi.n	8007210 <_fflush_r+0xc>
 8007254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007256:	f000 fc6f 	bl	8007b38 <__retarget_lock_release_recursive>
 800725a:	e7d9      	b.n	8007210 <_fflush_r+0xc>
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <_fflush_r+0x70>)
 800725e:	429c      	cmp	r4, r3
 8007260:	d101      	bne.n	8007266 <_fflush_r+0x62>
 8007262:	68ac      	ldr	r4, [r5, #8]
 8007264:	e7df      	b.n	8007226 <_fflush_r+0x22>
 8007266:	4b04      	ldr	r3, [pc, #16]	; (8007278 <_fflush_r+0x74>)
 8007268:	429c      	cmp	r4, r3
 800726a:	bf08      	it	eq
 800726c:	68ec      	ldreq	r4, [r5, #12]
 800726e:	e7da      	b.n	8007226 <_fflush_r+0x22>
 8007270:	08009cc4 	.word	0x08009cc4
 8007274:	08009ce4 	.word	0x08009ce4
 8007278:	08009ca4 	.word	0x08009ca4

0800727c <std>:
 800727c:	2300      	movs	r3, #0
 800727e:	b510      	push	{r4, lr}
 8007280:	4604      	mov	r4, r0
 8007282:	e9c0 3300 	strd	r3, r3, [r0]
 8007286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800728a:	6083      	str	r3, [r0, #8]
 800728c:	8181      	strh	r1, [r0, #12]
 800728e:	6643      	str	r3, [r0, #100]	; 0x64
 8007290:	81c2      	strh	r2, [r0, #14]
 8007292:	6183      	str	r3, [r0, #24]
 8007294:	4619      	mov	r1, r3
 8007296:	2208      	movs	r2, #8
 8007298:	305c      	adds	r0, #92	; 0x5c
 800729a:	f7fe fce1 	bl	8005c60 <memset>
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <std+0x38>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	6263      	str	r3, [r4, #36]	; 0x24
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <std+0x3c>)
 80072a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <std+0x40>)
 80072aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <std+0x44>)
 80072ae:	6323      	str	r3, [r4, #48]	; 0x30
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	08006165 	.word	0x08006165
 80072b8:	08006187 	.word	0x08006187
 80072bc:	080061bf 	.word	0x080061bf
 80072c0:	080061e3 	.word	0x080061e3

080072c4 <_cleanup_r>:
 80072c4:	4901      	ldr	r1, [pc, #4]	; (80072cc <_cleanup_r+0x8>)
 80072c6:	f000 b8af 	b.w	8007428 <_fwalk_reent>
 80072ca:	bf00      	nop
 80072cc:	08007205 	.word	0x08007205

080072d0 <__sfmoreglue>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	2568      	movs	r5, #104	; 0x68
 80072d4:	1e4a      	subs	r2, r1, #1
 80072d6:	4355      	muls	r5, r2
 80072d8:	460e      	mov	r6, r1
 80072da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072de:	f001 f9d5 	bl	800868c <_malloc_r>
 80072e2:	4604      	mov	r4, r0
 80072e4:	b140      	cbz	r0, 80072f8 <__sfmoreglue+0x28>
 80072e6:	2100      	movs	r1, #0
 80072e8:	e9c0 1600 	strd	r1, r6, [r0]
 80072ec:	300c      	adds	r0, #12
 80072ee:	60a0      	str	r0, [r4, #8]
 80072f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072f4:	f7fe fcb4 	bl	8005c60 <memset>
 80072f8:	4620      	mov	r0, r4
 80072fa:	bd70      	pop	{r4, r5, r6, pc}

080072fc <__sfp_lock_acquire>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sfp_lock_acquire+0x8>)
 80072fe:	f000 bc1a 	b.w	8007b36 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	20000a28 	.word	0x20000a28

08007308 <__sfp_lock_release>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sfp_lock_release+0x8>)
 800730a:	f000 bc15 	b.w	8007b38 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	20000a28 	.word	0x20000a28

08007314 <__sinit_lock_acquire>:
 8007314:	4801      	ldr	r0, [pc, #4]	; (800731c <__sinit_lock_acquire+0x8>)
 8007316:	f000 bc0e 	b.w	8007b36 <__retarget_lock_acquire_recursive>
 800731a:	bf00      	nop
 800731c:	20000a23 	.word	0x20000a23

08007320 <__sinit_lock_release>:
 8007320:	4801      	ldr	r0, [pc, #4]	; (8007328 <__sinit_lock_release+0x8>)
 8007322:	f000 bc09 	b.w	8007b38 <__retarget_lock_release_recursive>
 8007326:	bf00      	nop
 8007328:	20000a23 	.word	0x20000a23

0800732c <__sinit>:
 800732c:	b510      	push	{r4, lr}
 800732e:	4604      	mov	r4, r0
 8007330:	f7ff fff0 	bl	8007314 <__sinit_lock_acquire>
 8007334:	69a3      	ldr	r3, [r4, #24]
 8007336:	b11b      	cbz	r3, 8007340 <__sinit+0x14>
 8007338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733c:	f7ff bff0 	b.w	8007320 <__sinit_lock_release>
 8007340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007344:	6523      	str	r3, [r4, #80]	; 0x50
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <__sinit+0x68>)
 8007348:	4a13      	ldr	r2, [pc, #76]	; (8007398 <__sinit+0x6c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	62a2      	str	r2, [r4, #40]	; 0x28
 800734e:	42a3      	cmp	r3, r4
 8007350:	bf08      	it	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	4620      	mov	r0, r4
 8007356:	bf08      	it	eq
 8007358:	61a3      	streq	r3, [r4, #24]
 800735a:	f000 f81f 	bl	800739c <__sfp>
 800735e:	6060      	str	r0, [r4, #4]
 8007360:	4620      	mov	r0, r4
 8007362:	f000 f81b 	bl	800739c <__sfp>
 8007366:	60a0      	str	r0, [r4, #8]
 8007368:	4620      	mov	r0, r4
 800736a:	f000 f817 	bl	800739c <__sfp>
 800736e:	2200      	movs	r2, #0
 8007370:	2104      	movs	r1, #4
 8007372:	60e0      	str	r0, [r4, #12]
 8007374:	6860      	ldr	r0, [r4, #4]
 8007376:	f7ff ff81 	bl	800727c <std>
 800737a:	2201      	movs	r2, #1
 800737c:	2109      	movs	r1, #9
 800737e:	68a0      	ldr	r0, [r4, #8]
 8007380:	f7ff ff7c 	bl	800727c <std>
 8007384:	2202      	movs	r2, #2
 8007386:	2112      	movs	r1, #18
 8007388:	68e0      	ldr	r0, [r4, #12]
 800738a:	f7ff ff77 	bl	800727c <std>
 800738e:	2301      	movs	r3, #1
 8007390:	61a3      	str	r3, [r4, #24]
 8007392:	e7d1      	b.n	8007338 <__sinit+0xc>
 8007394:	08009b34 	.word	0x08009b34
 8007398:	080072c5 	.word	0x080072c5

0800739c <__sfp>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	4607      	mov	r7, r0
 80073a0:	f7ff ffac 	bl	80072fc <__sfp_lock_acquire>
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <__sfp+0x84>)
 80073a6:	681e      	ldr	r6, [r3, #0]
 80073a8:	69b3      	ldr	r3, [r6, #24]
 80073aa:	b913      	cbnz	r3, 80073b2 <__sfp+0x16>
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff ffbd 	bl	800732c <__sinit>
 80073b2:	3648      	adds	r6, #72	; 0x48
 80073b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	d503      	bpl.n	80073c4 <__sfp+0x28>
 80073bc:	6833      	ldr	r3, [r6, #0]
 80073be:	b30b      	cbz	r3, 8007404 <__sfp+0x68>
 80073c0:	6836      	ldr	r6, [r6, #0]
 80073c2:	e7f7      	b.n	80073b4 <__sfp+0x18>
 80073c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073c8:	b9d5      	cbnz	r5, 8007400 <__sfp+0x64>
 80073ca:	4b16      	ldr	r3, [pc, #88]	; (8007424 <__sfp+0x88>)
 80073cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073d0:	60e3      	str	r3, [r4, #12]
 80073d2:	6665      	str	r5, [r4, #100]	; 0x64
 80073d4:	f000 fbae 	bl	8007b34 <__retarget_lock_init_recursive>
 80073d8:	f7ff ff96 	bl	8007308 <__sfp_lock_release>
 80073dc:	2208      	movs	r2, #8
 80073de:	4629      	mov	r1, r5
 80073e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073e8:	6025      	str	r5, [r4, #0]
 80073ea:	61a5      	str	r5, [r4, #24]
 80073ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073f0:	f7fe fc36 	bl	8005c60 <memset>
 80073f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073fc:	4620      	mov	r0, r4
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007400:	3468      	adds	r4, #104	; 0x68
 8007402:	e7d9      	b.n	80073b8 <__sfp+0x1c>
 8007404:	2104      	movs	r1, #4
 8007406:	4638      	mov	r0, r7
 8007408:	f7ff ff62 	bl	80072d0 <__sfmoreglue>
 800740c:	4604      	mov	r4, r0
 800740e:	6030      	str	r0, [r6, #0]
 8007410:	2800      	cmp	r0, #0
 8007412:	d1d5      	bne.n	80073c0 <__sfp+0x24>
 8007414:	f7ff ff78 	bl	8007308 <__sfp_lock_release>
 8007418:	230c      	movs	r3, #12
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	e7ee      	b.n	80073fc <__sfp+0x60>
 800741e:	bf00      	nop
 8007420:	08009b34 	.word	0x08009b34
 8007424:	ffff0001 	.word	0xffff0001

08007428 <_fwalk_reent>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4606      	mov	r6, r0
 800742e:	4688      	mov	r8, r1
 8007430:	2700      	movs	r7, #0
 8007432:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800743a:	f1b9 0901 	subs.w	r9, r9, #1
 800743e:	d505      	bpl.n	800744c <_fwalk_reent+0x24>
 8007440:	6824      	ldr	r4, [r4, #0]
 8007442:	2c00      	cmp	r4, #0
 8007444:	d1f7      	bne.n	8007436 <_fwalk_reent+0xe>
 8007446:	4638      	mov	r0, r7
 8007448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744c:	89ab      	ldrh	r3, [r5, #12]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d907      	bls.n	8007462 <_fwalk_reent+0x3a>
 8007452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007456:	3301      	adds	r3, #1
 8007458:	d003      	beq.n	8007462 <_fwalk_reent+0x3a>
 800745a:	4629      	mov	r1, r5
 800745c:	4630      	mov	r0, r6
 800745e:	47c0      	blx	r8
 8007460:	4307      	orrs	r7, r0
 8007462:	3568      	adds	r5, #104	; 0x68
 8007464:	e7e9      	b.n	800743a <_fwalk_reent+0x12>

08007466 <rshift>:
 8007466:	6903      	ldr	r3, [r0, #16]
 8007468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800746c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007470:	f100 0414 	add.w	r4, r0, #20
 8007474:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007478:	dd46      	ble.n	8007508 <rshift+0xa2>
 800747a:	f011 011f 	ands.w	r1, r1, #31
 800747e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007482:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007486:	d10c      	bne.n	80074a2 <rshift+0x3c>
 8007488:	4629      	mov	r1, r5
 800748a:	f100 0710 	add.w	r7, r0, #16
 800748e:	42b1      	cmp	r1, r6
 8007490:	d335      	bcc.n	80074fe <rshift+0x98>
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	1eea      	subs	r2, r5, #3
 8007498:	4296      	cmp	r6, r2
 800749a:	bf38      	it	cc
 800749c:	2300      	movcc	r3, #0
 800749e:	4423      	add	r3, r4
 80074a0:	e015      	b.n	80074ce <rshift+0x68>
 80074a2:	46a1      	mov	r9, r4
 80074a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074a8:	f1c1 0820 	rsb	r8, r1, #32
 80074ac:	40cf      	lsrs	r7, r1
 80074ae:	f105 0e04 	add.w	lr, r5, #4
 80074b2:	4576      	cmp	r6, lr
 80074b4:	46f4      	mov	ip, lr
 80074b6:	d816      	bhi.n	80074e6 <rshift+0x80>
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	3a04      	subs	r2, #4
 80074be:	3501      	adds	r5, #1
 80074c0:	42ae      	cmp	r6, r5
 80074c2:	bf38      	it	cc
 80074c4:	2200      	movcc	r2, #0
 80074c6:	18a3      	adds	r3, r4, r2
 80074c8:	50a7      	str	r7, [r4, r2]
 80074ca:	b107      	cbz	r7, 80074ce <rshift+0x68>
 80074cc:	3304      	adds	r3, #4
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	eba3 0204 	sub.w	r2, r3, r4
 80074d4:	bf08      	it	eq
 80074d6:	2300      	moveq	r3, #0
 80074d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074dc:	6102      	str	r2, [r0, #16]
 80074de:	bf08      	it	eq
 80074e0:	6143      	streq	r3, [r0, #20]
 80074e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e6:	f8dc c000 	ldr.w	ip, [ip]
 80074ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80074ee:	ea4c 0707 	orr.w	r7, ip, r7
 80074f2:	f849 7b04 	str.w	r7, [r9], #4
 80074f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074fa:	40cf      	lsrs	r7, r1
 80074fc:	e7d9      	b.n	80074b2 <rshift+0x4c>
 80074fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8007502:	f847 cf04 	str.w	ip, [r7, #4]!
 8007506:	e7c2      	b.n	800748e <rshift+0x28>
 8007508:	4623      	mov	r3, r4
 800750a:	e7e0      	b.n	80074ce <rshift+0x68>

0800750c <__hexdig_fun>:
 800750c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007510:	2b09      	cmp	r3, #9
 8007512:	d802      	bhi.n	800751a <__hexdig_fun+0xe>
 8007514:	3820      	subs	r0, #32
 8007516:	b2c0      	uxtb	r0, r0
 8007518:	4770      	bx	lr
 800751a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800751e:	2b05      	cmp	r3, #5
 8007520:	d801      	bhi.n	8007526 <__hexdig_fun+0x1a>
 8007522:	3847      	subs	r0, #71	; 0x47
 8007524:	e7f7      	b.n	8007516 <__hexdig_fun+0xa>
 8007526:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800752a:	2b05      	cmp	r3, #5
 800752c:	d801      	bhi.n	8007532 <__hexdig_fun+0x26>
 800752e:	3827      	subs	r0, #39	; 0x27
 8007530:	e7f1      	b.n	8007516 <__hexdig_fun+0xa>
 8007532:	2000      	movs	r0, #0
 8007534:	4770      	bx	lr
	...

08007538 <__gethex>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	b08b      	sub	sp, #44	; 0x2c
 800753e:	9306      	str	r3, [sp, #24]
 8007540:	4bb9      	ldr	r3, [pc, #740]	; (8007828 <__gethex+0x2f0>)
 8007542:	9002      	str	r0, [sp, #8]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	468b      	mov	fp, r1
 8007548:	4618      	mov	r0, r3
 800754a:	4690      	mov	r8, r2
 800754c:	9303      	str	r3, [sp, #12]
 800754e:	f7f8 fdff 	bl	8000150 <strlen>
 8007552:	4682      	mov	sl, r0
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	f8db 2000 	ldr.w	r2, [fp]
 800755a:	4403      	add	r3, r0
 800755c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007560:	9307      	str	r3, [sp, #28]
 8007562:	1c93      	adds	r3, r2, #2
 8007564:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007568:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800756c:	32fe      	adds	r2, #254	; 0xfe
 800756e:	18d1      	adds	r1, r2, r3
 8007570:	461f      	mov	r7, r3
 8007572:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007576:	9101      	str	r1, [sp, #4]
 8007578:	2830      	cmp	r0, #48	; 0x30
 800757a:	d0f8      	beq.n	800756e <__gethex+0x36>
 800757c:	f7ff ffc6 	bl	800750c <__hexdig_fun>
 8007580:	4604      	mov	r4, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	d13a      	bne.n	80075fc <__gethex+0xc4>
 8007586:	4652      	mov	r2, sl
 8007588:	4638      	mov	r0, r7
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	f001 fbf2 	bl	8008d74 <strncmp>
 8007590:	4605      	mov	r5, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d166      	bne.n	8007664 <__gethex+0x12c>
 8007596:	f817 000a 	ldrb.w	r0, [r7, sl]
 800759a:	eb07 060a 	add.w	r6, r7, sl
 800759e:	f7ff ffb5 	bl	800750c <__hexdig_fun>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d060      	beq.n	8007668 <__gethex+0x130>
 80075a6:	4633      	mov	r3, r6
 80075a8:	7818      	ldrb	r0, [r3, #0]
 80075aa:	461f      	mov	r7, r3
 80075ac:	2830      	cmp	r0, #48	; 0x30
 80075ae:	f103 0301 	add.w	r3, r3, #1
 80075b2:	d0f9      	beq.n	80075a8 <__gethex+0x70>
 80075b4:	f7ff ffaa 	bl	800750c <__hexdig_fun>
 80075b8:	2301      	movs	r3, #1
 80075ba:	fab0 f480 	clz	r4, r0
 80075be:	4635      	mov	r5, r6
 80075c0:	0964      	lsrs	r4, r4, #5
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	463a      	mov	r2, r7
 80075c6:	4616      	mov	r6, r2
 80075c8:	7830      	ldrb	r0, [r6, #0]
 80075ca:	3201      	adds	r2, #1
 80075cc:	f7ff ff9e 	bl	800750c <__hexdig_fun>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d1f8      	bne.n	80075c6 <__gethex+0x8e>
 80075d4:	4652      	mov	r2, sl
 80075d6:	4630      	mov	r0, r6
 80075d8:	9903      	ldr	r1, [sp, #12]
 80075da:	f001 fbcb 	bl	8008d74 <strncmp>
 80075de:	b980      	cbnz	r0, 8007602 <__gethex+0xca>
 80075e0:	b94d      	cbnz	r5, 80075f6 <__gethex+0xbe>
 80075e2:	eb06 050a 	add.w	r5, r6, sl
 80075e6:	462a      	mov	r2, r5
 80075e8:	4616      	mov	r6, r2
 80075ea:	7830      	ldrb	r0, [r6, #0]
 80075ec:	3201      	adds	r2, #1
 80075ee:	f7ff ff8d 	bl	800750c <__hexdig_fun>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1f8      	bne.n	80075e8 <__gethex+0xb0>
 80075f6:	1bad      	subs	r5, r5, r6
 80075f8:	00ad      	lsls	r5, r5, #2
 80075fa:	e004      	b.n	8007606 <__gethex+0xce>
 80075fc:	2400      	movs	r4, #0
 80075fe:	4625      	mov	r5, r4
 8007600:	e7e0      	b.n	80075c4 <__gethex+0x8c>
 8007602:	2d00      	cmp	r5, #0
 8007604:	d1f7      	bne.n	80075f6 <__gethex+0xbe>
 8007606:	7833      	ldrb	r3, [r6, #0]
 8007608:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800760c:	2b50      	cmp	r3, #80	; 0x50
 800760e:	d139      	bne.n	8007684 <__gethex+0x14c>
 8007610:	7873      	ldrb	r3, [r6, #1]
 8007612:	2b2b      	cmp	r3, #43	; 0x2b
 8007614:	d02a      	beq.n	800766c <__gethex+0x134>
 8007616:	2b2d      	cmp	r3, #45	; 0x2d
 8007618:	d02c      	beq.n	8007674 <__gethex+0x13c>
 800761a:	f04f 0900 	mov.w	r9, #0
 800761e:	1c71      	adds	r1, r6, #1
 8007620:	7808      	ldrb	r0, [r1, #0]
 8007622:	f7ff ff73 	bl	800750c <__hexdig_fun>
 8007626:	1e43      	subs	r3, r0, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b18      	cmp	r3, #24
 800762c:	d82a      	bhi.n	8007684 <__gethex+0x14c>
 800762e:	f1a0 0210 	sub.w	r2, r0, #16
 8007632:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007636:	f7ff ff69 	bl	800750c <__hexdig_fun>
 800763a:	1e43      	subs	r3, r0, #1
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b18      	cmp	r3, #24
 8007640:	d91b      	bls.n	800767a <__gethex+0x142>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	d000      	beq.n	800764a <__gethex+0x112>
 8007648:	4252      	negs	r2, r2
 800764a:	4415      	add	r5, r2
 800764c:	f8cb 1000 	str.w	r1, [fp]
 8007650:	b1d4      	cbz	r4, 8007688 <__gethex+0x150>
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2700      	movne	r7, #0
 800765a:	2706      	moveq	r7, #6
 800765c:	4638      	mov	r0, r7
 800765e:	b00b      	add	sp, #44	; 0x2c
 8007660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007664:	463e      	mov	r6, r7
 8007666:	4625      	mov	r5, r4
 8007668:	2401      	movs	r4, #1
 800766a:	e7cc      	b.n	8007606 <__gethex+0xce>
 800766c:	f04f 0900 	mov.w	r9, #0
 8007670:	1cb1      	adds	r1, r6, #2
 8007672:	e7d5      	b.n	8007620 <__gethex+0xe8>
 8007674:	f04f 0901 	mov.w	r9, #1
 8007678:	e7fa      	b.n	8007670 <__gethex+0x138>
 800767a:	230a      	movs	r3, #10
 800767c:	fb03 0202 	mla	r2, r3, r2, r0
 8007680:	3a10      	subs	r2, #16
 8007682:	e7d6      	b.n	8007632 <__gethex+0xfa>
 8007684:	4631      	mov	r1, r6
 8007686:	e7e1      	b.n	800764c <__gethex+0x114>
 8007688:	4621      	mov	r1, r4
 800768a:	1bf3      	subs	r3, r6, r7
 800768c:	3b01      	subs	r3, #1
 800768e:	2b07      	cmp	r3, #7
 8007690:	dc0a      	bgt.n	80076a8 <__gethex+0x170>
 8007692:	9802      	ldr	r0, [sp, #8]
 8007694:	f000 fae8 	bl	8007c68 <_Balloc>
 8007698:	4604      	mov	r4, r0
 800769a:	b940      	cbnz	r0, 80076ae <__gethex+0x176>
 800769c:	4602      	mov	r2, r0
 800769e:	21de      	movs	r1, #222	; 0xde
 80076a0:	4b62      	ldr	r3, [pc, #392]	; (800782c <__gethex+0x2f4>)
 80076a2:	4863      	ldr	r0, [pc, #396]	; (8007830 <__gethex+0x2f8>)
 80076a4:	f001 fb86 	bl	8008db4 <__assert_func>
 80076a8:	3101      	adds	r1, #1
 80076aa:	105b      	asrs	r3, r3, #1
 80076ac:	e7ef      	b.n	800768e <__gethex+0x156>
 80076ae:	f04f 0b00 	mov.w	fp, #0
 80076b2:	f100 0914 	add.w	r9, r0, #20
 80076b6:	f1ca 0301 	rsb	r3, sl, #1
 80076ba:	f8cd 9010 	str.w	r9, [sp, #16]
 80076be:	f8cd b004 	str.w	fp, [sp, #4]
 80076c2:	9308      	str	r3, [sp, #32]
 80076c4:	42b7      	cmp	r7, r6
 80076c6:	d33f      	bcc.n	8007748 <__gethex+0x210>
 80076c8:	9f04      	ldr	r7, [sp, #16]
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	f847 3b04 	str.w	r3, [r7], #4
 80076d0:	eba7 0709 	sub.w	r7, r7, r9
 80076d4:	10bf      	asrs	r7, r7, #2
 80076d6:	6127      	str	r7, [r4, #16]
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fbbb 	bl	8007e54 <__hi0bits>
 80076de:	017f      	lsls	r7, r7, #5
 80076e0:	f8d8 6000 	ldr.w	r6, [r8]
 80076e4:	1a3f      	subs	r7, r7, r0
 80076e6:	42b7      	cmp	r7, r6
 80076e8:	dd62      	ble.n	80077b0 <__gethex+0x278>
 80076ea:	1bbf      	subs	r7, r7, r6
 80076ec:	4639      	mov	r1, r7
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 ff51 	bl	8008596 <__any_on>
 80076f4:	4682      	mov	sl, r0
 80076f6:	b1a8      	cbz	r0, 8007724 <__gethex+0x1ec>
 80076f8:	f04f 0a01 	mov.w	sl, #1
 80076fc:	1e7b      	subs	r3, r7, #1
 80076fe:	1159      	asrs	r1, r3, #5
 8007700:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007704:	f003 021f 	and.w	r2, r3, #31
 8007708:	fa0a f202 	lsl.w	r2, sl, r2
 800770c:	420a      	tst	r2, r1
 800770e:	d009      	beq.n	8007724 <__gethex+0x1ec>
 8007710:	4553      	cmp	r3, sl
 8007712:	dd05      	ble.n	8007720 <__gethex+0x1e8>
 8007714:	4620      	mov	r0, r4
 8007716:	1eb9      	subs	r1, r7, #2
 8007718:	f000 ff3d 	bl	8008596 <__any_on>
 800771c:	2800      	cmp	r0, #0
 800771e:	d144      	bne.n	80077aa <__gethex+0x272>
 8007720:	f04f 0a02 	mov.w	sl, #2
 8007724:	4639      	mov	r1, r7
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff fe9d 	bl	8007466 <rshift>
 800772c:	443d      	add	r5, r7
 800772e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007732:	42ab      	cmp	r3, r5
 8007734:	da4a      	bge.n	80077cc <__gethex+0x294>
 8007736:	4621      	mov	r1, r4
 8007738:	9802      	ldr	r0, [sp, #8]
 800773a:	f000 fad5 	bl	8007ce8 <_Bfree>
 800773e:	2300      	movs	r3, #0
 8007740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007742:	27a3      	movs	r7, #163	; 0xa3
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e789      	b.n	800765c <__gethex+0x124>
 8007748:	1e73      	subs	r3, r6, #1
 800774a:	9a07      	ldr	r2, [sp, #28]
 800774c:	9305      	str	r3, [sp, #20]
 800774e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007752:	4293      	cmp	r3, r2
 8007754:	d019      	beq.n	800778a <__gethex+0x252>
 8007756:	f1bb 0f20 	cmp.w	fp, #32
 800775a:	d107      	bne.n	800776c <__gethex+0x234>
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	9a01      	ldr	r2, [sp, #4]
 8007760:	f843 2b04 	str.w	r2, [r3], #4
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	2300      	movs	r3, #0
 8007768:	469b      	mov	fp, r3
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007770:	f7ff fecc 	bl	800750c <__hexdig_fun>
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	f000 000f 	and.w	r0, r0, #15
 800777a:	fa00 f00b 	lsl.w	r0, r0, fp
 800777e:	4303      	orrs	r3, r0
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	f10b 0b04 	add.w	fp, fp, #4
 8007786:	9b05      	ldr	r3, [sp, #20]
 8007788:	e00d      	b.n	80077a6 <__gethex+0x26e>
 800778a:	9b05      	ldr	r3, [sp, #20]
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	4413      	add	r3, r2
 8007790:	42bb      	cmp	r3, r7
 8007792:	d3e0      	bcc.n	8007756 <__gethex+0x21e>
 8007794:	4618      	mov	r0, r3
 8007796:	4652      	mov	r2, sl
 8007798:	9903      	ldr	r1, [sp, #12]
 800779a:	9309      	str	r3, [sp, #36]	; 0x24
 800779c:	f001 faea 	bl	8008d74 <strncmp>
 80077a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d1d7      	bne.n	8007756 <__gethex+0x21e>
 80077a6:	461e      	mov	r6, r3
 80077a8:	e78c      	b.n	80076c4 <__gethex+0x18c>
 80077aa:	f04f 0a03 	mov.w	sl, #3
 80077ae:	e7b9      	b.n	8007724 <__gethex+0x1ec>
 80077b0:	da09      	bge.n	80077c6 <__gethex+0x28e>
 80077b2:	1bf7      	subs	r7, r6, r7
 80077b4:	4621      	mov	r1, r4
 80077b6:	463a      	mov	r2, r7
 80077b8:	9802      	ldr	r0, [sp, #8]
 80077ba:	f000 fcad 	bl	8008118 <__lshift>
 80077be:	4604      	mov	r4, r0
 80077c0:	1bed      	subs	r5, r5, r7
 80077c2:	f100 0914 	add.w	r9, r0, #20
 80077c6:	f04f 0a00 	mov.w	sl, #0
 80077ca:	e7b0      	b.n	800772e <__gethex+0x1f6>
 80077cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077d0:	42a8      	cmp	r0, r5
 80077d2:	dd71      	ble.n	80078b8 <__gethex+0x380>
 80077d4:	1b45      	subs	r5, r0, r5
 80077d6:	42ae      	cmp	r6, r5
 80077d8:	dc34      	bgt.n	8007844 <__gethex+0x30c>
 80077da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d028      	beq.n	8007834 <__gethex+0x2fc>
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d02a      	beq.n	800783c <__gethex+0x304>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d115      	bne.n	8007816 <__gethex+0x2de>
 80077ea:	42ae      	cmp	r6, r5
 80077ec:	d113      	bne.n	8007816 <__gethex+0x2de>
 80077ee:	2e01      	cmp	r6, #1
 80077f0:	d10b      	bne.n	800780a <__gethex+0x2d2>
 80077f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077f6:	9a06      	ldr	r2, [sp, #24]
 80077f8:	2762      	movs	r7, #98	; 0x62
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	2301      	movs	r3, #1
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	f8c9 3000 	str.w	r3, [r9]
 8007804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007806:	601c      	str	r4, [r3, #0]
 8007808:	e728      	b.n	800765c <__gethex+0x124>
 800780a:	4620      	mov	r0, r4
 800780c:	1e71      	subs	r1, r6, #1
 800780e:	f000 fec2 	bl	8008596 <__any_on>
 8007812:	2800      	cmp	r0, #0
 8007814:	d1ed      	bne.n	80077f2 <__gethex+0x2ba>
 8007816:	4621      	mov	r1, r4
 8007818:	9802      	ldr	r0, [sp, #8]
 800781a:	f000 fa65 	bl	8007ce8 <_Bfree>
 800781e:	2300      	movs	r3, #0
 8007820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007822:	2750      	movs	r7, #80	; 0x50
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	e719      	b.n	800765c <__gethex+0x124>
 8007828:	08009d80 	.word	0x08009d80
 800782c:	08009d04 	.word	0x08009d04
 8007830:	08009d15 	.word	0x08009d15
 8007834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1ed      	bne.n	8007816 <__gethex+0x2de>
 800783a:	e7da      	b.n	80077f2 <__gethex+0x2ba>
 800783c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1d7      	bne.n	80077f2 <__gethex+0x2ba>
 8007842:	e7e8      	b.n	8007816 <__gethex+0x2de>
 8007844:	1e6f      	subs	r7, r5, #1
 8007846:	f1ba 0f00 	cmp.w	sl, #0
 800784a:	d132      	bne.n	80078b2 <__gethex+0x37a>
 800784c:	b127      	cbz	r7, 8007858 <__gethex+0x320>
 800784e:	4639      	mov	r1, r7
 8007850:	4620      	mov	r0, r4
 8007852:	f000 fea0 	bl	8008596 <__any_on>
 8007856:	4682      	mov	sl, r0
 8007858:	2101      	movs	r1, #1
 800785a:	117b      	asrs	r3, r7, #5
 800785c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007860:	f007 071f 	and.w	r7, r7, #31
 8007864:	fa01 f707 	lsl.w	r7, r1, r7
 8007868:	421f      	tst	r7, r3
 800786a:	f04f 0702 	mov.w	r7, #2
 800786e:	4629      	mov	r1, r5
 8007870:	4620      	mov	r0, r4
 8007872:	bf18      	it	ne
 8007874:	f04a 0a02 	orrne.w	sl, sl, #2
 8007878:	1b76      	subs	r6, r6, r5
 800787a:	f7ff fdf4 	bl	8007466 <rshift>
 800787e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007882:	f1ba 0f00 	cmp.w	sl, #0
 8007886:	d048      	beq.n	800791a <__gethex+0x3e2>
 8007888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d015      	beq.n	80078bc <__gethex+0x384>
 8007890:	2b03      	cmp	r3, #3
 8007892:	d017      	beq.n	80078c4 <__gethex+0x38c>
 8007894:	2b01      	cmp	r3, #1
 8007896:	d109      	bne.n	80078ac <__gethex+0x374>
 8007898:	f01a 0f02 	tst.w	sl, #2
 800789c:	d006      	beq.n	80078ac <__gethex+0x374>
 800789e:	f8d9 0000 	ldr.w	r0, [r9]
 80078a2:	ea4a 0a00 	orr.w	sl, sl, r0
 80078a6:	f01a 0f01 	tst.w	sl, #1
 80078aa:	d10e      	bne.n	80078ca <__gethex+0x392>
 80078ac:	f047 0710 	orr.w	r7, r7, #16
 80078b0:	e033      	b.n	800791a <__gethex+0x3e2>
 80078b2:	f04f 0a01 	mov.w	sl, #1
 80078b6:	e7cf      	b.n	8007858 <__gethex+0x320>
 80078b8:	2701      	movs	r7, #1
 80078ba:	e7e2      	b.n	8007882 <__gethex+0x34a>
 80078bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078be:	f1c3 0301 	rsb	r3, r3, #1
 80078c2:	9315      	str	r3, [sp, #84]	; 0x54
 80078c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <__gethex+0x374>
 80078ca:	f04f 0c00 	mov.w	ip, #0
 80078ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078d2:	f104 0314 	add.w	r3, r4, #20
 80078d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078de:	4618      	mov	r0, r3
 80078e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078e8:	d01c      	beq.n	8007924 <__gethex+0x3ec>
 80078ea:	3201      	adds	r2, #1
 80078ec:	6002      	str	r2, [r0, #0]
 80078ee:	2f02      	cmp	r7, #2
 80078f0:	f104 0314 	add.w	r3, r4, #20
 80078f4:	d13d      	bne.n	8007972 <__gethex+0x43a>
 80078f6:	f8d8 2000 	ldr.w	r2, [r8]
 80078fa:	3a01      	subs	r2, #1
 80078fc:	42b2      	cmp	r2, r6
 80078fe:	d10a      	bne.n	8007916 <__gethex+0x3de>
 8007900:	2201      	movs	r2, #1
 8007902:	1171      	asrs	r1, r6, #5
 8007904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007908:	f006 061f 	and.w	r6, r6, #31
 800790c:	fa02 f606 	lsl.w	r6, r2, r6
 8007910:	421e      	tst	r6, r3
 8007912:	bf18      	it	ne
 8007914:	4617      	movne	r7, r2
 8007916:	f047 0720 	orr.w	r7, r7, #32
 800791a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800791c:	601c      	str	r4, [r3, #0]
 800791e:	9b06      	ldr	r3, [sp, #24]
 8007920:	601d      	str	r5, [r3, #0]
 8007922:	e69b      	b.n	800765c <__gethex+0x124>
 8007924:	4299      	cmp	r1, r3
 8007926:	f843 cc04 	str.w	ip, [r3, #-4]
 800792a:	d8d8      	bhi.n	80078de <__gethex+0x3a6>
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	459b      	cmp	fp, r3
 8007930:	db17      	blt.n	8007962 <__gethex+0x42a>
 8007932:	6861      	ldr	r1, [r4, #4]
 8007934:	9802      	ldr	r0, [sp, #8]
 8007936:	3101      	adds	r1, #1
 8007938:	f000 f996 	bl	8007c68 <_Balloc>
 800793c:	4681      	mov	r9, r0
 800793e:	b918      	cbnz	r0, 8007948 <__gethex+0x410>
 8007940:	4602      	mov	r2, r0
 8007942:	2184      	movs	r1, #132	; 0x84
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <__gethex+0x474>)
 8007946:	e6ac      	b.n	80076a2 <__gethex+0x16a>
 8007948:	6922      	ldr	r2, [r4, #16]
 800794a:	f104 010c 	add.w	r1, r4, #12
 800794e:	3202      	adds	r2, #2
 8007950:	0092      	lsls	r2, r2, #2
 8007952:	300c      	adds	r0, #12
 8007954:	f000 f97a 	bl	8007c4c <memcpy>
 8007958:	4621      	mov	r1, r4
 800795a:	9802      	ldr	r0, [sp, #8]
 800795c:	f000 f9c4 	bl	8007ce8 <_Bfree>
 8007960:	464c      	mov	r4, r9
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	6122      	str	r2, [r4, #16]
 8007968:	2201      	movs	r2, #1
 800796a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800796e:	615a      	str	r2, [r3, #20]
 8007970:	e7bd      	b.n	80078ee <__gethex+0x3b6>
 8007972:	6922      	ldr	r2, [r4, #16]
 8007974:	455a      	cmp	r2, fp
 8007976:	dd0b      	ble.n	8007990 <__gethex+0x458>
 8007978:	2101      	movs	r1, #1
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff fd73 	bl	8007466 <rshift>
 8007980:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007984:	3501      	adds	r5, #1
 8007986:	42ab      	cmp	r3, r5
 8007988:	f6ff aed5 	blt.w	8007736 <__gethex+0x1fe>
 800798c:	2701      	movs	r7, #1
 800798e:	e7c2      	b.n	8007916 <__gethex+0x3de>
 8007990:	f016 061f 	ands.w	r6, r6, #31
 8007994:	d0fa      	beq.n	800798c <__gethex+0x454>
 8007996:	449a      	add	sl, r3
 8007998:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800799c:	f000 fa5a 	bl	8007e54 <__hi0bits>
 80079a0:	f1c6 0620 	rsb	r6, r6, #32
 80079a4:	42b0      	cmp	r0, r6
 80079a6:	dbe7      	blt.n	8007978 <__gethex+0x440>
 80079a8:	e7f0      	b.n	800798c <__gethex+0x454>
 80079aa:	bf00      	nop
 80079ac:	08009d04 	.word	0x08009d04

080079b0 <L_shift>:
 80079b0:	f1c2 0208 	rsb	r2, r2, #8
 80079b4:	0092      	lsls	r2, r2, #2
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	f1c2 0620 	rsb	r6, r2, #32
 80079bc:	6843      	ldr	r3, [r0, #4]
 80079be:	6804      	ldr	r4, [r0, #0]
 80079c0:	fa03 f506 	lsl.w	r5, r3, r6
 80079c4:	432c      	orrs	r4, r5
 80079c6:	40d3      	lsrs	r3, r2
 80079c8:	6004      	str	r4, [r0, #0]
 80079ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80079ce:	4288      	cmp	r0, r1
 80079d0:	d3f4      	bcc.n	80079bc <L_shift+0xc>
 80079d2:	bd70      	pop	{r4, r5, r6, pc}

080079d4 <__match>:
 80079d4:	b530      	push	{r4, r5, lr}
 80079d6:	6803      	ldr	r3, [r0, #0]
 80079d8:	3301      	adds	r3, #1
 80079da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079de:	b914      	cbnz	r4, 80079e6 <__match+0x12>
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	2001      	movs	r0, #1
 80079e4:	bd30      	pop	{r4, r5, pc}
 80079e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079ee:	2d19      	cmp	r5, #25
 80079f0:	bf98      	it	ls
 80079f2:	3220      	addls	r2, #32
 80079f4:	42a2      	cmp	r2, r4
 80079f6:	d0f0      	beq.n	80079da <__match+0x6>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7f3      	b.n	80079e4 <__match+0x10>

080079fc <__hexnan>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	2500      	movs	r5, #0
 8007a02:	680b      	ldr	r3, [r1, #0]
 8007a04:	4682      	mov	sl, r0
 8007a06:	115e      	asrs	r6, r3, #5
 8007a08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a0c:	f013 031f 	ands.w	r3, r3, #31
 8007a10:	bf18      	it	ne
 8007a12:	3604      	addne	r6, #4
 8007a14:	1f37      	subs	r7, r6, #4
 8007a16:	4690      	mov	r8, r2
 8007a18:	46b9      	mov	r9, r7
 8007a1a:	463c      	mov	r4, r7
 8007a1c:	46ab      	mov	fp, r5
 8007a1e:	b087      	sub	sp, #28
 8007a20:	6801      	ldr	r1, [r0, #0]
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a28:	9502      	str	r5, [sp, #8]
 8007a2a:	784a      	ldrb	r2, [r1, #1]
 8007a2c:	1c4b      	adds	r3, r1, #1
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	b342      	cbz	r2, 8007a84 <__hexnan+0x88>
 8007a32:	4610      	mov	r0, r2
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	9204      	str	r2, [sp, #16]
 8007a38:	f7ff fd68 	bl	800750c <__hexdig_fun>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d14f      	bne.n	8007ae0 <__hexnan+0xe4>
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	9905      	ldr	r1, [sp, #20]
 8007a44:	2a20      	cmp	r2, #32
 8007a46:	d818      	bhi.n	8007a7a <__hexnan+0x7e>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	459b      	cmp	fp, r3
 8007a4c:	dd13      	ble.n	8007a76 <__hexnan+0x7a>
 8007a4e:	454c      	cmp	r4, r9
 8007a50:	d206      	bcs.n	8007a60 <__hexnan+0x64>
 8007a52:	2d07      	cmp	r5, #7
 8007a54:	dc04      	bgt.n	8007a60 <__hexnan+0x64>
 8007a56:	462a      	mov	r2, r5
 8007a58:	4649      	mov	r1, r9
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7ff ffa8 	bl	80079b0 <L_shift>
 8007a60:	4544      	cmp	r4, r8
 8007a62:	d950      	bls.n	8007b06 <__hexnan+0x10a>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f1a4 0904 	sub.w	r9, r4, #4
 8007a6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a6e:	461d      	mov	r5, r3
 8007a70:	464c      	mov	r4, r9
 8007a72:	f8cd b008 	str.w	fp, [sp, #8]
 8007a76:	9903      	ldr	r1, [sp, #12]
 8007a78:	e7d7      	b.n	8007a2a <__hexnan+0x2e>
 8007a7a:	2a29      	cmp	r2, #41	; 0x29
 8007a7c:	d156      	bne.n	8007b2c <__hexnan+0x130>
 8007a7e:	3102      	adds	r1, #2
 8007a80:	f8ca 1000 	str.w	r1, [sl]
 8007a84:	f1bb 0f00 	cmp.w	fp, #0
 8007a88:	d050      	beq.n	8007b2c <__hexnan+0x130>
 8007a8a:	454c      	cmp	r4, r9
 8007a8c:	d206      	bcs.n	8007a9c <__hexnan+0xa0>
 8007a8e:	2d07      	cmp	r5, #7
 8007a90:	dc04      	bgt.n	8007a9c <__hexnan+0xa0>
 8007a92:	462a      	mov	r2, r5
 8007a94:	4649      	mov	r1, r9
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff ff8a 	bl	80079b0 <L_shift>
 8007a9c:	4544      	cmp	r4, r8
 8007a9e:	d934      	bls.n	8007b0a <__hexnan+0x10e>
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	f1a8 0204 	sub.w	r2, r8, #4
 8007aa6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007aaa:	429f      	cmp	r7, r3
 8007aac:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ab0:	d2f9      	bcs.n	8007aa6 <__hexnan+0xaa>
 8007ab2:	1b3b      	subs	r3, r7, r4
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	3304      	adds	r3, #4
 8007aba:	3401      	adds	r4, #1
 8007abc:	3e03      	subs	r6, #3
 8007abe:	42b4      	cmp	r4, r6
 8007ac0:	bf88      	it	hi
 8007ac2:	2304      	movhi	r3, #4
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4443      	add	r3, r8
 8007ac8:	f843 2b04 	str.w	r2, [r3], #4
 8007acc:	429f      	cmp	r7, r3
 8007ace:	d2fb      	bcs.n	8007ac8 <__hexnan+0xcc>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	b91b      	cbnz	r3, 8007adc <__hexnan+0xe0>
 8007ad4:	4547      	cmp	r7, r8
 8007ad6:	d127      	bne.n	8007b28 <__hexnan+0x12c>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	2005      	movs	r0, #5
 8007ade:	e026      	b.n	8007b2e <__hexnan+0x132>
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	2d08      	cmp	r5, #8
 8007ae4:	f10b 0b01 	add.w	fp, fp, #1
 8007ae8:	dd06      	ble.n	8007af8 <__hexnan+0xfc>
 8007aea:	4544      	cmp	r4, r8
 8007aec:	d9c3      	bls.n	8007a76 <__hexnan+0x7a>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2501      	movs	r5, #1
 8007af2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af6:	3c04      	subs	r4, #4
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	f000 000f 	and.w	r0, r0, #15
 8007afe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b02:	6022      	str	r2, [r4, #0]
 8007b04:	e7b7      	b.n	8007a76 <__hexnan+0x7a>
 8007b06:	2508      	movs	r5, #8
 8007b08:	e7b5      	b.n	8007a76 <__hexnan+0x7a>
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0df      	beq.n	8007ad0 <__hexnan+0xd4>
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	f1c3 0320 	rsb	r3, r3, #32
 8007b18:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b20:	401a      	ands	r2, r3
 8007b22:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b26:	e7d3      	b.n	8007ad0 <__hexnan+0xd4>
 8007b28:	3f04      	subs	r7, #4
 8007b2a:	e7d1      	b.n	8007ad0 <__hexnan+0xd4>
 8007b2c:	2004      	movs	r0, #4
 8007b2e:	b007      	add	sp, #28
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b34 <__retarget_lock_init_recursive>:
 8007b34:	4770      	bx	lr

08007b36 <__retarget_lock_acquire_recursive>:
 8007b36:	4770      	bx	lr

08007b38 <__retarget_lock_release_recursive>:
 8007b38:	4770      	bx	lr
	...

08007b3c <_lseek_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	2200      	movs	r2, #0
 8007b46:	4d05      	ldr	r5, [pc, #20]	; (8007b5c <_lseek_r+0x20>)
 8007b48:	602a      	str	r2, [r5, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f7f9 fe4d 	bl	80017ea <_lseek>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_lseek_r+0x1e>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_lseek_r+0x1e>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000a2c 	.word	0x20000a2c

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460e      	mov	r6, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	4614      	mov	r4, r2
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	b096      	sub	sp, #88	; 0x58
 8007b70:	da07      	bge.n	8007b82 <__swhatbuf_r+0x22>
 8007b72:	2300      	movs	r3, #0
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	89b3      	ldrh	r3, [r6, #12]
 8007b78:	061a      	lsls	r2, r3, #24
 8007b7a:	d410      	bmi.n	8007b9e <__swhatbuf_r+0x3e>
 8007b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b80:	e00e      	b.n	8007ba0 <__swhatbuf_r+0x40>
 8007b82:	466a      	mov	r2, sp
 8007b84:	f001 f946 	bl	8008e14 <_fstat_r>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dbf2      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b8c:	9a01      	ldr	r2, [sp, #4]
 8007b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b96:	425a      	negs	r2, r3
 8007b98:	415a      	adcs	r2, r3
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	e7ee      	b.n	8007b7c <__swhatbuf_r+0x1c>
 8007b9e:	2340      	movs	r3, #64	; 0x40
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	b016      	add	sp, #88	; 0x58
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}

08007ba8 <__smakebuf_r>:
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bac:	079d      	lsls	r5, r3, #30
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	d507      	bpl.n	8007bc4 <__smakebuf_r+0x1c>
 8007bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	6123      	str	r3, [r4, #16]
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	6163      	str	r3, [r4, #20]
 8007bc0:	b002      	add	sp, #8
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	466a      	mov	r2, sp
 8007bc6:	ab01      	add	r3, sp, #4
 8007bc8:	f7ff ffca 	bl	8007b60 <__swhatbuf_r>
 8007bcc:	9900      	ldr	r1, [sp, #0]
 8007bce:	4605      	mov	r5, r0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 fd5b 	bl	800868c <_malloc_r>
 8007bd6:	b948      	cbnz	r0, 8007bec <__smakebuf_r+0x44>
 8007bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bdc:	059a      	lsls	r2, r3, #22
 8007bde:	d4ef      	bmi.n	8007bc0 <__smakebuf_r+0x18>
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	e7e3      	b.n	8007bb4 <__smakebuf_r+0xc>
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <__smakebuf_r+0x7c>)
 8007bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	6020      	str	r0, [r4, #0]
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	6120      	str	r0, [r4, #16]
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	9b01      	ldr	r3, [sp, #4]
 8007c02:	b15b      	cbz	r3, 8007c1c <__smakebuf_r+0x74>
 8007c04:	4630      	mov	r0, r6
 8007c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c0a:	f001 f915 	bl	8008e38 <_isatty_r>
 8007c0e:	b128      	cbz	r0, 8007c1c <__smakebuf_r+0x74>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	89a0      	ldrh	r0, [r4, #12]
 8007c1e:	4305      	orrs	r5, r0
 8007c20:	81a5      	strh	r5, [r4, #12]
 8007c22:	e7cd      	b.n	8007bc0 <__smakebuf_r+0x18>
 8007c24:	080072c5 	.word	0x080072c5

08007c28 <__ascii_mbtowc>:
 8007c28:	b082      	sub	sp, #8
 8007c2a:	b901      	cbnz	r1, 8007c2e <__ascii_mbtowc+0x6>
 8007c2c:	a901      	add	r1, sp, #4
 8007c2e:	b142      	cbz	r2, 8007c42 <__ascii_mbtowc+0x1a>
 8007c30:	b14b      	cbz	r3, 8007c46 <__ascii_mbtowc+0x1e>
 8007c32:	7813      	ldrb	r3, [r2, #0]
 8007c34:	600b      	str	r3, [r1, #0]
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	1e10      	subs	r0, r2, #0
 8007c3a:	bf18      	it	ne
 8007c3c:	2001      	movne	r0, #1
 8007c3e:	b002      	add	sp, #8
 8007c40:	4770      	bx	lr
 8007c42:	4610      	mov	r0, r2
 8007c44:	e7fb      	b.n	8007c3e <__ascii_mbtowc+0x16>
 8007c46:	f06f 0001 	mvn.w	r0, #1
 8007c4a:	e7f8      	b.n	8007c3e <__ascii_mbtowc+0x16>

08007c4c <memcpy>:
 8007c4c:	440a      	add	r2, r1
 8007c4e:	4291      	cmp	r1, r2
 8007c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c54:	d100      	bne.n	8007c58 <memcpy+0xc>
 8007c56:	4770      	bx	lr
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c5e:	4291      	cmp	r1, r2
 8007c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c64:	d1f9      	bne.n	8007c5a <memcpy+0xe>
 8007c66:	bd10      	pop	{r4, pc}

08007c68 <_Balloc>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	b976      	cbnz	r6, 8007c90 <_Balloc+0x28>
 8007c72:	2010      	movs	r0, #16
 8007c74:	f001 f8f0 	bl	8008e58 <malloc>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	6260      	str	r0, [r4, #36]	; 0x24
 8007c7c:	b920      	cbnz	r0, 8007c88 <_Balloc+0x20>
 8007c7e:	2166      	movs	r1, #102	; 0x66
 8007c80:	4b17      	ldr	r3, [pc, #92]	; (8007ce0 <_Balloc+0x78>)
 8007c82:	4818      	ldr	r0, [pc, #96]	; (8007ce4 <_Balloc+0x7c>)
 8007c84:	f001 f896 	bl	8008db4 <__assert_func>
 8007c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c8c:	6006      	str	r6, [r0, #0]
 8007c8e:	60c6      	str	r6, [r0, #12]
 8007c90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c92:	68f3      	ldr	r3, [r6, #12]
 8007c94:	b183      	cbz	r3, 8007cb8 <_Balloc+0x50>
 8007c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c9e:	b9b8      	cbnz	r0, 8007cd0 <_Balloc+0x68>
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ca6:	1d72      	adds	r2, r6, #5
 8007ca8:	4620      	mov	r0, r4
 8007caa:	0092      	lsls	r2, r2, #2
 8007cac:	f000 fc94 	bl	80085d8 <_calloc_r>
 8007cb0:	b160      	cbz	r0, 8007ccc <_Balloc+0x64>
 8007cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cb6:	e00e      	b.n	8007cd6 <_Balloc+0x6e>
 8007cb8:	2221      	movs	r2, #33	; 0x21
 8007cba:	2104      	movs	r1, #4
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fc8b 	bl	80085d8 <_calloc_r>
 8007cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc4:	60f0      	str	r0, [r6, #12]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e4      	bne.n	8007c96 <_Balloc+0x2e>
 8007ccc:	2000      	movs	r0, #0
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	6802      	ldr	r2, [r0, #0]
 8007cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cdc:	e7f7      	b.n	8007cce <_Balloc+0x66>
 8007cde:	bf00      	nop
 8007ce0:	08009d94 	.word	0x08009d94
 8007ce4:	08009dab 	.word	0x08009dab

08007ce8 <_Bfree>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cec:	4605      	mov	r5, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	b976      	cbnz	r6, 8007d10 <_Bfree+0x28>
 8007cf2:	2010      	movs	r0, #16
 8007cf4:	f001 f8b0 	bl	8008e58 <malloc>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6268      	str	r0, [r5, #36]	; 0x24
 8007cfc:	b920      	cbnz	r0, 8007d08 <_Bfree+0x20>
 8007cfe:	218a      	movs	r1, #138	; 0x8a
 8007d00:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <_Bfree+0x3c>)
 8007d02:	4809      	ldr	r0, [pc, #36]	; (8007d28 <_Bfree+0x40>)
 8007d04:	f001 f856 	bl	8008db4 <__assert_func>
 8007d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d0c:	6006      	str	r6, [r0, #0]
 8007d0e:	60c6      	str	r6, [r0, #12]
 8007d10:	b13c      	cbz	r4, 8007d22 <_Bfree+0x3a>
 8007d12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d14:	6862      	ldr	r2, [r4, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d1c:	6021      	str	r1, [r4, #0]
 8007d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	08009d94 	.word	0x08009d94
 8007d28:	08009dab 	.word	0x08009dab

08007d2c <__multadd>:
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	4698      	mov	r8, r3
 8007d32:	460c      	mov	r4, r1
 8007d34:	2300      	movs	r3, #0
 8007d36:	690e      	ldr	r6, [r1, #16]
 8007d38:	4607      	mov	r7, r0
 8007d3a:	f101 0014 	add.w	r0, r1, #20
 8007d3e:	6805      	ldr	r5, [r0, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	b2a9      	uxth	r1, r5
 8007d44:	fb02 8101 	mla	r1, r2, r1, r8
 8007d48:	0c2d      	lsrs	r5, r5, #16
 8007d4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d4e:	fb02 c505 	mla	r5, r2, r5, ip
 8007d52:	b289      	uxth	r1, r1
 8007d54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d58:	429e      	cmp	r6, r3
 8007d5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d5e:	f840 1b04 	str.w	r1, [r0], #4
 8007d62:	dcec      	bgt.n	8007d3e <__multadd+0x12>
 8007d64:	f1b8 0f00 	cmp.w	r8, #0
 8007d68:	d022      	beq.n	8007db0 <__multadd+0x84>
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	42b3      	cmp	r3, r6
 8007d6e:	dc19      	bgt.n	8007da4 <__multadd+0x78>
 8007d70:	6861      	ldr	r1, [r4, #4]
 8007d72:	4638      	mov	r0, r7
 8007d74:	3101      	adds	r1, #1
 8007d76:	f7ff ff77 	bl	8007c68 <_Balloc>
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	b928      	cbnz	r0, 8007d8a <__multadd+0x5e>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	21b5      	movs	r1, #181	; 0xb5
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <__multadd+0x8c>)
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <__multadd+0x90>)
 8007d86:	f001 f815 	bl	8008db4 <__assert_func>
 8007d8a:	6922      	ldr	r2, [r4, #16]
 8007d8c:	f104 010c 	add.w	r1, r4, #12
 8007d90:	3202      	adds	r2, #2
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	300c      	adds	r0, #12
 8007d96:	f7ff ff59 	bl	8007c4c <memcpy>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff ffa3 	bl	8007ce8 <_Bfree>
 8007da2:	462c      	mov	r4, r5
 8007da4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007da8:	3601      	adds	r6, #1
 8007daa:	f8c3 8014 	str.w	r8, [r3, #20]
 8007dae:	6126      	str	r6, [r4, #16]
 8007db0:	4620      	mov	r0, r4
 8007db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db6:	bf00      	nop
 8007db8:	08009d04 	.word	0x08009d04
 8007dbc:	08009dab 	.word	0x08009dab

08007dc0 <__s2b>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4615      	mov	r5, r2
 8007dc6:	2209      	movs	r2, #9
 8007dc8:	461f      	mov	r7, r3
 8007dca:	3308      	adds	r3, #8
 8007dcc:	460c      	mov	r4, r1
 8007dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	db09      	blt.n	8007df0 <__s2b+0x30>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff ff43 	bl	8007c68 <_Balloc>
 8007de2:	b940      	cbnz	r0, 8007df6 <__s2b+0x36>
 8007de4:	4602      	mov	r2, r0
 8007de6:	21ce      	movs	r1, #206	; 0xce
 8007de8:	4b18      	ldr	r3, [pc, #96]	; (8007e4c <__s2b+0x8c>)
 8007dea:	4819      	ldr	r0, [pc, #100]	; (8007e50 <__s2b+0x90>)
 8007dec:	f000 ffe2 	bl	8008db4 <__assert_func>
 8007df0:	0052      	lsls	r2, r2, #1
 8007df2:	3101      	adds	r1, #1
 8007df4:	e7f0      	b.n	8007dd8 <__s2b+0x18>
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	2d09      	cmp	r5, #9
 8007dfa:	6143      	str	r3, [r0, #20]
 8007dfc:	f04f 0301 	mov.w	r3, #1
 8007e00:	6103      	str	r3, [r0, #16]
 8007e02:	dd16      	ble.n	8007e32 <__s2b+0x72>
 8007e04:	f104 0909 	add.w	r9, r4, #9
 8007e08:	46c8      	mov	r8, r9
 8007e0a:	442c      	add	r4, r5
 8007e0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e10:	4601      	mov	r1, r0
 8007e12:	220a      	movs	r2, #10
 8007e14:	4630      	mov	r0, r6
 8007e16:	3b30      	subs	r3, #48	; 0x30
 8007e18:	f7ff ff88 	bl	8007d2c <__multadd>
 8007e1c:	45a0      	cmp	r8, r4
 8007e1e:	d1f5      	bne.n	8007e0c <__s2b+0x4c>
 8007e20:	f1a5 0408 	sub.w	r4, r5, #8
 8007e24:	444c      	add	r4, r9
 8007e26:	1b2d      	subs	r5, r5, r4
 8007e28:	1963      	adds	r3, r4, r5
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	db04      	blt.n	8007e38 <__s2b+0x78>
 8007e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e32:	2509      	movs	r5, #9
 8007e34:	340a      	adds	r4, #10
 8007e36:	e7f6      	b.n	8007e26 <__s2b+0x66>
 8007e38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	220a      	movs	r2, #10
 8007e40:	4630      	mov	r0, r6
 8007e42:	3b30      	subs	r3, #48	; 0x30
 8007e44:	f7ff ff72 	bl	8007d2c <__multadd>
 8007e48:	e7ee      	b.n	8007e28 <__s2b+0x68>
 8007e4a:	bf00      	nop
 8007e4c:	08009d04 	.word	0x08009d04
 8007e50:	08009dab 	.word	0x08009dab

08007e54 <__hi0bits>:
 8007e54:	0c02      	lsrs	r2, r0, #16
 8007e56:	0412      	lsls	r2, r2, #16
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b9ca      	cbnz	r2, 8007e90 <__hi0bits+0x3c>
 8007e5c:	0403      	lsls	r3, r0, #16
 8007e5e:	2010      	movs	r0, #16
 8007e60:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e64:	bf04      	itt	eq
 8007e66:	021b      	lsleq	r3, r3, #8
 8007e68:	3008      	addeq	r0, #8
 8007e6a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e6e:	bf04      	itt	eq
 8007e70:	011b      	lsleq	r3, r3, #4
 8007e72:	3004      	addeq	r0, #4
 8007e74:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e78:	bf04      	itt	eq
 8007e7a:	009b      	lsleq	r3, r3, #2
 8007e7c:	3002      	addeq	r0, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	db05      	blt.n	8007e8e <__hi0bits+0x3a>
 8007e82:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e86:	f100 0001 	add.w	r0, r0, #1
 8007e8a:	bf08      	it	eq
 8007e8c:	2020      	moveq	r0, #32
 8007e8e:	4770      	bx	lr
 8007e90:	2000      	movs	r0, #0
 8007e92:	e7e5      	b.n	8007e60 <__hi0bits+0xc>

08007e94 <__lo0bits>:
 8007e94:	6803      	ldr	r3, [r0, #0]
 8007e96:	4602      	mov	r2, r0
 8007e98:	f013 0007 	ands.w	r0, r3, #7
 8007e9c:	d00b      	beq.n	8007eb6 <__lo0bits+0x22>
 8007e9e:	07d9      	lsls	r1, r3, #31
 8007ea0:	d422      	bmi.n	8007ee8 <__lo0bits+0x54>
 8007ea2:	0798      	lsls	r0, r3, #30
 8007ea4:	bf49      	itett	mi
 8007ea6:	085b      	lsrmi	r3, r3, #1
 8007ea8:	089b      	lsrpl	r3, r3, #2
 8007eaa:	2001      	movmi	r0, #1
 8007eac:	6013      	strmi	r3, [r2, #0]
 8007eae:	bf5c      	itt	pl
 8007eb0:	2002      	movpl	r0, #2
 8007eb2:	6013      	strpl	r3, [r2, #0]
 8007eb4:	4770      	bx	lr
 8007eb6:	b299      	uxth	r1, r3
 8007eb8:	b909      	cbnz	r1, 8007ebe <__lo0bits+0x2a>
 8007eba:	2010      	movs	r0, #16
 8007ebc:	0c1b      	lsrs	r3, r3, #16
 8007ebe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ec2:	bf04      	itt	eq
 8007ec4:	0a1b      	lsreq	r3, r3, #8
 8007ec6:	3008      	addeq	r0, #8
 8007ec8:	0719      	lsls	r1, r3, #28
 8007eca:	bf04      	itt	eq
 8007ecc:	091b      	lsreq	r3, r3, #4
 8007ece:	3004      	addeq	r0, #4
 8007ed0:	0799      	lsls	r1, r3, #30
 8007ed2:	bf04      	itt	eq
 8007ed4:	089b      	lsreq	r3, r3, #2
 8007ed6:	3002      	addeq	r0, #2
 8007ed8:	07d9      	lsls	r1, r3, #31
 8007eda:	d403      	bmi.n	8007ee4 <__lo0bits+0x50>
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	f100 0001 	add.w	r0, r0, #1
 8007ee2:	d003      	beq.n	8007eec <__lo0bits+0x58>
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	4770      	bx	lr
 8007ee8:	2000      	movs	r0, #0
 8007eea:	4770      	bx	lr
 8007eec:	2020      	movs	r0, #32
 8007eee:	4770      	bx	lr

08007ef0 <__i2b>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	f7ff feb7 	bl	8007c68 <_Balloc>
 8007efa:	4602      	mov	r2, r0
 8007efc:	b928      	cbnz	r0, 8007f0a <__i2b+0x1a>
 8007efe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f02:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <__i2b+0x24>)
 8007f04:	4804      	ldr	r0, [pc, #16]	; (8007f18 <__i2b+0x28>)
 8007f06:	f000 ff55 	bl	8008db4 <__assert_func>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	6144      	str	r4, [r0, #20]
 8007f0e:	6103      	str	r3, [r0, #16]
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	bf00      	nop
 8007f14:	08009d04 	.word	0x08009d04
 8007f18:	08009dab 	.word	0x08009dab

08007f1c <__multiply>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	4614      	mov	r4, r2
 8007f22:	690a      	ldr	r2, [r1, #16]
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	460d      	mov	r5, r1
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	bfbe      	ittt	lt
 8007f2c:	460b      	movlt	r3, r1
 8007f2e:	4625      	movlt	r5, r4
 8007f30:	461c      	movlt	r4, r3
 8007f32:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f3a:	68ab      	ldr	r3, [r5, #8]
 8007f3c:	6869      	ldr	r1, [r5, #4]
 8007f3e:	eb0a 0709 	add.w	r7, sl, r9
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	b085      	sub	sp, #20
 8007f46:	bfb8      	it	lt
 8007f48:	3101      	addlt	r1, #1
 8007f4a:	f7ff fe8d 	bl	8007c68 <_Balloc>
 8007f4e:	b930      	cbnz	r0, 8007f5e <__multiply+0x42>
 8007f50:	4602      	mov	r2, r0
 8007f52:	f240 115d 	movw	r1, #349	; 0x15d
 8007f56:	4b41      	ldr	r3, [pc, #260]	; (800805c <__multiply+0x140>)
 8007f58:	4841      	ldr	r0, [pc, #260]	; (8008060 <__multiply+0x144>)
 8007f5a:	f000 ff2b 	bl	8008db4 <__assert_func>
 8007f5e:	f100 0614 	add.w	r6, r0, #20
 8007f62:	4633      	mov	r3, r6
 8007f64:	2200      	movs	r2, #0
 8007f66:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007f6a:	4543      	cmp	r3, r8
 8007f6c:	d31e      	bcc.n	8007fac <__multiply+0x90>
 8007f6e:	f105 0c14 	add.w	ip, r5, #20
 8007f72:	f104 0314 	add.w	r3, r4, #20
 8007f76:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f7a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f7e:	9202      	str	r2, [sp, #8]
 8007f80:	ebac 0205 	sub.w	r2, ip, r5
 8007f84:	3a15      	subs	r2, #21
 8007f86:	f022 0203 	bic.w	r2, r2, #3
 8007f8a:	3204      	adds	r2, #4
 8007f8c:	f105 0115 	add.w	r1, r5, #21
 8007f90:	458c      	cmp	ip, r1
 8007f92:	bf38      	it	cc
 8007f94:	2204      	movcc	r2, #4
 8007f96:	9201      	str	r2, [sp, #4]
 8007f98:	9a02      	ldr	r2, [sp, #8]
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d808      	bhi.n	8007fb2 <__multiply+0x96>
 8007fa0:	2f00      	cmp	r7, #0
 8007fa2:	dc55      	bgt.n	8008050 <__multiply+0x134>
 8007fa4:	6107      	str	r7, [r0, #16]
 8007fa6:	b005      	add	sp, #20
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	f843 2b04 	str.w	r2, [r3], #4
 8007fb0:	e7db      	b.n	8007f6a <__multiply+0x4e>
 8007fb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fb6:	f1ba 0f00 	cmp.w	sl, #0
 8007fba:	d020      	beq.n	8007ffe <__multiply+0xe2>
 8007fbc:	46b1      	mov	r9, r6
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f105 0e14 	add.w	lr, r5, #20
 8007fc4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007fc8:	f8d9 b000 	ldr.w	fp, [r9]
 8007fcc:	b2a1      	uxth	r1, r4
 8007fce:	fa1f fb8b 	uxth.w	fp, fp
 8007fd2:	fb0a b101 	mla	r1, sl, r1, fp
 8007fd6:	4411      	add	r1, r2
 8007fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fdc:	0c24      	lsrs	r4, r4, #16
 8007fde:	0c12      	lsrs	r2, r2, #16
 8007fe0:	fb0a 2404 	mla	r4, sl, r4, r2
 8007fe4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007fe8:	b289      	uxth	r1, r1
 8007fea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007fee:	45f4      	cmp	ip, lr
 8007ff0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ff4:	f849 1b04 	str.w	r1, [r9], #4
 8007ff8:	d8e4      	bhi.n	8007fc4 <__multiply+0xa8>
 8007ffa:	9901      	ldr	r1, [sp, #4]
 8007ffc:	5072      	str	r2, [r6, r1]
 8007ffe:	9a03      	ldr	r2, [sp, #12]
 8008000:	3304      	adds	r3, #4
 8008002:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	d01f      	beq.n	800804c <__multiply+0x130>
 800800c:	46b6      	mov	lr, r6
 800800e:	f04f 0a00 	mov.w	sl, #0
 8008012:	6834      	ldr	r4, [r6, #0]
 8008014:	f105 0114 	add.w	r1, r5, #20
 8008018:	880a      	ldrh	r2, [r1, #0]
 800801a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800801e:	b2a4      	uxth	r4, r4
 8008020:	fb09 b202 	mla	r2, r9, r2, fp
 8008024:	4492      	add	sl, r2
 8008026:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800802a:	f84e 4b04 	str.w	r4, [lr], #4
 800802e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008032:	f8be 2000 	ldrh.w	r2, [lr]
 8008036:	0c24      	lsrs	r4, r4, #16
 8008038:	fb09 2404 	mla	r4, r9, r4, r2
 800803c:	458c      	cmp	ip, r1
 800803e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008042:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008046:	d8e7      	bhi.n	8008018 <__multiply+0xfc>
 8008048:	9a01      	ldr	r2, [sp, #4]
 800804a:	50b4      	str	r4, [r6, r2]
 800804c:	3604      	adds	r6, #4
 800804e:	e7a3      	b.n	8007f98 <__multiply+0x7c>
 8008050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1a5      	bne.n	8007fa4 <__multiply+0x88>
 8008058:	3f01      	subs	r7, #1
 800805a:	e7a1      	b.n	8007fa0 <__multiply+0x84>
 800805c:	08009d04 	.word	0x08009d04
 8008060:	08009dab 	.word	0x08009dab

08008064 <__pow5mult>:
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4615      	mov	r5, r2
 800806a:	f012 0203 	ands.w	r2, r2, #3
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	d007      	beq.n	8008084 <__pow5mult+0x20>
 8008074:	4c25      	ldr	r4, [pc, #148]	; (800810c <__pow5mult+0xa8>)
 8008076:	3a01      	subs	r2, #1
 8008078:	2300      	movs	r3, #0
 800807a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800807e:	f7ff fe55 	bl	8007d2c <__multadd>
 8008082:	4607      	mov	r7, r0
 8008084:	10ad      	asrs	r5, r5, #2
 8008086:	d03d      	beq.n	8008104 <__pow5mult+0xa0>
 8008088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800808a:	b97c      	cbnz	r4, 80080ac <__pow5mult+0x48>
 800808c:	2010      	movs	r0, #16
 800808e:	f000 fee3 	bl	8008e58 <malloc>
 8008092:	4602      	mov	r2, r0
 8008094:	6270      	str	r0, [r6, #36]	; 0x24
 8008096:	b928      	cbnz	r0, 80080a4 <__pow5mult+0x40>
 8008098:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800809c:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <__pow5mult+0xac>)
 800809e:	481d      	ldr	r0, [pc, #116]	; (8008114 <__pow5mult+0xb0>)
 80080a0:	f000 fe88 	bl	8008db4 <__assert_func>
 80080a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080a8:	6004      	str	r4, [r0, #0]
 80080aa:	60c4      	str	r4, [r0, #12]
 80080ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080b4:	b94c      	cbnz	r4, 80080ca <__pow5mult+0x66>
 80080b6:	f240 2171 	movw	r1, #625	; 0x271
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ff18 	bl	8007ef0 <__i2b>
 80080c0:	2300      	movs	r3, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	f04f 0900 	mov.w	r9, #0
 80080ce:	07eb      	lsls	r3, r5, #31
 80080d0:	d50a      	bpl.n	80080e8 <__pow5mult+0x84>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff20 	bl	8007f1c <__multiply>
 80080dc:	4680      	mov	r8, r0
 80080de:	4639      	mov	r1, r7
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff fe01 	bl	8007ce8 <_Bfree>
 80080e6:	4647      	mov	r7, r8
 80080e8:	106d      	asrs	r5, r5, #1
 80080ea:	d00b      	beq.n	8008104 <__pow5mult+0xa0>
 80080ec:	6820      	ldr	r0, [r4, #0]
 80080ee:	b938      	cbnz	r0, 8008100 <__pow5mult+0x9c>
 80080f0:	4622      	mov	r2, r4
 80080f2:	4621      	mov	r1, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff ff11 	bl	8007f1c <__multiply>
 80080fa:	6020      	str	r0, [r4, #0]
 80080fc:	f8c0 9000 	str.w	r9, [r0]
 8008100:	4604      	mov	r4, r0
 8008102:	e7e4      	b.n	80080ce <__pow5mult+0x6a>
 8008104:	4638      	mov	r0, r7
 8008106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810a:	bf00      	nop
 800810c:	08009f00 	.word	0x08009f00
 8008110:	08009d94 	.word	0x08009d94
 8008114:	08009dab 	.word	0x08009dab

08008118 <__lshift>:
 8008118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800811c:	460c      	mov	r4, r1
 800811e:	4607      	mov	r7, r0
 8008120:	4691      	mov	r9, r2
 8008122:	6923      	ldr	r3, [r4, #16]
 8008124:	6849      	ldr	r1, [r1, #4]
 8008126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008130:	f108 0601 	add.w	r6, r8, #1
 8008134:	42b3      	cmp	r3, r6
 8008136:	db0b      	blt.n	8008150 <__lshift+0x38>
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff fd95 	bl	8007c68 <_Balloc>
 800813e:	4605      	mov	r5, r0
 8008140:	b948      	cbnz	r0, 8008156 <__lshift+0x3e>
 8008142:	4602      	mov	r2, r0
 8008144:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008148:	4b27      	ldr	r3, [pc, #156]	; (80081e8 <__lshift+0xd0>)
 800814a:	4828      	ldr	r0, [pc, #160]	; (80081ec <__lshift+0xd4>)
 800814c:	f000 fe32 	bl	8008db4 <__assert_func>
 8008150:	3101      	adds	r1, #1
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	e7ee      	b.n	8008134 <__lshift+0x1c>
 8008156:	2300      	movs	r3, #0
 8008158:	f100 0114 	add.w	r1, r0, #20
 800815c:	f100 0210 	add.w	r2, r0, #16
 8008160:	4618      	mov	r0, r3
 8008162:	4553      	cmp	r3, sl
 8008164:	db33      	blt.n	80081ce <__lshift+0xb6>
 8008166:	6920      	ldr	r0, [r4, #16]
 8008168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800816c:	f104 0314 	add.w	r3, r4, #20
 8008170:	f019 091f 	ands.w	r9, r9, #31
 8008174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800817c:	d02b      	beq.n	80081d6 <__lshift+0xbe>
 800817e:	468a      	mov	sl, r1
 8008180:	2200      	movs	r2, #0
 8008182:	f1c9 0e20 	rsb	lr, r9, #32
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	fa00 f009 	lsl.w	r0, r0, r9
 800818c:	4302      	orrs	r2, r0
 800818e:	f84a 2b04 	str.w	r2, [sl], #4
 8008192:	f853 2b04 	ldr.w	r2, [r3], #4
 8008196:	459c      	cmp	ip, r3
 8008198:	fa22 f20e 	lsr.w	r2, r2, lr
 800819c:	d8f3      	bhi.n	8008186 <__lshift+0x6e>
 800819e:	ebac 0304 	sub.w	r3, ip, r4
 80081a2:	3b15      	subs	r3, #21
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	3304      	adds	r3, #4
 80081aa:	f104 0015 	add.w	r0, r4, #21
 80081ae:	4584      	cmp	ip, r0
 80081b0:	bf38      	it	cc
 80081b2:	2304      	movcc	r3, #4
 80081b4:	50ca      	str	r2, [r1, r3]
 80081b6:	b10a      	cbz	r2, 80081bc <__lshift+0xa4>
 80081b8:	f108 0602 	add.w	r6, r8, #2
 80081bc:	3e01      	subs	r6, #1
 80081be:	4638      	mov	r0, r7
 80081c0:	4621      	mov	r1, r4
 80081c2:	612e      	str	r6, [r5, #16]
 80081c4:	f7ff fd90 	bl	8007ce8 <_Bfree>
 80081c8:	4628      	mov	r0, r5
 80081ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80081d2:	3301      	adds	r3, #1
 80081d4:	e7c5      	b.n	8008162 <__lshift+0x4a>
 80081d6:	3904      	subs	r1, #4
 80081d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081dc:	459c      	cmp	ip, r3
 80081de:	f841 2f04 	str.w	r2, [r1, #4]!
 80081e2:	d8f9      	bhi.n	80081d8 <__lshift+0xc0>
 80081e4:	e7ea      	b.n	80081bc <__lshift+0xa4>
 80081e6:	bf00      	nop
 80081e8:	08009d04 	.word	0x08009d04
 80081ec:	08009dab 	.word	0x08009dab

080081f0 <__mcmp>:
 80081f0:	4603      	mov	r3, r0
 80081f2:	690a      	ldr	r2, [r1, #16]
 80081f4:	6900      	ldr	r0, [r0, #16]
 80081f6:	b530      	push	{r4, r5, lr}
 80081f8:	1a80      	subs	r0, r0, r2
 80081fa:	d10d      	bne.n	8008218 <__mcmp+0x28>
 80081fc:	3314      	adds	r3, #20
 80081fe:	3114      	adds	r1, #20
 8008200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800820c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008210:	4295      	cmp	r5, r2
 8008212:	d002      	beq.n	800821a <__mcmp+0x2a>
 8008214:	d304      	bcc.n	8008220 <__mcmp+0x30>
 8008216:	2001      	movs	r0, #1
 8008218:	bd30      	pop	{r4, r5, pc}
 800821a:	42a3      	cmp	r3, r4
 800821c:	d3f4      	bcc.n	8008208 <__mcmp+0x18>
 800821e:	e7fb      	b.n	8008218 <__mcmp+0x28>
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	e7f8      	b.n	8008218 <__mcmp+0x28>
	...

08008228 <__mdiff>:
 8008228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	4606      	mov	r6, r0
 8008230:	4611      	mov	r1, r2
 8008232:	4620      	mov	r0, r4
 8008234:	4692      	mov	sl, r2
 8008236:	f7ff ffdb 	bl	80081f0 <__mcmp>
 800823a:	1e05      	subs	r5, r0, #0
 800823c:	d111      	bne.n	8008262 <__mdiff+0x3a>
 800823e:	4629      	mov	r1, r5
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff fd11 	bl	8007c68 <_Balloc>
 8008246:	4602      	mov	r2, r0
 8008248:	b928      	cbnz	r0, 8008256 <__mdiff+0x2e>
 800824a:	f240 2132 	movw	r1, #562	; 0x232
 800824e:	4b3c      	ldr	r3, [pc, #240]	; (8008340 <__mdiff+0x118>)
 8008250:	483c      	ldr	r0, [pc, #240]	; (8008344 <__mdiff+0x11c>)
 8008252:	f000 fdaf 	bl	8008db4 <__assert_func>
 8008256:	2301      	movs	r3, #1
 8008258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800825c:	4610      	mov	r0, r2
 800825e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	bfa4      	itt	ge
 8008264:	4653      	movge	r3, sl
 8008266:	46a2      	movge	sl, r4
 8008268:	4630      	mov	r0, r6
 800826a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800826e:	bfa6      	itte	ge
 8008270:	461c      	movge	r4, r3
 8008272:	2500      	movge	r5, #0
 8008274:	2501      	movlt	r5, #1
 8008276:	f7ff fcf7 	bl	8007c68 <_Balloc>
 800827a:	4602      	mov	r2, r0
 800827c:	b918      	cbnz	r0, 8008286 <__mdiff+0x5e>
 800827e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <__mdiff+0x118>)
 8008284:	e7e4      	b.n	8008250 <__mdiff+0x28>
 8008286:	f100 0814 	add.w	r8, r0, #20
 800828a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800828e:	60c5      	str	r5, [r0, #12]
 8008290:	f04f 0c00 	mov.w	ip, #0
 8008294:	f10a 0514 	add.w	r5, sl, #20
 8008298:	f10a 0010 	add.w	r0, sl, #16
 800829c:	46c2      	mov	sl, r8
 800829e:	6926      	ldr	r6, [r4, #16]
 80082a0:	f104 0914 	add.w	r9, r4, #20
 80082a4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80082a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082ac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80082b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80082b4:	fa1f f18b 	uxth.w	r1, fp
 80082b8:	4461      	add	r1, ip
 80082ba:	fa1f fc83 	uxth.w	ip, r3
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	eba1 010c 	sub.w	r1, r1, ip
 80082c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082cc:	b289      	uxth	r1, r1
 80082ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082d2:	454e      	cmp	r6, r9
 80082d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082d8:	f84a 3b04 	str.w	r3, [sl], #4
 80082dc:	d8e6      	bhi.n	80082ac <__mdiff+0x84>
 80082de:	1b33      	subs	r3, r6, r4
 80082e0:	3b15      	subs	r3, #21
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	3415      	adds	r4, #21
 80082e8:	3304      	adds	r3, #4
 80082ea:	42a6      	cmp	r6, r4
 80082ec:	bf38      	it	cc
 80082ee:	2304      	movcc	r3, #4
 80082f0:	441d      	add	r5, r3
 80082f2:	4443      	add	r3, r8
 80082f4:	461e      	mov	r6, r3
 80082f6:	462c      	mov	r4, r5
 80082f8:	4574      	cmp	r4, lr
 80082fa:	d30e      	bcc.n	800831a <__mdiff+0xf2>
 80082fc:	f10e 0103 	add.w	r1, lr, #3
 8008300:	1b49      	subs	r1, r1, r5
 8008302:	f021 0103 	bic.w	r1, r1, #3
 8008306:	3d03      	subs	r5, #3
 8008308:	45ae      	cmp	lr, r5
 800830a:	bf38      	it	cc
 800830c:	2100      	movcc	r1, #0
 800830e:	4419      	add	r1, r3
 8008310:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008314:	b18b      	cbz	r3, 800833a <__mdiff+0x112>
 8008316:	6117      	str	r7, [r2, #16]
 8008318:	e7a0      	b.n	800825c <__mdiff+0x34>
 800831a:	f854 8b04 	ldr.w	r8, [r4], #4
 800831e:	fa1f f188 	uxth.w	r1, r8
 8008322:	4461      	add	r1, ip
 8008324:	1408      	asrs	r0, r1, #16
 8008326:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800832a:	b289      	uxth	r1, r1
 800832c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008330:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008334:	f846 1b04 	str.w	r1, [r6], #4
 8008338:	e7de      	b.n	80082f8 <__mdiff+0xd0>
 800833a:	3f01      	subs	r7, #1
 800833c:	e7e8      	b.n	8008310 <__mdiff+0xe8>
 800833e:	bf00      	nop
 8008340:	08009d04 	.word	0x08009d04
 8008344:	08009dab 	.word	0x08009dab

08008348 <__ulp>:
 8008348:	4b11      	ldr	r3, [pc, #68]	; (8008390 <__ulp+0x48>)
 800834a:	400b      	ands	r3, r1
 800834c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008350:	2b00      	cmp	r3, #0
 8008352:	dd02      	ble.n	800835a <__ulp+0x12>
 8008354:	2000      	movs	r0, #0
 8008356:	4619      	mov	r1, r3
 8008358:	4770      	bx	lr
 800835a:	425b      	negs	r3, r3
 800835c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008360:	f04f 0000 	mov.w	r0, #0
 8008364:	f04f 0100 	mov.w	r1, #0
 8008368:	ea4f 5223 	mov.w	r2, r3, asr #20
 800836c:	da04      	bge.n	8008378 <__ulp+0x30>
 800836e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008372:	fa43 f102 	asr.w	r1, r3, r2
 8008376:	4770      	bx	lr
 8008378:	f1a2 0314 	sub.w	r3, r2, #20
 800837c:	2b1e      	cmp	r3, #30
 800837e:	bfd6      	itet	le
 8008380:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008384:	2301      	movgt	r3, #1
 8008386:	fa22 f303 	lsrle.w	r3, r2, r3
 800838a:	4618      	mov	r0, r3
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	7ff00000 	.word	0x7ff00000

08008394 <__b2d>:
 8008394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008398:	6907      	ldr	r7, [r0, #16]
 800839a:	f100 0914 	add.w	r9, r0, #20
 800839e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80083a2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80083a6:	f1a7 0804 	sub.w	r8, r7, #4
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff fd52 	bl	8007e54 <__hi0bits>
 80083b0:	f1c0 0320 	rsb	r3, r0, #32
 80083b4:	280a      	cmp	r0, #10
 80083b6:	600b      	str	r3, [r1, #0]
 80083b8:	491f      	ldr	r1, [pc, #124]	; (8008438 <__b2d+0xa4>)
 80083ba:	dc17      	bgt.n	80083ec <__b2d+0x58>
 80083bc:	45c1      	cmp	r9, r8
 80083be:	bf28      	it	cs
 80083c0:	2200      	movcs	r2, #0
 80083c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80083c6:	fa26 f30c 	lsr.w	r3, r6, ip
 80083ca:	bf38      	it	cc
 80083cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80083d0:	ea43 0501 	orr.w	r5, r3, r1
 80083d4:	f100 0315 	add.w	r3, r0, #21
 80083d8:	fa06 f303 	lsl.w	r3, r6, r3
 80083dc:	fa22 f20c 	lsr.w	r2, r2, ip
 80083e0:	ea43 0402 	orr.w	r4, r3, r2
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ec:	45c1      	cmp	r9, r8
 80083ee:	bf2e      	itee	cs
 80083f0:	2200      	movcs	r2, #0
 80083f2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80083f6:	f1a7 0808 	subcc.w	r8, r7, #8
 80083fa:	f1b0 030b 	subs.w	r3, r0, #11
 80083fe:	d016      	beq.n	800842e <__b2d+0x9a>
 8008400:	f1c3 0720 	rsb	r7, r3, #32
 8008404:	fa22 f107 	lsr.w	r1, r2, r7
 8008408:	45c8      	cmp	r8, r9
 800840a:	fa06 f603 	lsl.w	r6, r6, r3
 800840e:	ea46 0601 	orr.w	r6, r6, r1
 8008412:	bf94      	ite	ls
 8008414:	2100      	movls	r1, #0
 8008416:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800841a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800841e:	fa02 f003 	lsl.w	r0, r2, r3
 8008422:	40f9      	lsrs	r1, r7
 8008424:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008428:	ea40 0401 	orr.w	r4, r0, r1
 800842c:	e7da      	b.n	80083e4 <__b2d+0x50>
 800842e:	4614      	mov	r4, r2
 8008430:	ea46 0501 	orr.w	r5, r6, r1
 8008434:	e7d6      	b.n	80083e4 <__b2d+0x50>
 8008436:	bf00      	nop
 8008438:	3ff00000 	.word	0x3ff00000

0800843c <__d2b>:
 800843c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008440:	2101      	movs	r1, #1
 8008442:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008446:	4690      	mov	r8, r2
 8008448:	461d      	mov	r5, r3
 800844a:	f7ff fc0d 	bl	8007c68 <_Balloc>
 800844e:	4604      	mov	r4, r0
 8008450:	b930      	cbnz	r0, 8008460 <__d2b+0x24>
 8008452:	4602      	mov	r2, r0
 8008454:	f240 310a 	movw	r1, #778	; 0x30a
 8008458:	4b24      	ldr	r3, [pc, #144]	; (80084ec <__d2b+0xb0>)
 800845a:	4825      	ldr	r0, [pc, #148]	; (80084f0 <__d2b+0xb4>)
 800845c:	f000 fcaa 	bl	8008db4 <__assert_func>
 8008460:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008464:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008468:	bb2d      	cbnz	r5, 80084b6 <__d2b+0x7a>
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	f1b8 0300 	subs.w	r3, r8, #0
 8008470:	d026      	beq.n	80084c0 <__d2b+0x84>
 8008472:	4668      	mov	r0, sp
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	f7ff fd0d 	bl	8007e94 <__lo0bits>
 800847a:	9900      	ldr	r1, [sp, #0]
 800847c:	b1f0      	cbz	r0, 80084bc <__d2b+0x80>
 800847e:	9a01      	ldr	r2, [sp, #4]
 8008480:	f1c0 0320 	rsb	r3, r0, #32
 8008484:	fa02 f303 	lsl.w	r3, r2, r3
 8008488:	430b      	orrs	r3, r1
 800848a:	40c2      	lsrs	r2, r0
 800848c:	6163      	str	r3, [r4, #20]
 800848e:	9201      	str	r2, [sp, #4]
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf14      	ite	ne
 8008496:	2102      	movne	r1, #2
 8008498:	2101      	moveq	r1, #1
 800849a:	61a3      	str	r3, [r4, #24]
 800849c:	6121      	str	r1, [r4, #16]
 800849e:	b1c5      	cbz	r5, 80084d2 <__d2b+0x96>
 80084a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084a4:	4405      	add	r5, r0
 80084a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084aa:	603d      	str	r5, [r7, #0]
 80084ac:	6030      	str	r0, [r6, #0]
 80084ae:	4620      	mov	r0, r4
 80084b0:	b002      	add	sp, #8
 80084b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084ba:	e7d6      	b.n	800846a <__d2b+0x2e>
 80084bc:	6161      	str	r1, [r4, #20]
 80084be:	e7e7      	b.n	8008490 <__d2b+0x54>
 80084c0:	a801      	add	r0, sp, #4
 80084c2:	f7ff fce7 	bl	8007e94 <__lo0bits>
 80084c6:	2101      	movs	r1, #1
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	6121      	str	r1, [r4, #16]
 80084cc:	6163      	str	r3, [r4, #20]
 80084ce:	3020      	adds	r0, #32
 80084d0:	e7e5      	b.n	800849e <__d2b+0x62>
 80084d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084da:	6038      	str	r0, [r7, #0]
 80084dc:	6918      	ldr	r0, [r3, #16]
 80084de:	f7ff fcb9 	bl	8007e54 <__hi0bits>
 80084e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80084e6:	6031      	str	r1, [r6, #0]
 80084e8:	e7e1      	b.n	80084ae <__d2b+0x72>
 80084ea:	bf00      	nop
 80084ec:	08009d04 	.word	0x08009d04
 80084f0:	08009dab 	.word	0x08009dab

080084f4 <__ratio>:
 80084f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	4688      	mov	r8, r1
 80084fa:	4669      	mov	r1, sp
 80084fc:	4681      	mov	r9, r0
 80084fe:	f7ff ff49 	bl	8008394 <__b2d>
 8008502:	460f      	mov	r7, r1
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	4640      	mov	r0, r8
 800850a:	a901      	add	r1, sp, #4
 800850c:	f7ff ff42 	bl	8008394 <__b2d>
 8008510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008514:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008518:	468b      	mov	fp, r1
 800851a:	eba3 0c02 	sub.w	ip, r3, r2
 800851e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfd5      	itete	le
 800852c:	460a      	movle	r2, r1
 800852e:	462a      	movgt	r2, r5
 8008530:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008534:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008538:	bfd8      	it	le
 800853a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800853e:	465b      	mov	r3, fp
 8008540:	4602      	mov	r2, r0
 8008542:	4639      	mov	r1, r7
 8008544:	4620      	mov	r0, r4
 8008546:	f7f8 f8f1 	bl	800072c <__aeabi_ddiv>
 800854a:	b003      	add	sp, #12
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008550 <__copybits>:
 8008550:	3901      	subs	r1, #1
 8008552:	b570      	push	{r4, r5, r6, lr}
 8008554:	1149      	asrs	r1, r1, #5
 8008556:	6914      	ldr	r4, [r2, #16]
 8008558:	3101      	adds	r1, #1
 800855a:	f102 0314 	add.w	r3, r2, #20
 800855e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008566:	1f05      	subs	r5, r0, #4
 8008568:	42a3      	cmp	r3, r4
 800856a:	d30c      	bcc.n	8008586 <__copybits+0x36>
 800856c:	1aa3      	subs	r3, r4, r2
 800856e:	3b11      	subs	r3, #17
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	3211      	adds	r2, #17
 8008576:	42a2      	cmp	r2, r4
 8008578:	bf88      	it	hi
 800857a:	2300      	movhi	r3, #0
 800857c:	4418      	add	r0, r3
 800857e:	2300      	movs	r3, #0
 8008580:	4288      	cmp	r0, r1
 8008582:	d305      	bcc.n	8008590 <__copybits+0x40>
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	f853 6b04 	ldr.w	r6, [r3], #4
 800858a:	f845 6f04 	str.w	r6, [r5, #4]!
 800858e:	e7eb      	b.n	8008568 <__copybits+0x18>
 8008590:	f840 3b04 	str.w	r3, [r0], #4
 8008594:	e7f4      	b.n	8008580 <__copybits+0x30>

08008596 <__any_on>:
 8008596:	f100 0214 	add.w	r2, r0, #20
 800859a:	6900      	ldr	r0, [r0, #16]
 800859c:	114b      	asrs	r3, r1, #5
 800859e:	4298      	cmp	r0, r3
 80085a0:	b510      	push	{r4, lr}
 80085a2:	db11      	blt.n	80085c8 <__any_on+0x32>
 80085a4:	dd0a      	ble.n	80085bc <__any_on+0x26>
 80085a6:	f011 011f 	ands.w	r1, r1, #31
 80085aa:	d007      	beq.n	80085bc <__any_on+0x26>
 80085ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80085b0:	fa24 f001 	lsr.w	r0, r4, r1
 80085b4:	fa00 f101 	lsl.w	r1, r0, r1
 80085b8:	428c      	cmp	r4, r1
 80085ba:	d10b      	bne.n	80085d4 <__any_on+0x3e>
 80085bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d803      	bhi.n	80085cc <__any_on+0x36>
 80085c4:	2000      	movs	r0, #0
 80085c6:	bd10      	pop	{r4, pc}
 80085c8:	4603      	mov	r3, r0
 80085ca:	e7f7      	b.n	80085bc <__any_on+0x26>
 80085cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d0:	2900      	cmp	r1, #0
 80085d2:	d0f5      	beq.n	80085c0 <__any_on+0x2a>
 80085d4:	2001      	movs	r0, #1
 80085d6:	e7f6      	b.n	80085c6 <__any_on+0x30>

080085d8 <_calloc_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	fb02 f501 	mul.w	r5, r2, r1
 80085de:	4629      	mov	r1, r5
 80085e0:	f000 f854 	bl	800868c <_malloc_r>
 80085e4:	4604      	mov	r4, r0
 80085e6:	b118      	cbz	r0, 80085f0 <_calloc_r+0x18>
 80085e8:	462a      	mov	r2, r5
 80085ea:	2100      	movs	r1, #0
 80085ec:	f7fd fb38 	bl	8005c60 <memset>
 80085f0:	4620      	mov	r0, r4
 80085f2:	bd38      	pop	{r3, r4, r5, pc}

080085f4 <_free_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4605      	mov	r5, r0
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d043      	beq.n	8008684 <_free_r+0x90>
 80085fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008600:	1f0c      	subs	r4, r1, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfb8      	it	lt
 8008606:	18e4      	addlt	r4, r4, r3
 8008608:	f000 fc56 	bl	8008eb8 <__malloc_lock>
 800860c:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <_free_r+0x94>)
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	4610      	mov	r0, r2
 8008612:	b933      	cbnz	r3, 8008622 <_free_r+0x2e>
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	6014      	str	r4, [r2, #0]
 8008618:	4628      	mov	r0, r5
 800861a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861e:	f000 bc51 	b.w	8008ec4 <__malloc_unlock>
 8008622:	42a3      	cmp	r3, r4
 8008624:	d90a      	bls.n	800863c <_free_r+0x48>
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1862      	adds	r2, r4, r1
 800862a:	4293      	cmp	r3, r2
 800862c:	bf01      	itttt	eq
 800862e:	681a      	ldreq	r2, [r3, #0]
 8008630:	685b      	ldreq	r3, [r3, #4]
 8008632:	1852      	addeq	r2, r2, r1
 8008634:	6022      	streq	r2, [r4, #0]
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	6004      	str	r4, [r0, #0]
 800863a:	e7ed      	b.n	8008618 <_free_r+0x24>
 800863c:	461a      	mov	r2, r3
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	b10b      	cbz	r3, 8008646 <_free_r+0x52>
 8008642:	42a3      	cmp	r3, r4
 8008644:	d9fa      	bls.n	800863c <_free_r+0x48>
 8008646:	6811      	ldr	r1, [r2, #0]
 8008648:	1850      	adds	r0, r2, r1
 800864a:	42a0      	cmp	r0, r4
 800864c:	d10b      	bne.n	8008666 <_free_r+0x72>
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	4401      	add	r1, r0
 8008652:	1850      	adds	r0, r2, r1
 8008654:	4283      	cmp	r3, r0
 8008656:	6011      	str	r1, [r2, #0]
 8008658:	d1de      	bne.n	8008618 <_free_r+0x24>
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4401      	add	r1, r0
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	6053      	str	r3, [r2, #4]
 8008664:	e7d8      	b.n	8008618 <_free_r+0x24>
 8008666:	d902      	bls.n	800866e <_free_r+0x7a>
 8008668:	230c      	movs	r3, #12
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	e7d4      	b.n	8008618 <_free_r+0x24>
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	1821      	adds	r1, r4, r0
 8008672:	428b      	cmp	r3, r1
 8008674:	bf01      	itttt	eq
 8008676:	6819      	ldreq	r1, [r3, #0]
 8008678:	685b      	ldreq	r3, [r3, #4]
 800867a:	1809      	addeq	r1, r1, r0
 800867c:	6021      	streq	r1, [r4, #0]
 800867e:	6063      	str	r3, [r4, #4]
 8008680:	6054      	str	r4, [r2, #4]
 8008682:	e7c9      	b.n	8008618 <_free_r+0x24>
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	bf00      	nop
 8008688:	200007cc 	.word	0x200007cc

0800868c <_malloc_r>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	1ccd      	adds	r5, r1, #3
 8008690:	f025 0503 	bic.w	r5, r5, #3
 8008694:	3508      	adds	r5, #8
 8008696:	2d0c      	cmp	r5, #12
 8008698:	bf38      	it	cc
 800869a:	250c      	movcc	r5, #12
 800869c:	2d00      	cmp	r5, #0
 800869e:	4606      	mov	r6, r0
 80086a0:	db01      	blt.n	80086a6 <_malloc_r+0x1a>
 80086a2:	42a9      	cmp	r1, r5
 80086a4:	d903      	bls.n	80086ae <_malloc_r+0x22>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	2000      	movs	r0, #0
 80086ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ae:	f000 fc03 	bl	8008eb8 <__malloc_lock>
 80086b2:	4921      	ldr	r1, [pc, #132]	; (8008738 <_malloc_r+0xac>)
 80086b4:	680a      	ldr	r2, [r1, #0]
 80086b6:	4614      	mov	r4, r2
 80086b8:	b99c      	cbnz	r4, 80086e2 <_malloc_r+0x56>
 80086ba:	4f20      	ldr	r7, [pc, #128]	; (800873c <_malloc_r+0xb0>)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	b923      	cbnz	r3, 80086ca <_malloc_r+0x3e>
 80086c0:	4621      	mov	r1, r4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 fb46 	bl	8008d54 <_sbrk_r>
 80086c8:	6038      	str	r0, [r7, #0]
 80086ca:	4629      	mov	r1, r5
 80086cc:	4630      	mov	r0, r6
 80086ce:	f000 fb41 	bl	8008d54 <_sbrk_r>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	d123      	bne.n	800871e <_malloc_r+0x92>
 80086d6:	230c      	movs	r3, #12
 80086d8:	4630      	mov	r0, r6
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f000 fbf2 	bl	8008ec4 <__malloc_unlock>
 80086e0:	e7e3      	b.n	80086aa <_malloc_r+0x1e>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	1b5b      	subs	r3, r3, r5
 80086e6:	d417      	bmi.n	8008718 <_malloc_r+0x8c>
 80086e8:	2b0b      	cmp	r3, #11
 80086ea:	d903      	bls.n	80086f4 <_malloc_r+0x68>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	441c      	add	r4, r3
 80086f0:	6025      	str	r5, [r4, #0]
 80086f2:	e004      	b.n	80086fe <_malloc_r+0x72>
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	42a2      	cmp	r2, r4
 80086f8:	bf0c      	ite	eq
 80086fa:	600b      	streq	r3, [r1, #0]
 80086fc:	6053      	strne	r3, [r2, #4]
 80086fe:	4630      	mov	r0, r6
 8008700:	f000 fbe0 	bl	8008ec4 <__malloc_unlock>
 8008704:	f104 000b 	add.w	r0, r4, #11
 8008708:	1d23      	adds	r3, r4, #4
 800870a:	f020 0007 	bic.w	r0, r0, #7
 800870e:	1ac2      	subs	r2, r0, r3
 8008710:	d0cc      	beq.n	80086ac <_malloc_r+0x20>
 8008712:	1a1b      	subs	r3, r3, r0
 8008714:	50a3      	str	r3, [r4, r2]
 8008716:	e7c9      	b.n	80086ac <_malloc_r+0x20>
 8008718:	4622      	mov	r2, r4
 800871a:	6864      	ldr	r4, [r4, #4]
 800871c:	e7cc      	b.n	80086b8 <_malloc_r+0x2c>
 800871e:	1cc4      	adds	r4, r0, #3
 8008720:	f024 0403 	bic.w	r4, r4, #3
 8008724:	42a0      	cmp	r0, r4
 8008726:	d0e3      	beq.n	80086f0 <_malloc_r+0x64>
 8008728:	1a21      	subs	r1, r4, r0
 800872a:	4630      	mov	r0, r6
 800872c:	f000 fb12 	bl	8008d54 <_sbrk_r>
 8008730:	3001      	adds	r0, #1
 8008732:	d1dd      	bne.n	80086f0 <_malloc_r+0x64>
 8008734:	e7cf      	b.n	80086d6 <_malloc_r+0x4a>
 8008736:	bf00      	nop
 8008738:	200007cc 	.word	0x200007cc
 800873c:	200007d0 	.word	0x200007d0

08008740 <__ssputs_r>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	688e      	ldr	r6, [r1, #8]
 8008746:	4682      	mov	sl, r0
 8008748:	429e      	cmp	r6, r3
 800874a:	460c      	mov	r4, r1
 800874c:	4690      	mov	r8, r2
 800874e:	461f      	mov	r7, r3
 8008750:	d838      	bhi.n	80087c4 <__ssputs_r+0x84>
 8008752:	898a      	ldrh	r2, [r1, #12]
 8008754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008758:	d032      	beq.n	80087c0 <__ssputs_r+0x80>
 800875a:	6825      	ldr	r5, [r4, #0]
 800875c:	6909      	ldr	r1, [r1, #16]
 800875e:	3301      	adds	r3, #1
 8008760:	eba5 0901 	sub.w	r9, r5, r1
 8008764:	6965      	ldr	r5, [r4, #20]
 8008766:	444b      	add	r3, r9
 8008768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	106d      	asrs	r5, r5, #1
 8008772:	429d      	cmp	r5, r3
 8008774:	bf38      	it	cc
 8008776:	461d      	movcc	r5, r3
 8008778:	0553      	lsls	r3, r2, #21
 800877a:	d531      	bpl.n	80087e0 <__ssputs_r+0xa0>
 800877c:	4629      	mov	r1, r5
 800877e:	f7ff ff85 	bl	800868c <_malloc_r>
 8008782:	4606      	mov	r6, r0
 8008784:	b950      	cbnz	r0, 800879c <__ssputs_r+0x5c>
 8008786:	230c      	movs	r3, #12
 8008788:	f04f 30ff 	mov.w	r0, #4294967295
 800878c:	f8ca 3000 	str.w	r3, [sl]
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	464a      	mov	r2, r9
 800879e:	6921      	ldr	r1, [r4, #16]
 80087a0:	f7ff fa54 	bl	8007c4c <memcpy>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	6126      	str	r6, [r4, #16]
 80087b2:	444e      	add	r6, r9
 80087b4:	6026      	str	r6, [r4, #0]
 80087b6:	463e      	mov	r6, r7
 80087b8:	6165      	str	r5, [r4, #20]
 80087ba:	eba5 0509 	sub.w	r5, r5, r9
 80087be:	60a5      	str	r5, [r4, #8]
 80087c0:	42be      	cmp	r6, r7
 80087c2:	d900      	bls.n	80087c6 <__ssputs_r+0x86>
 80087c4:	463e      	mov	r6, r7
 80087c6:	4632      	mov	r2, r6
 80087c8:	4641      	mov	r1, r8
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	f000 fb5a 	bl	8008e84 <memmove>
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	1b9b      	subs	r3, r3, r6
 80087d6:	4432      	add	r2, r6
 80087d8:	2000      	movs	r0, #0
 80087da:	60a3      	str	r3, [r4, #8]
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	e7db      	b.n	8008798 <__ssputs_r+0x58>
 80087e0:	462a      	mov	r2, r5
 80087e2:	f000 fb75 	bl	8008ed0 <_realloc_r>
 80087e6:	4606      	mov	r6, r0
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d1e1      	bne.n	80087b0 <__ssputs_r+0x70>
 80087ec:	4650      	mov	r0, sl
 80087ee:	6921      	ldr	r1, [r4, #16]
 80087f0:	f7ff ff00 	bl	80085f4 <_free_r>
 80087f4:	e7c7      	b.n	8008786 <__ssputs_r+0x46>
	...

080087f8 <_svfiprintf_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4698      	mov	r8, r3
 80087fe:	898b      	ldrh	r3, [r1, #12]
 8008800:	4607      	mov	r7, r0
 8008802:	061b      	lsls	r3, r3, #24
 8008804:	460d      	mov	r5, r1
 8008806:	4614      	mov	r4, r2
 8008808:	b09d      	sub	sp, #116	; 0x74
 800880a:	d50e      	bpl.n	800882a <_svfiprintf_r+0x32>
 800880c:	690b      	ldr	r3, [r1, #16]
 800880e:	b963      	cbnz	r3, 800882a <_svfiprintf_r+0x32>
 8008810:	2140      	movs	r1, #64	; 0x40
 8008812:	f7ff ff3b 	bl	800868c <_malloc_r>
 8008816:	6028      	str	r0, [r5, #0]
 8008818:	6128      	str	r0, [r5, #16]
 800881a:	b920      	cbnz	r0, 8008826 <_svfiprintf_r+0x2e>
 800881c:	230c      	movs	r3, #12
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	e0d1      	b.n	80089ca <_svfiprintf_r+0x1d2>
 8008826:	2340      	movs	r3, #64	; 0x40
 8008828:	616b      	str	r3, [r5, #20]
 800882a:	2300      	movs	r3, #0
 800882c:	9309      	str	r3, [sp, #36]	; 0x24
 800882e:	2320      	movs	r3, #32
 8008830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008834:	2330      	movs	r3, #48	; 0x30
 8008836:	f04f 0901 	mov.w	r9, #1
 800883a:	f8cd 800c 	str.w	r8, [sp, #12]
 800883e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089e4 <_svfiprintf_r+0x1ec>
 8008842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008846:	4623      	mov	r3, r4
 8008848:	469a      	mov	sl, r3
 800884a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884e:	b10a      	cbz	r2, 8008854 <_svfiprintf_r+0x5c>
 8008850:	2a25      	cmp	r2, #37	; 0x25
 8008852:	d1f9      	bne.n	8008848 <_svfiprintf_r+0x50>
 8008854:	ebba 0b04 	subs.w	fp, sl, r4
 8008858:	d00b      	beq.n	8008872 <_svfiprintf_r+0x7a>
 800885a:	465b      	mov	r3, fp
 800885c:	4622      	mov	r2, r4
 800885e:	4629      	mov	r1, r5
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ff6d 	bl	8008740 <__ssputs_r>
 8008866:	3001      	adds	r0, #1
 8008868:	f000 80aa 	beq.w	80089c0 <_svfiprintf_r+0x1c8>
 800886c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800886e:	445a      	add	r2, fp
 8008870:	9209      	str	r2, [sp, #36]	; 0x24
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80a2 	beq.w	80089c0 <_svfiprintf_r+0x1c8>
 800887c:	2300      	movs	r3, #0
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008886:	f10a 0a01 	add.w	sl, sl, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008892:	931a      	str	r3, [sp, #104]	; 0x68
 8008894:	4654      	mov	r4, sl
 8008896:	2205      	movs	r2, #5
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	4851      	ldr	r0, [pc, #324]	; (80089e4 <_svfiprintf_r+0x1ec>)
 800889e:	f000 fae3 	bl	8008e68 <memchr>
 80088a2:	9a04      	ldr	r2, [sp, #16]
 80088a4:	b9d8      	cbnz	r0, 80088de <_svfiprintf_r+0xe6>
 80088a6:	06d0      	lsls	r0, r2, #27
 80088a8:	bf44      	itt	mi
 80088aa:	2320      	movmi	r3, #32
 80088ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b0:	0711      	lsls	r1, r2, #28
 80088b2:	bf44      	itt	mi
 80088b4:	232b      	movmi	r3, #43	; 0x2b
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ba:	f89a 3000 	ldrb.w	r3, [sl]
 80088be:	2b2a      	cmp	r3, #42	; 0x2a
 80088c0:	d015      	beq.n	80088ee <_svfiprintf_r+0xf6>
 80088c2:	4654      	mov	r4, sl
 80088c4:	2000      	movs	r0, #0
 80088c6:	f04f 0c0a 	mov.w	ip, #10
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	4621      	mov	r1, r4
 80088ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d2:	3b30      	subs	r3, #48	; 0x30
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d94e      	bls.n	8008976 <_svfiprintf_r+0x17e>
 80088d8:	b1b0      	cbz	r0, 8008908 <_svfiprintf_r+0x110>
 80088da:	9207      	str	r2, [sp, #28]
 80088dc:	e014      	b.n	8008908 <_svfiprintf_r+0x110>
 80088de:	eba0 0308 	sub.w	r3, r0, r8
 80088e2:	fa09 f303 	lsl.w	r3, r9, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	46a2      	mov	sl, r4
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	e7d2      	b.n	8008894 <_svfiprintf_r+0x9c>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	1d19      	adds	r1, r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	9103      	str	r1, [sp, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbb      	ittet	lt
 80088fa:	425b      	neglt	r3, r3
 80088fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008900:	9307      	strge	r3, [sp, #28]
 8008902:	9307      	strlt	r3, [sp, #28]
 8008904:	bfb8      	it	lt
 8008906:	9204      	strlt	r2, [sp, #16]
 8008908:	7823      	ldrb	r3, [r4, #0]
 800890a:	2b2e      	cmp	r3, #46	; 0x2e
 800890c:	d10c      	bne.n	8008928 <_svfiprintf_r+0x130>
 800890e:	7863      	ldrb	r3, [r4, #1]
 8008910:	2b2a      	cmp	r3, #42	; 0x2a
 8008912:	d135      	bne.n	8008980 <_svfiprintf_r+0x188>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	3402      	adds	r4, #2
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	9203      	str	r2, [sp, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb8      	it	lt
 8008922:	f04f 33ff 	movlt.w	r3, #4294967295
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089f4 <_svfiprintf_r+0x1fc>
 800892c:	2203      	movs	r2, #3
 800892e:	4650      	mov	r0, sl
 8008930:	7821      	ldrb	r1, [r4, #0]
 8008932:	f000 fa99 	bl	8008e68 <memchr>
 8008936:	b140      	cbz	r0, 800894a <_svfiprintf_r+0x152>
 8008938:	2340      	movs	r3, #64	; 0x40
 800893a:	eba0 000a 	sub.w	r0, r0, sl
 800893e:	fa03 f000 	lsl.w	r0, r3, r0
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	3401      	adds	r4, #1
 8008946:	4303      	orrs	r3, r0
 8008948:	9304      	str	r3, [sp, #16]
 800894a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894e:	2206      	movs	r2, #6
 8008950:	4825      	ldr	r0, [pc, #148]	; (80089e8 <_svfiprintf_r+0x1f0>)
 8008952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008956:	f000 fa87 	bl	8008e68 <memchr>
 800895a:	2800      	cmp	r0, #0
 800895c:	d038      	beq.n	80089d0 <_svfiprintf_r+0x1d8>
 800895e:	4b23      	ldr	r3, [pc, #140]	; (80089ec <_svfiprintf_r+0x1f4>)
 8008960:	bb1b      	cbnz	r3, 80089aa <_svfiprintf_r+0x1b2>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	3307      	adds	r3, #7
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	3308      	adds	r3, #8
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	4433      	add	r3, r6
 8008972:	9309      	str	r3, [sp, #36]	; 0x24
 8008974:	e767      	b.n	8008846 <_svfiprintf_r+0x4e>
 8008976:	460c      	mov	r4, r1
 8008978:	2001      	movs	r0, #1
 800897a:	fb0c 3202 	mla	r2, ip, r2, r3
 800897e:	e7a5      	b.n	80088cc <_svfiprintf_r+0xd4>
 8008980:	2300      	movs	r3, #0
 8008982:	f04f 0c0a 	mov.w	ip, #10
 8008986:	4619      	mov	r1, r3
 8008988:	3401      	adds	r4, #1
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	4620      	mov	r0, r4
 800898e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008992:	3a30      	subs	r2, #48	; 0x30
 8008994:	2a09      	cmp	r2, #9
 8008996:	d903      	bls.n	80089a0 <_svfiprintf_r+0x1a8>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0c5      	beq.n	8008928 <_svfiprintf_r+0x130>
 800899c:	9105      	str	r1, [sp, #20]
 800899e:	e7c3      	b.n	8008928 <_svfiprintf_r+0x130>
 80089a0:	4604      	mov	r4, r0
 80089a2:	2301      	movs	r3, #1
 80089a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a8:	e7f0      	b.n	800898c <_svfiprintf_r+0x194>
 80089aa:	ab03      	add	r3, sp, #12
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	462a      	mov	r2, r5
 80089b0:	4638      	mov	r0, r7
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <_svfiprintf_r+0x1f8>)
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	f3af 8000 	nop.w
 80089ba:	1c42      	adds	r2, r0, #1
 80089bc:	4606      	mov	r6, r0
 80089be:	d1d6      	bne.n	800896e <_svfiprintf_r+0x176>
 80089c0:	89ab      	ldrh	r3, [r5, #12]
 80089c2:	065b      	lsls	r3, r3, #25
 80089c4:	f53f af2c 	bmi.w	8008820 <_svfiprintf_r+0x28>
 80089c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ca:	b01d      	add	sp, #116	; 0x74
 80089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	ab03      	add	r3, sp, #12
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4638      	mov	r0, r7
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <_svfiprintf_r+0x1f8>)
 80089da:	a904      	add	r1, sp, #16
 80089dc:	f000 f87c 	bl	8008ad8 <_printf_i>
 80089e0:	e7eb      	b.n	80089ba <_svfiprintf_r+0x1c2>
 80089e2:	bf00      	nop
 80089e4:	08009f0c 	.word	0x08009f0c
 80089e8:	08009f16 	.word	0x08009f16
 80089ec:	00000000 	.word	0x00000000
 80089f0:	08008741 	.word	0x08008741
 80089f4:	08009f12 	.word	0x08009f12

080089f8 <_printf_common>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	4616      	mov	r6, r2
 80089fe:	4699      	mov	r9, r3
 8008a00:	688a      	ldr	r2, [r1, #8]
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	4607      	mov	r7, r0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bfb8      	it	lt
 8008a0a:	4613      	movlt	r3, r2
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a12:	460c      	mov	r4, r1
 8008a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a18:	b10a      	cbz	r2, 8008a1e <_printf_common+0x26>
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	0699      	lsls	r1, r3, #26
 8008a22:	bf42      	ittt	mi
 8008a24:	6833      	ldrmi	r3, [r6, #0]
 8008a26:	3302      	addmi	r3, #2
 8008a28:	6033      	strmi	r3, [r6, #0]
 8008a2a:	6825      	ldr	r5, [r4, #0]
 8008a2c:	f015 0506 	ands.w	r5, r5, #6
 8008a30:	d106      	bne.n	8008a40 <_printf_common+0x48>
 8008a32:	f104 0a19 	add.w	sl, r4, #25
 8008a36:	68e3      	ldr	r3, [r4, #12]
 8008a38:	6832      	ldr	r2, [r6, #0]
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	dc28      	bgt.n	8008a92 <_printf_common+0x9a>
 8008a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a44:	1e13      	subs	r3, r2, #0
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	bf18      	it	ne
 8008a4a:	2301      	movne	r3, #1
 8008a4c:	0692      	lsls	r2, r2, #26
 8008a4e:	d42d      	bmi.n	8008aac <_printf_common+0xb4>
 8008a50:	4649      	mov	r1, r9
 8008a52:	4638      	mov	r0, r7
 8008a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a58:	47c0      	blx	r8
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d020      	beq.n	8008aa0 <_printf_common+0xa8>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	68e5      	ldr	r5, [r4, #12]
 8008a62:	f003 0306 	and.w	r3, r3, #6
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	bf18      	it	ne
 8008a6a:	2500      	movne	r5, #0
 8008a6c:	6832      	ldr	r2, [r6, #0]
 8008a6e:	f04f 0600 	mov.w	r6, #0
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	bf08      	it	eq
 8008a76:	1aad      	subeq	r5, r5, r2
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	bf08      	it	eq
 8008a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a80:	4293      	cmp	r3, r2
 8008a82:	bfc4      	itt	gt
 8008a84:	1a9b      	subgt	r3, r3, r2
 8008a86:	18ed      	addgt	r5, r5, r3
 8008a88:	341a      	adds	r4, #26
 8008a8a:	42b5      	cmp	r5, r6
 8008a8c:	d11a      	bne.n	8008ac4 <_printf_common+0xcc>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e008      	b.n	8008aa4 <_printf_common+0xac>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4652      	mov	r2, sl
 8008a96:	4649      	mov	r1, r9
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c0      	blx	r8
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d103      	bne.n	8008aa8 <_printf_common+0xb0>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	e7c4      	b.n	8008a36 <_printf_common+0x3e>
 8008aac:	2030      	movs	r0, #48	; 0x30
 8008aae:	18e1      	adds	r1, r4, r3
 8008ab0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aba:	4422      	add	r2, r4
 8008abc:	3302      	adds	r3, #2
 8008abe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ac2:	e7c5      	b.n	8008a50 <_printf_common+0x58>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c0      	blx	r8
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d0e6      	beq.n	8008aa0 <_printf_common+0xa8>
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7d9      	b.n	8008a8a <_printf_common+0x92>
	...

08008ad8 <_printf_i>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	460c      	mov	r4, r1
 8008ade:	7e27      	ldrb	r7, [r4, #24]
 8008ae0:	4691      	mov	r9, r2
 8008ae2:	2f78      	cmp	r7, #120	; 0x78
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aee:	d807      	bhi.n	8008b00 <_printf_i+0x28>
 8008af0:	2f62      	cmp	r7, #98	; 0x62
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x32>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	f000 80d9 	beq.w	8008cac <_printf_i+0x1d4>
 8008afa:	2f58      	cmp	r7, #88	; 0x58
 8008afc:	f000 80a4 	beq.w	8008c48 <_printf_i+0x170>
 8008b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b08:	e03a      	b.n	8008b80 <_printf_i+0xa8>
 8008b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b0e:	2b15      	cmp	r3, #21
 8008b10:	d8f6      	bhi.n	8008b00 <_printf_i+0x28>
 8008b12:	a001      	add	r0, pc, #4	; (adr r0, 8008b18 <_printf_i+0x40>)
 8008b14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b01 	.word	0x08008b01
 8008b24:	08008b01 	.word	0x08008b01
 8008b28:	08008b01 	.word	0x08008b01
 8008b2c:	08008b01 	.word	0x08008b01
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b01 	.word	0x08008b01
 8008b38:	08008b01 	.word	0x08008b01
 8008b3c:	08008b01 	.word	0x08008b01
 8008b40:	08008b01 	.word	0x08008b01
 8008b44:	08008c93 	.word	0x08008c93
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008c75 	.word	0x08008c75
 8008b50:	08008b01 	.word	0x08008b01
 8008b54:	08008b01 	.word	0x08008b01
 8008b58:	08008cb5 	.word	0x08008cb5
 8008b5c:	08008b01 	.word	0x08008b01
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008b01 	.word	0x08008b01
 8008b68:	08008b01 	.word	0x08008b01
 8008b6c:	08008c7d 	.word	0x08008c7d
 8008b70:	680b      	ldr	r3, [r1, #0]
 8008b72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	600a      	str	r2, [r1, #0]
 8008b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0a4      	b.n	8008cce <_printf_i+0x1f6>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	6808      	ldr	r0, [r1, #0]
 8008b88:	062e      	lsls	r6, r5, #24
 8008b8a:	f100 0304 	add.w	r3, r0, #4
 8008b8e:	d50a      	bpl.n	8008ba6 <_printf_i+0xce>
 8008b90:	6805      	ldr	r5, [r0, #0]
 8008b92:	600b      	str	r3, [r1, #0]
 8008b94:	2d00      	cmp	r5, #0
 8008b96:	da03      	bge.n	8008ba0 <_printf_i+0xc8>
 8008b98:	232d      	movs	r3, #45	; 0x2d
 8008b9a:	426d      	negs	r5, r5
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba0:	230a      	movs	r3, #10
 8008ba2:	485e      	ldr	r0, [pc, #376]	; (8008d1c <_printf_i+0x244>)
 8008ba4:	e019      	b.n	8008bda <_printf_i+0x102>
 8008ba6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008baa:	6805      	ldr	r5, [r0, #0]
 8008bac:	600b      	str	r3, [r1, #0]
 8008bae:	bf18      	it	ne
 8008bb0:	b22d      	sxthne	r5, r5
 8008bb2:	e7ef      	b.n	8008b94 <_printf_i+0xbc>
 8008bb4:	680b      	ldr	r3, [r1, #0]
 8008bb6:	6825      	ldr	r5, [r4, #0]
 8008bb8:	1d18      	adds	r0, r3, #4
 8008bba:	6008      	str	r0, [r1, #0]
 8008bbc:	0628      	lsls	r0, r5, #24
 8008bbe:	d501      	bpl.n	8008bc4 <_printf_i+0xec>
 8008bc0:	681d      	ldr	r5, [r3, #0]
 8008bc2:	e002      	b.n	8008bca <_printf_i+0xf2>
 8008bc4:	0669      	lsls	r1, r5, #25
 8008bc6:	d5fb      	bpl.n	8008bc0 <_printf_i+0xe8>
 8008bc8:	881d      	ldrh	r5, [r3, #0]
 8008bca:	2f6f      	cmp	r7, #111	; 0x6f
 8008bcc:	bf0c      	ite	eq
 8008bce:	2308      	moveq	r3, #8
 8008bd0:	230a      	movne	r3, #10
 8008bd2:	4852      	ldr	r0, [pc, #328]	; (8008d1c <_printf_i+0x244>)
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bda:	6866      	ldr	r6, [r4, #4]
 8008bdc:	2e00      	cmp	r6, #0
 8008bde:	bfa8      	it	ge
 8008be0:	6821      	ldrge	r1, [r4, #0]
 8008be2:	60a6      	str	r6, [r4, #8]
 8008be4:	bfa4      	itt	ge
 8008be6:	f021 0104 	bicge.w	r1, r1, #4
 8008bea:	6021      	strge	r1, [r4, #0]
 8008bec:	b90d      	cbnz	r5, 8008bf2 <_printf_i+0x11a>
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	d04d      	beq.n	8008c8e <_printf_i+0x1b6>
 8008bf2:	4616      	mov	r6, r2
 8008bf4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf8:	fb03 5711 	mls	r7, r3, r1, r5
 8008bfc:	5dc7      	ldrb	r7, [r0, r7]
 8008bfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c02:	462f      	mov	r7, r5
 8008c04:	42bb      	cmp	r3, r7
 8008c06:	460d      	mov	r5, r1
 8008c08:	d9f4      	bls.n	8008bf4 <_printf_i+0x11c>
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d10b      	bne.n	8008c26 <_printf_i+0x14e>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	07df      	lsls	r7, r3, #31
 8008c12:	d508      	bpl.n	8008c26 <_printf_i+0x14e>
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	6861      	ldr	r1, [r4, #4]
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	bfde      	ittt	le
 8008c1c:	2330      	movle	r3, #48	; 0x30
 8008c1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c26:	1b92      	subs	r2, r2, r6
 8008c28:	6122      	str	r2, [r4, #16]
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f8cd a000 	str.w	sl, [sp]
 8008c34:	aa03      	add	r2, sp, #12
 8008c36:	f7ff fedf 	bl	80089f8 <_printf_common>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d14c      	bne.n	8008cd8 <_printf_i+0x200>
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c42:	b004      	add	sp, #16
 8008c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c48:	4834      	ldr	r0, [pc, #208]	; (8008d1c <_printf_i+0x244>)
 8008c4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c4e:	680e      	ldr	r6, [r1, #0]
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c56:	061f      	lsls	r7, r3, #24
 8008c58:	600e      	str	r6, [r1, #0]
 8008c5a:	d514      	bpl.n	8008c86 <_printf_i+0x1ae>
 8008c5c:	07d9      	lsls	r1, r3, #31
 8008c5e:	bf44      	itt	mi
 8008c60:	f043 0320 	orrmi.w	r3, r3, #32
 8008c64:	6023      	strmi	r3, [r4, #0]
 8008c66:	b91d      	cbnz	r5, 8008c70 <_printf_i+0x198>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	f023 0320 	bic.w	r3, r3, #32
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	2310      	movs	r3, #16
 8008c72:	e7af      	b.n	8008bd4 <_printf_i+0xfc>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	f043 0320 	orr.w	r3, r3, #32
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	2378      	movs	r3, #120	; 0x78
 8008c7e:	4828      	ldr	r0, [pc, #160]	; (8008d20 <_printf_i+0x248>)
 8008c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c84:	e7e3      	b.n	8008c4e <_printf_i+0x176>
 8008c86:	065e      	lsls	r6, r3, #25
 8008c88:	bf48      	it	mi
 8008c8a:	b2ad      	uxthmi	r5, r5
 8008c8c:	e7e6      	b.n	8008c5c <_printf_i+0x184>
 8008c8e:	4616      	mov	r6, r2
 8008c90:	e7bb      	b.n	8008c0a <_printf_i+0x132>
 8008c92:	680b      	ldr	r3, [r1, #0]
 8008c94:	6826      	ldr	r6, [r4, #0]
 8008c96:	1d1d      	adds	r5, r3, #4
 8008c98:	6960      	ldr	r0, [r4, #20]
 8008c9a:	600d      	str	r5, [r1, #0]
 8008c9c:	0635      	lsls	r5, r6, #24
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_i+0x1ce>
 8008ca2:	6018      	str	r0, [r3, #0]
 8008ca4:	e002      	b.n	8008cac <_printf_i+0x1d4>
 8008ca6:	0671      	lsls	r1, r6, #25
 8008ca8:	d5fb      	bpl.n	8008ca2 <_printf_i+0x1ca>
 8008caa:	8018      	strh	r0, [r3, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	4616      	mov	r6, r2
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	e7ba      	b.n	8008c2a <_printf_i+0x152>
 8008cb4:	680b      	ldr	r3, [r1, #0]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	600a      	str	r2, [r1, #0]
 8008cba:	681e      	ldr	r6, [r3, #0]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	6862      	ldr	r2, [r4, #4]
 8008cc2:	f000 f8d1 	bl	8008e68 <memchr>
 8008cc6:	b108      	cbz	r0, 8008ccc <_printf_i+0x1f4>
 8008cc8:	1b80      	subs	r0, r0, r6
 8008cca:	6060      	str	r0, [r4, #4]
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd6:	e7a8      	b.n	8008c2a <_printf_i+0x152>
 8008cd8:	4632      	mov	r2, r6
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	47d0      	blx	sl
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d0ab      	beq.n	8008c3e <_printf_i+0x166>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	079b      	lsls	r3, r3, #30
 8008cea:	d413      	bmi.n	8008d14 <_printf_i+0x23c>
 8008cec:	68e0      	ldr	r0, [r4, #12]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	bfb8      	it	lt
 8008cf4:	4618      	movlt	r0, r3
 8008cf6:	e7a4      	b.n	8008c42 <_printf_i+0x16a>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4632      	mov	r2, r6
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4640      	mov	r0, r8
 8008d00:	47d0      	blx	sl
 8008d02:	3001      	adds	r0, #1
 8008d04:	d09b      	beq.n	8008c3e <_printf_i+0x166>
 8008d06:	3501      	adds	r5, #1
 8008d08:	68e3      	ldr	r3, [r4, #12]
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	1a5b      	subs	r3, r3, r1
 8008d0e:	42ab      	cmp	r3, r5
 8008d10:	dcf2      	bgt.n	8008cf8 <_printf_i+0x220>
 8008d12:	e7eb      	b.n	8008cec <_printf_i+0x214>
 8008d14:	2500      	movs	r5, #0
 8008d16:	f104 0619 	add.w	r6, r4, #25
 8008d1a:	e7f5      	b.n	8008d08 <_printf_i+0x230>
 8008d1c:	08009f1d 	.word	0x08009f1d
 8008d20:	08009f2e 	.word	0x08009f2e

08008d24 <_read_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4d05      	ldr	r5, [pc, #20]	; (8008d44 <_read_r+0x20>)
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7f8 fcfc 	bl	8001730 <_read>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_read_r+0x1e>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_read_r+0x1e>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000a2c 	.word	0x20000a2c

08008d48 <nan>:
 8008d48:	2000      	movs	r0, #0
 8008d4a:	4901      	ldr	r1, [pc, #4]	; (8008d50 <nan+0x8>)
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	7ff80000 	.word	0x7ff80000

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	2300      	movs	r3, #0
 8008d58:	4d05      	ldr	r5, [pc, #20]	; (8008d70 <_sbrk_r+0x1c>)
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f7f8 fd50 	bl	8001804 <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	20000a2c 	.word	0x20000a2c

08008d74 <strncmp>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	b16a      	cbz	r2, 8008d94 <strncmp+0x20>
 8008d78:	3901      	subs	r1, #1
 8008d7a:	1884      	adds	r4, r0, r2
 8008d7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d103      	bne.n	8008d90 <strncmp+0x1c>
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d001      	beq.n	8008d90 <strncmp+0x1c>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f5      	bne.n	8008d7c <strncmp+0x8>
 8008d90:	1a98      	subs	r0, r3, r2
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	4610      	mov	r0, r2
 8008d96:	e7fc      	b.n	8008d92 <strncmp+0x1e>

08008d98 <__ascii_wctomb>:
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	b141      	cbz	r1, 8008db0 <__ascii_wctomb+0x18>
 8008d9e:	2aff      	cmp	r2, #255	; 0xff
 8008da0:	d904      	bls.n	8008dac <__ascii_wctomb+0x14>
 8008da2:	228a      	movs	r2, #138	; 0x8a
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	4770      	bx	lr
 8008dac:	2001      	movs	r0, #1
 8008dae:	700a      	strb	r2, [r1, #0]
 8008db0:	4770      	bx	lr
	...

08008db4 <__assert_func>:
 8008db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db6:	4614      	mov	r4, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <__assert_func+0x2c>)
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68d8      	ldr	r0, [r3, #12]
 8008dc2:	b14c      	cbz	r4, 8008dd8 <__assert_func+0x24>
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <__assert_func+0x30>)
 8008dc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dca:	9100      	str	r1, [sp, #0]
 8008dcc:	462b      	mov	r3, r5
 8008dce:	4906      	ldr	r1, [pc, #24]	; (8008de8 <__assert_func+0x34>)
 8008dd0:	f000 f80e 	bl	8008df0 <fiprintf>
 8008dd4:	f7fc ff13 	bl	8005bfe <abort>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__assert_func+0x38>)
 8008dda:	461c      	mov	r4, r3
 8008ddc:	e7f3      	b.n	8008dc6 <__assert_func+0x12>
 8008dde:	bf00      	nop
 8008de0:	20000020 	.word	0x20000020
 8008de4:	08009f3f 	.word	0x08009f3f
 8008de8:	08009f4c 	.word	0x08009f4c
 8008dec:	08009f7a 	.word	0x08009f7a

08008df0 <fiprintf>:
 8008df0:	b40e      	push	{r1, r2, r3}
 8008df2:	b503      	push	{r0, r1, lr}
 8008df4:	4601      	mov	r1, r0
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	4805      	ldr	r0, [pc, #20]	; (8008e10 <fiprintf+0x20>)
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f000 f8b3 	bl	8008f6c <_vfiprintf_r>
 8008e06:	b002      	add	sp, #8
 8008e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	4770      	bx	lr
 8008e10:	20000020 	.word	0x20000020

08008e14 <_fstat_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	2300      	movs	r3, #0
 8008e18:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_fstat_r+0x20>)
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	f7f8 fcc9 	bl	80017b8 <_fstat>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d102      	bne.n	8008e30 <_fstat_r+0x1c>
 8008e2a:	682b      	ldr	r3, [r5, #0]
 8008e2c:	b103      	cbz	r3, 8008e30 <_fstat_r+0x1c>
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	bd38      	pop	{r3, r4, r5, pc}
 8008e32:	bf00      	nop
 8008e34:	20000a2c 	.word	0x20000a2c

08008e38 <_isatty_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4d05      	ldr	r5, [pc, #20]	; (8008e54 <_isatty_r+0x1c>)
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f8 fcc7 	bl	80017d6 <_isatty>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_isatty_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_isatty_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	20000a2c 	.word	0x20000a2c

08008e58 <malloc>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <malloc+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f7ff bc15 	b.w	800868c <_malloc_r>
 8008e62:	bf00      	nop
 8008e64:	20000020 	.word	0x20000020

08008e68 <memchr>:
 8008e68:	4603      	mov	r3, r0
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	b2c9      	uxtb	r1, r1
 8008e6e:	4402      	add	r2, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	d101      	bne.n	8008e7a <memchr+0x12>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e003      	b.n	8008e82 <memchr+0x1a>
 8008e7a:	7804      	ldrb	r4, [r0, #0]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	428c      	cmp	r4, r1
 8008e80:	d1f6      	bne.n	8008e70 <memchr+0x8>
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <memmove>:
 8008e84:	4288      	cmp	r0, r1
 8008e86:	b510      	push	{r4, lr}
 8008e88:	eb01 0402 	add.w	r4, r1, r2
 8008e8c:	d902      	bls.n	8008e94 <memmove+0x10>
 8008e8e:	4284      	cmp	r4, r0
 8008e90:	4623      	mov	r3, r4
 8008e92:	d807      	bhi.n	8008ea4 <memmove+0x20>
 8008e94:	1e43      	subs	r3, r0, #1
 8008e96:	42a1      	cmp	r1, r4
 8008e98:	d008      	beq.n	8008eac <memmove+0x28>
 8008e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea2:	e7f8      	b.n	8008e96 <memmove+0x12>
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4402      	add	r2, r0
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	d100      	bne.n	8008eae <memmove+0x2a>
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eb6:	e7f7      	b.n	8008ea8 <memmove+0x24>

08008eb8 <__malloc_lock>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__malloc_lock+0x8>)
 8008eba:	f7fe be3c 	b.w	8007b36 <__retarget_lock_acquire_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	20000a24 	.word	0x20000a24

08008ec4 <__malloc_unlock>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	; (8008ecc <__malloc_unlock+0x8>)
 8008ec6:	f7fe be37 	b.w	8007b38 <__retarget_lock_release_recursive>
 8008eca:	bf00      	nop
 8008ecc:	20000a24 	.word	0x20000a24

08008ed0 <_realloc_r>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	4614      	mov	r4, r2
 8008ed6:	460e      	mov	r6, r1
 8008ed8:	b921      	cbnz	r1, 8008ee4 <_realloc_r+0x14>
 8008eda:	4611      	mov	r1, r2
 8008edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ee0:	f7ff bbd4 	b.w	800868c <_malloc_r>
 8008ee4:	b922      	cbnz	r2, 8008ef0 <_realloc_r+0x20>
 8008ee6:	f7ff fb85 	bl	80085f4 <_free_r>
 8008eea:	4625      	mov	r5, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef0:	f000 f96c 	bl	80091cc <_malloc_usable_size_r>
 8008ef4:	42a0      	cmp	r0, r4
 8008ef6:	d20f      	bcs.n	8008f18 <_realloc_r+0x48>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4638      	mov	r0, r7
 8008efc:	f7ff fbc6 	bl	800868c <_malloc_r>
 8008f00:	4605      	mov	r5, r0
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0f2      	beq.n	8008eec <_realloc_r+0x1c>
 8008f06:	4631      	mov	r1, r6
 8008f08:	4622      	mov	r2, r4
 8008f0a:	f7fe fe9f 	bl	8007c4c <memcpy>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff fb6f 	bl	80085f4 <_free_r>
 8008f16:	e7e9      	b.n	8008eec <_realloc_r+0x1c>
 8008f18:	4635      	mov	r5, r6
 8008f1a:	e7e7      	b.n	8008eec <_realloc_r+0x1c>

08008f1c <__sfputc_r>:
 8008f1c:	6893      	ldr	r3, [r2, #8]
 8008f1e:	b410      	push	{r4}
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	6093      	str	r3, [r2, #8]
 8008f26:	da07      	bge.n	8008f38 <__sfputc_r+0x1c>
 8008f28:	6994      	ldr	r4, [r2, #24]
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	db01      	blt.n	8008f32 <__sfputc_r+0x16>
 8008f2e:	290a      	cmp	r1, #10
 8008f30:	d102      	bne.n	8008f38 <__sfputc_r+0x1c>
 8008f32:	bc10      	pop	{r4}
 8008f34:	f7fd bffe 	b.w	8006f34 <__swbuf_r>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	1c58      	adds	r0, r3, #1
 8008f3c:	6010      	str	r0, [r2, #0]
 8008f3e:	7019      	strb	r1, [r3, #0]
 8008f40:	4608      	mov	r0, r1
 8008f42:	bc10      	pop	{r4}
 8008f44:	4770      	bx	lr

08008f46 <__sfputs_r>:
 8008f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	18d5      	adds	r5, r2, r3
 8008f50:	42ac      	cmp	r4, r5
 8008f52:	d101      	bne.n	8008f58 <__sfputs_r+0x12>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e007      	b.n	8008f68 <__sfputs_r+0x22>
 8008f58:	463a      	mov	r2, r7
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f60:	f7ff ffdc 	bl	8008f1c <__sfputc_r>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d1f3      	bne.n	8008f50 <__sfputs_r+0xa>
 8008f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f6c <_vfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	460d      	mov	r5, r1
 8008f72:	4614      	mov	r4, r2
 8008f74:	4698      	mov	r8, r3
 8008f76:	4606      	mov	r6, r0
 8008f78:	b09d      	sub	sp, #116	; 0x74
 8008f7a:	b118      	cbz	r0, 8008f84 <_vfiprintf_r+0x18>
 8008f7c:	6983      	ldr	r3, [r0, #24]
 8008f7e:	b90b      	cbnz	r3, 8008f84 <_vfiprintf_r+0x18>
 8008f80:	f7fe f9d4 	bl	800732c <__sinit>
 8008f84:	4b89      	ldr	r3, [pc, #548]	; (80091ac <_vfiprintf_r+0x240>)
 8008f86:	429d      	cmp	r5, r3
 8008f88:	d11b      	bne.n	8008fc2 <_vfiprintf_r+0x56>
 8008f8a:	6875      	ldr	r5, [r6, #4]
 8008f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f8e:	07d9      	lsls	r1, r3, #31
 8008f90:	d405      	bmi.n	8008f9e <_vfiprintf_r+0x32>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	059a      	lsls	r2, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_vfiprintf_r+0x32>
 8008f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f9a:	f7fe fdcc 	bl	8007b36 <__retarget_lock_acquire_recursive>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	071b      	lsls	r3, r3, #28
 8008fa2:	d501      	bpl.n	8008fa8 <_vfiprintf_r+0x3c>
 8008fa4:	692b      	ldr	r3, [r5, #16]
 8008fa6:	b9eb      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x78>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7fe f826 	bl	8006ffc <__swsetup_r>
 8008fb0:	b1c0      	cbz	r0, 8008fe4 <_vfiprintf_r+0x78>
 8008fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fb4:	07dc      	lsls	r4, r3, #31
 8008fb6:	d50e      	bpl.n	8008fd6 <_vfiprintf_r+0x6a>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	b01d      	add	sp, #116	; 0x74
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	4b7b      	ldr	r3, [pc, #492]	; (80091b0 <_vfiprintf_r+0x244>)
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	d101      	bne.n	8008fcc <_vfiprintf_r+0x60>
 8008fc8:	68b5      	ldr	r5, [r6, #8]
 8008fca:	e7df      	b.n	8008f8c <_vfiprintf_r+0x20>
 8008fcc:	4b79      	ldr	r3, [pc, #484]	; (80091b4 <_vfiprintf_r+0x248>)
 8008fce:	429d      	cmp	r5, r3
 8008fd0:	bf08      	it	eq
 8008fd2:	68f5      	ldreq	r5, [r6, #12]
 8008fd4:	e7da      	b.n	8008f8c <_vfiprintf_r+0x20>
 8008fd6:	89ab      	ldrh	r3, [r5, #12]
 8008fd8:	0598      	lsls	r0, r3, #22
 8008fda:	d4ed      	bmi.n	8008fb8 <_vfiprintf_r+0x4c>
 8008fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fde:	f7fe fdab 	bl	8007b38 <__retarget_lock_release_recursive>
 8008fe2:	e7e9      	b.n	8008fb8 <_vfiprintf_r+0x4c>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fee:	2330      	movs	r3, #48	; 0x30
 8008ff0:	f04f 0901 	mov.w	r9, #1
 8008ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80091b8 <_vfiprintf_r+0x24c>
 8008ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009000:	4623      	mov	r3, r4
 8009002:	469a      	mov	sl, r3
 8009004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009008:	b10a      	cbz	r2, 800900e <_vfiprintf_r+0xa2>
 800900a:	2a25      	cmp	r2, #37	; 0x25
 800900c:	d1f9      	bne.n	8009002 <_vfiprintf_r+0x96>
 800900e:	ebba 0b04 	subs.w	fp, sl, r4
 8009012:	d00b      	beq.n	800902c <_vfiprintf_r+0xc0>
 8009014:	465b      	mov	r3, fp
 8009016:	4622      	mov	r2, r4
 8009018:	4629      	mov	r1, r5
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ff93 	bl	8008f46 <__sfputs_r>
 8009020:	3001      	adds	r0, #1
 8009022:	f000 80aa 	beq.w	800917a <_vfiprintf_r+0x20e>
 8009026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009028:	445a      	add	r2, fp
 800902a:	9209      	str	r2, [sp, #36]	; 0x24
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80a2 	beq.w	800917a <_vfiprintf_r+0x20e>
 8009036:	2300      	movs	r3, #0
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009040:	f10a 0a01 	add.w	sl, sl, #1
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800904c:	931a      	str	r3, [sp, #104]	; 0x68
 800904e:	4654      	mov	r4, sl
 8009050:	2205      	movs	r2, #5
 8009052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009056:	4858      	ldr	r0, [pc, #352]	; (80091b8 <_vfiprintf_r+0x24c>)
 8009058:	f7ff ff06 	bl	8008e68 <memchr>
 800905c:	9a04      	ldr	r2, [sp, #16]
 800905e:	b9d8      	cbnz	r0, 8009098 <_vfiprintf_r+0x12c>
 8009060:	06d1      	lsls	r1, r2, #27
 8009062:	bf44      	itt	mi
 8009064:	2320      	movmi	r3, #32
 8009066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906a:	0713      	lsls	r3, r2, #28
 800906c:	bf44      	itt	mi
 800906e:	232b      	movmi	r3, #43	; 0x2b
 8009070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009074:	f89a 3000 	ldrb.w	r3, [sl]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d015      	beq.n	80090a8 <_vfiprintf_r+0x13c>
 800907c:	4654      	mov	r4, sl
 800907e:	2000      	movs	r0, #0
 8009080:	f04f 0c0a 	mov.w	ip, #10
 8009084:	9a07      	ldr	r2, [sp, #28]
 8009086:	4621      	mov	r1, r4
 8009088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908c:	3b30      	subs	r3, #48	; 0x30
 800908e:	2b09      	cmp	r3, #9
 8009090:	d94e      	bls.n	8009130 <_vfiprintf_r+0x1c4>
 8009092:	b1b0      	cbz	r0, 80090c2 <_vfiprintf_r+0x156>
 8009094:	9207      	str	r2, [sp, #28]
 8009096:	e014      	b.n	80090c2 <_vfiprintf_r+0x156>
 8009098:	eba0 0308 	sub.w	r3, r0, r8
 800909c:	fa09 f303 	lsl.w	r3, r9, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	46a2      	mov	sl, r4
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	e7d2      	b.n	800904e <_vfiprintf_r+0xe2>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	1d19      	adds	r1, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9103      	str	r1, [sp, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfbb      	ittet	lt
 80090b4:	425b      	neglt	r3, r3
 80090b6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ba:	9307      	strge	r3, [sp, #28]
 80090bc:	9307      	strlt	r3, [sp, #28]
 80090be:	bfb8      	it	lt
 80090c0:	9204      	strlt	r2, [sp, #16]
 80090c2:	7823      	ldrb	r3, [r4, #0]
 80090c4:	2b2e      	cmp	r3, #46	; 0x2e
 80090c6:	d10c      	bne.n	80090e2 <_vfiprintf_r+0x176>
 80090c8:	7863      	ldrb	r3, [r4, #1]
 80090ca:	2b2a      	cmp	r3, #42	; 0x2a
 80090cc:	d135      	bne.n	800913a <_vfiprintf_r+0x1ce>
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	3402      	adds	r4, #2
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9203      	str	r2, [sp, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfb8      	it	lt
 80090dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e0:	9305      	str	r3, [sp, #20]
 80090e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091c8 <_vfiprintf_r+0x25c>
 80090e6:	2203      	movs	r2, #3
 80090e8:	4650      	mov	r0, sl
 80090ea:	7821      	ldrb	r1, [r4, #0]
 80090ec:	f7ff febc 	bl	8008e68 <memchr>
 80090f0:	b140      	cbz	r0, 8009104 <_vfiprintf_r+0x198>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	eba0 000a 	sub.w	r0, r0, sl
 80090f8:	fa03 f000 	lsl.w	r0, r3, r0
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	3401      	adds	r4, #1
 8009100:	4303      	orrs	r3, r0
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009108:	2206      	movs	r2, #6
 800910a:	482c      	ldr	r0, [pc, #176]	; (80091bc <_vfiprintf_r+0x250>)
 800910c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009110:	f7ff feaa 	bl	8008e68 <memchr>
 8009114:	2800      	cmp	r0, #0
 8009116:	d03f      	beq.n	8009198 <_vfiprintf_r+0x22c>
 8009118:	4b29      	ldr	r3, [pc, #164]	; (80091c0 <_vfiprintf_r+0x254>)
 800911a:	bb1b      	cbnz	r3, 8009164 <_vfiprintf_r+0x1f8>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	3307      	adds	r3, #7
 8009120:	f023 0307 	bic.w	r3, r3, #7
 8009124:	3308      	adds	r3, #8
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912a:	443b      	add	r3, r7
 800912c:	9309      	str	r3, [sp, #36]	; 0x24
 800912e:	e767      	b.n	8009000 <_vfiprintf_r+0x94>
 8009130:	460c      	mov	r4, r1
 8009132:	2001      	movs	r0, #1
 8009134:	fb0c 3202 	mla	r2, ip, r2, r3
 8009138:	e7a5      	b.n	8009086 <_vfiprintf_r+0x11a>
 800913a:	2300      	movs	r3, #0
 800913c:	f04f 0c0a 	mov.w	ip, #10
 8009140:	4619      	mov	r1, r3
 8009142:	3401      	adds	r4, #1
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	4620      	mov	r0, r4
 8009148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914c:	3a30      	subs	r2, #48	; 0x30
 800914e:	2a09      	cmp	r2, #9
 8009150:	d903      	bls.n	800915a <_vfiprintf_r+0x1ee>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0c5      	beq.n	80090e2 <_vfiprintf_r+0x176>
 8009156:	9105      	str	r1, [sp, #20]
 8009158:	e7c3      	b.n	80090e2 <_vfiprintf_r+0x176>
 800915a:	4604      	mov	r4, r0
 800915c:	2301      	movs	r3, #1
 800915e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009162:	e7f0      	b.n	8009146 <_vfiprintf_r+0x1da>
 8009164:	ab03      	add	r3, sp, #12
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	462a      	mov	r2, r5
 800916a:	4630      	mov	r0, r6
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <_vfiprintf_r+0x258>)
 800916e:	a904      	add	r1, sp, #16
 8009170:	f3af 8000 	nop.w
 8009174:	4607      	mov	r7, r0
 8009176:	1c78      	adds	r0, r7, #1
 8009178:	d1d6      	bne.n	8009128 <_vfiprintf_r+0x1bc>
 800917a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917c:	07d9      	lsls	r1, r3, #31
 800917e:	d405      	bmi.n	800918c <_vfiprintf_r+0x220>
 8009180:	89ab      	ldrh	r3, [r5, #12]
 8009182:	059a      	lsls	r2, r3, #22
 8009184:	d402      	bmi.n	800918c <_vfiprintf_r+0x220>
 8009186:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009188:	f7fe fcd6 	bl	8007b38 <__retarget_lock_release_recursive>
 800918c:	89ab      	ldrh	r3, [r5, #12]
 800918e:	065b      	lsls	r3, r3, #25
 8009190:	f53f af12 	bmi.w	8008fb8 <_vfiprintf_r+0x4c>
 8009194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009196:	e711      	b.n	8008fbc <_vfiprintf_r+0x50>
 8009198:	ab03      	add	r3, sp, #12
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	462a      	mov	r2, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <_vfiprintf_r+0x258>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	f7ff fc98 	bl	8008ad8 <_printf_i>
 80091a8:	e7e4      	b.n	8009174 <_vfiprintf_r+0x208>
 80091aa:	bf00      	nop
 80091ac:	08009cc4 	.word	0x08009cc4
 80091b0:	08009ce4 	.word	0x08009ce4
 80091b4:	08009ca4 	.word	0x08009ca4
 80091b8:	08009f0c 	.word	0x08009f0c
 80091bc:	08009f16 	.word	0x08009f16
 80091c0:	00000000 	.word	0x00000000
 80091c4:	08008f47 	.word	0x08008f47
 80091c8:	08009f12 	.word	0x08009f12

080091cc <_malloc_usable_size_r>:
 80091cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d0:	1f18      	subs	r0, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfbc      	itt	lt
 80091d6:	580b      	ldrlt	r3, [r1, r0]
 80091d8:	18c0      	addlt	r0, r0, r3
 80091da:	4770      	bx	lr

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
